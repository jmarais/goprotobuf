// Copyright 2018 GoProtobuf Authors
//
//    Licensed under the Apache License, Version 2.0 (the "License");
//    you may not use this file except in compliance with the License.
//    You may obtain a copy of the License at
//
//        http://www.apache.org/licenses/LICENSE-2.0
//
//    Unless required by applicable law or agreed to in writing, software
//    distributed under the License is distributed on an "AS IS" BASIS,
//    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//    See the License for the specific language governing permissions and
//    limitations under the License.

// This bnf has been derived from https://developers.google.com/protocol-buffers/docs/reference/proto3-spec

// ### Lexical Part ###

// Lexical elements
// Letters and digits

_letter       : 'A' - 'Z' | 'a' - 'z' ;
_decimalDigit : '0' - '9' ;
_octalDigit   : '0' - '7' ;
_hexDigit     : '0' - '9' | 'A' - 'F' | 'a' - 'f' ;

// Identifiers
_ident : _letter { _letter | _decimalDigit | '_' } ;
ident : _ident ;
_fullIdent : _ident { '.' _ident } ;
fullIdent : _fullIdent ;
_messageName : _ident ;
messageName : _messageName ;
_enumName : _ident ;
enumName : _enumName ;
fieldName : _ident ;
oneofName : _ident ;
mapName : _ident ;
serviceName : _ident ;
rpcName : _ident ;
messageType : [ '.' ] { _ident '.' } _messageName ;
enumType : [ '.' ] { _ident '.' } _enumName ;

// Integer literals

_decimalLit : ( '0' - '9' ) { _decimalDigit } ;
_octalLit   : '0' { _octalDigit } ;
_hexLit     : '0' ( 'x' | 'X' ) _hexDigit { _hexDigit } ;
_intLit      : _decimalLit | _octalLit | _hexLit ;
intLit : _intLit ;

// Floating-point literals

_decimals : _decimalDigit { _decimalDigit } ;
_exponent : ( 'e' | 'E' ) [ '+' | '-' ] _decimals ;
_floatLit  : ( _decimals '.' [ _decimals ] [ _exponent ] | _decimals _exponent | '.' _decimals [ _exponent ] ) | 'i' 'n' 'f' | 'n' 'a' 'n' ;

// Boolean

_boolLit : 't' 'r' 'u' 'e' | 'f' 'a' 'l' 's' 'e' ;

// String literals

_strLit     : ( '\'' { _charValue } '\'' ) | ( '"' { _charValue } '"' ) ;
strLit      : _strLit ;
// removed | /[^\0\n\\]/ from _charValue null value check ?
_charValue  : . | _hexEscape | _octEscape | _charEscape ;
_hexEscape  : '\\' ( 'x' | 'X' ) _hexDigit _hexDigit ;
_octEscape  : '\\' _octalDigit _octalDigit _octalDigit ;
_charEscape : '\\' ( 'a' | 'b' | 'f' | 'n' | 'r' | 't' | 'v' | '\\' | '\'' | '"' ) ;
_quote       : '\'' | '"' ;

proto3 : _quote 'p' 'r' 'o' 't' 'o' '3' _quote ;

// EmptyStatement

emptyStatement : ';' ;

// Constant
// constant = fullIdent | ( [ "-" | "+" ] intLit ) | ( [ "-" | "+" ] floatLit ) | strLit | boolLit
constant : _fullIdent | ( [ '-' | '+' ] _intLit ) | ( [ '-' | '+' ] _floatLit ) | _strLit | _boolLit ;

// Comments

_line_comment  : '/' '/' { . } '\n' | '#' { . } '\n' ;
_block_comment : '/' '*' { . | '*' } '*' '/' ;
!comment       : _line_comment | _block_comment ;
!whitespace    : ' ' | '\t' | '\r' | '\n' ;

// ### Syntax Part ###

// << import "github.com/jmarais/goprotobuf/ast" >>

// Proto file
// proto = syntax { import | package | option | topLevelDef | emptyStatement }
Proto
	: Syntax																	<< $0, nil >>
	| Syntax ProtoContents														<< $0, nil >>
	;

ProtoContents
	: ProtoContent																<< $0, nil >>
	| ProtoContents ProtoContent												<< $0, nil >>
	;

ProtoContent
	: Import																	<< $0, nil >>
	| Package																	<< $0, nil >>
	| Option																	<< $0, nil >>
	| TopLevelDef																<< $0, nil >>
	| emptyStatement															<< $0, nil >>
	;

// Syntax
// The syntax statement is used to define the protobuf version.
// syntax = "syntax" "=" quote "proto3" quote ";"
Syntax
	: "syntax" "=" proto3 ";"										<< $0, nil >>
	;

// Import Statement
// The import statement is used to import another .proto's definitions.
// import = "import" [ "weak" | "public" ] strLit ";"
Import
	: "import" "weak" strLit ";"												<< $0, nil >>
	| "import" "public" strLit ";"												<< $0, nil >>
	;

// Package
// The package specifier can be used to prevent name clashes between protocol message types.
// package = "package" fullIdent ";"
Package
	: "package" fullIdent ";"													<< $0, nil >>
	;

// Option
// Options can be used in proto files, messages, enums and services. An option can be a protobuf defined option or a custom option. For more information, see Options in the language guide.
// option = "option" optionName  "=" constant ";"
Option
	: "option" OptionName "=" constant ";"										<< $0, nil >>
	;

// optionName = ( ident | "(" fullIdent ")" ) { "." ident }
OptionName
	: ident																		<< $0, nil >>
	| ident DotRepeatedIdents													<< $0, nil >>
	| "(" fullIdent ")"															<< $0, nil >>
	| "(" fullIdent ")" DotRepeatedIdents										<< $0, nil >>
	;

DotRepeatedIdents
	: "." ident																	<< $0, nil >>
	| DotRepeatedIdents "." ident												<< $0, nil >>
	;

// topLevelDef = message | enum | service
TopLevelDef
	: Message																	<< $0, nil >>
	| Enum																		<< $0, nil >>
	| Service																	<< $0, nil >>
	;

// Fields
// Fields are the basic elements of a protocol buffer message. Fields can be normal fields, oneof fields, or map fields. A field has a type and field number.
// type = "double" | "float" | "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string" | "bytes" | messageType | enumType
Type
	: "double"																	<< $0, nil >>
	| "float"																	<< $0, nil >>
	| "int32"																	<< $0, nil >>
	| "int64"																	<< $0, nil >>
	| "uint32"																	<< $0, nil >>
	| "uint64"																	<< $0, nil >>
	| "sint32"																	<< $0, nil >>
	| "sint64"																	<< $0, nil >>
	| "fixed32"																	<< $0, nil >>
	| "fixed64"																	<< $0, nil >>
	| "sfixed32"																<< $0, nil >>
	| "sfixed64"																<< $0, nil >>
	| "bool"																	<< $0, nil >>
	| "string"																	<< $0, nil >>
	| "bytes"																	<< $0, nil >>
	| messageType																<< $0, nil >>
	| enumType																	<< $0, nil >>
	;

// fieldNumber = intLit;
FieldNumber
	: intLit																	<< $0, nil >>
	;

// Normal field
// Each field has type, name and field number. It may have field options.
// field = [ "repeated" ] type fieldName "=" fieldNumber [ "[" fieldOptions "]" ] ";"
Field
	: Type fieldName "=" FieldNumber ";"										<< $0, nil >>
	| Type fieldName "=" FieldNumber "[" FieldOptions "]" ";"					<< $0, nil >>
	| "repeated" Type fieldName "=" FieldNumber ";"								<< $0, nil >>
	| "repeated" Type fieldName "=" FieldNumber "[" FieldOptions "]" ";"		<< $0, nil >>
	;

// fieldOptions = fieldOption { ","  fieldOption }
FieldOptions
	: FieldOption																<< $0, nil >>
	| FieldOptions "," FieldOption												<< $0, nil >>
	;

// fieldOption = optionName "=" constant
FieldOption
	: OptionName "=" constant													<< $0, nil >>
	;

// Oneof and oneof field
// A oneof consists of oneof fields and a oneof name.
// oneof = "oneof" oneofName "{" { oneofField | emptyStatement } "}"
Oneof
	: "oneof" oneofName "{" "}"													<< $0, nil >>
	| "oneof" oneofName "{" RepeatedOneOfFieldOrEmpty "}"						<< $0, nil >>
	;

// oneofField = type fieldName "=" fieldNumber [ "[" fieldOptions "]" ] ";"
RepeatedOneOfFieldOrEmpty
	: OneofField																<< $0, nil >>
	| RepeatedOneOfFieldOrEmpty OneofField										<< $0, nil >>
	| emptyStatement															<< $0, nil >>
	| RepeatedOneOfFieldOrEmpty emptyStatement									<< $0, nil >>
	;

OneofField
	: Type fieldName "=" FieldNumber ";"										<< $0, nil >>
	| Type fieldName "=" FieldNumber "[" FieldOptions "]" ";"					<< $0, nil >>
	;

// Map field
// A map field has a key type, value type, name, and field number. The key type can be any integral or string type.
// mapField = "map" "<" keyType "," type ">" mapName "=" fieldNumber [ "[" fieldOptions "]" ] ";"
MapField
	: "map" "<" KeyType "," Type ">" mapName "=" FieldNumber ";"						<< $0, nil >>
	| "map" "<" KeyType "," Type ">" mapName "=" FieldNumber "[" FieldOptions "]" ";"	<< $0, nil >>
	;

// keyType = "int32" | "int64" | "uint32" | "uint64" | "sint32" | "sint64" | "fixed32" | "fixed64" | "sfixed32" | "sfixed64" | "bool" | "string"
KeyType
	: "int32"																	<< $0, nil >>
	| "int64"																	<< $0, nil >>
	| "uint32"																	<< $0, nil >>
	| "uint64"																	<< $0, nil >>
	| "sint32"																	<< $0, nil >>
	| "sint64"																	<< $0, nil >>
	| "fixed32"																	<< $0, nil >>
	| "fixed64"																	<< $0, nil >>
	| "sfixed32"																<< $0, nil >>
	| "sfixed64"																<< $0, nil >>
	| "bool"																	<< $0, nil >>
	| "string"																	<< $0, nil >>
	;

//Reserved
// Reserved statements declare a range of field numbers or field names that cannot be used in this message.
// reserved = "reserved" ( ranges | fieldNames ) ";"
Reserved
	: "reserved" Ranges ";"														<< $0, nil >>
	| "reserved" FieldNames ";"													<< $0, nil >>
	;

// ranges = range { "," range }
Ranges
	: Range																		<< $0, nil >>
	| Ranges "," Range															<< $0, nil >>
	;

// range =  intLit [ "to" ( intLit | "max" ) ]
Range
	: intLit																	<< $0, nil >>
	| intLit "to" intLit														<< $0, nil >>
	| intLit "to" "max"															<< $0, nil >>
	;

// fieldNames = fieldName { "," fieldName }
FieldNames
	: fieldName																	<< $0, nil >>
	| FieldNames "," fieldName													<< $0, nil >>
	;

// Top Level definitions
// Enum definition
// The enum definition consists of a name and an enum body. The enum body can have options and enum fields. Enum definitions must start with enum value zero.
// enum = "enum" enumName enumBody
Enum
	: "enum" enumName EnumBody													<< $0, nil >>
	;

// enumBody = "{" { option | enumField | emptyStatement } "}"
EnumBody
	: "{" "}"																	<< $0, nil >>
	| "{" Option "}"															<< $0, nil >>
	| "{" EnumField "}"															<< $0, nil >>
	| "{" emptyStatement "}"													<< $0, nil >>
	;

// enumField = ident "=" intLit [ "[" enumValueOption { ","  enumValueOption } "]" ]";"
EnumField
	: ident "=" intLit ";"														<< $0, nil >>
	| ident "=" intLit "[" EnumValueOptions "]" ";"								<< $0, nil >>
	;


EnumValueOptions
	: EnumValueOption															<< $0, nil >>
	| EnumValueOptions "," EnumValueOption										<< $0, nil >>
	;

// enumValueOption = optionName "=" constant
EnumValueOption
	: OptionName "=" constant													<< $0, nil >>
	;

// Message definition
// A message consists of a message name and a message body. The message body can have fields, nested enum definitions, nested message definitions, options, oneofs, map fields, and reserved statements.
// message = "message" messageName messageBody
Message
	: "message" messageName "{" "}"												<< $0, nil >>
	| "message" messageName "{" MessageBody "}"								<< $0, nil >>
	;

// messageBody = "{" { field | enum | message | option | oneof | mapField | reserved | emptyStatement } "}"
MessageBody
	: MessageContent															<< $0, nil >>
	| MessageBody MessageContent												<< $0, nil >>
	;

MessageContent
	: Field																		<< $0, nil >>
	| Enum																		<< $0, nil >>
	| Message																	<< $0, nil >>
	| Option																	<< $0, nil >>
	| Oneof																		<< $0, nil >>
	| MapField																	<< $0, nil >>
	| Reserved																	<< $0, nil >>
	| emptyStatement															<< $0, nil >>
	;

// Service definition
// service = "service" serviceName "{" { option | rpc | emptyStatement } "}"
Service
	: "service" serviceName "{" "}"												<< $0, nil >>
	| "service" serviceName "{" ServiceBodies "}"								<< $0, nil >>
	;

ServiceBodies
	: ServiceBody																<< $0, nil >>
	| ServiceBodies ServiceBody													<< $0, nil >>
	;

ServiceBody
	: Option																	<< $0, nil >>
	| Rpc																		<< $0, nil >>
	| emptyStatement															<< $0, nil >>
	;

// rpc = "rpc" rpcName "(" [ "stream" ] messageType ")" "returns" "(" [ "stream" ] messageType ")" (( "{" {option | emptyStatement } "}" ) | ";")
Rpc
	: "rpc" rpcName "(" messageType ")" "returns" "(" messageType ")" RpcBodies						<< $0, nil >>
	| "rpc" rpcName "(" "stream" messageType ")" "returns" "(" messageType ")" RpcBodies			<< $0, nil >>
	| "rpc" rpcName "(" messageType ")" "returns" "(" "stream" messageType ")" RpcBodies			<< $0, nil >>
	| "rpc" rpcName "(" "stream" messageType ")" "returns" "(" "stream" messageType ")" RpcBodies	<< $0, nil >>
	;
// rpc = "rpc" rpcName "(" [ "stream" ] messageType ")" "returns" "(" [ "stream" ] messageType ")"
//       (( "{" {option | emptyStatement } "}" ) | ";")
RpcBodies
	: "{" "}"																	<< $0, nil >>
	| "{" RpcBody "}"															<< $0, nil >>
	| ";"																		<< $0, nil >>
	;

RpcBody
	: Option																	<< $0, nil >>
	| emptyStatement															<< $0, nil >>
	| RpcBody Option															<< $0, nil >>
	| RpcBody emptyStatement													<< $0, nil >>
	;