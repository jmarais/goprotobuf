// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"emptyStatement",
		"syntax",
		"=",
		"quote",
		"proto3",
		";",
		"import",
		"weak",
		"strLit",
		"public",
		"package",
		"option",
		"ident",
		"(",
		")",
		".",
		"double",
		"float",
		"int32",
		"int64",
		"uint32",
		"uint64",
		"sint32",
		"sint64",
		"fixed32",
		"fixed64",
		"sfixed32",
		"sfixed64",
		"bool",
		"string",
		"bytes",
		"intLit",
		"[",
		"]",
		"repeated",
		",",
		"oneof",
		"{",
		"}",
		"map",
		"<",
		">",
		"reserved",
		"to",
		"max",
		"enum",
		"message",
		"service",
		"rpc",
		"returns",
		"stream",
		"-",
		"+",
		"floatLit",
		"boolLit",
	},

	idMap: map[string]Type{
		"INVALID":        0,
		"$":              1,
		"emptyStatement": 2,
		"syntax":         3,
		"=":              4,
		"quote":          5,
		"proto3":         6,
		";":              7,
		"import":         8,
		"weak":           9,
		"strLit":         10,
		"public":         11,
		"package":        12,
		"option":         13,
		"ident":          14,
		"(":              15,
		")":              16,
		".":              17,
		"double":         18,
		"float":          19,
		"int32":          20,
		"int64":          21,
		"uint32":         22,
		"uint64":         23,
		"sint32":         24,
		"sint64":         25,
		"fixed32":        26,
		"fixed64":        27,
		"sfixed32":       28,
		"sfixed64":       29,
		"bool":           30,
		"string":         31,
		"bytes":          32,
		"intLit":         33,
		"[":              34,
		"]":              35,
		"repeated":       36,
		",":              37,
		"oneof":          38,
		"{":              39,
		"}":              40,
		"map":            41,
		"<":              42,
		">":              43,
		"reserved":       44,
		"to":             45,
		"max":            46,
		"enum":           47,
		"message":        48,
		"service":        49,
		"rpc":            50,
		"returns":        51,
		"stream":         52,
		"-":              53,
		"+":              54,
		"floatLit":       55,
		"boolLit":        56,
	},
}
