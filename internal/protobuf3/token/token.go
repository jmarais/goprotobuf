// Code generated by gocc; DO NOT EDIT.

package token

import (
	"fmt"
)

type Token struct {
	Type
	Lit []byte
	Pos
}

type Type int

const (
	INVALID Type = iota
	EOF
)

type Pos struct {
	Offset int
	Line   int
	Column int
}

func (p Pos) String() string {
	return fmt.Sprintf("Pos(offset=%d, line=%d, column=%d)", p.Offset, p.Line, p.Column)
}

type TokenMap struct {
	typeMap []string
	idMap   map[string]Type
}

func (m TokenMap) Id(tok Type) string {
	if int(tok) < len(m.typeMap) {
		return m.typeMap[tok]
	}
	return "unknown"
}

func (m TokenMap) Type(tok string) Type {
	if typ, exist := m.idMap[tok]; exist {
		return typ
	}
	return INVALID
}

func (m TokenMap) TokenString(tok *Token) string {
	//TODO: refactor to print pos & token string properly
	return fmt.Sprintf("%s(%d,%s)", m.Id(tok.Type), tok.Type, tok.Lit)
}

func (m TokenMap) StringType(typ Type) string {
	return fmt.Sprintf("%s(%d)", m.Id(typ), typ)
}

var TokMap = TokenMap{
	typeMap: []string{
		"INVALID",
		"$",
		"emptyStatement",
		"syntax",
		"=",
		"proto3",
		";",
		"import",
		"weak",
		"strLit",
		"public",
		"package",
		"fullIdent",
		"option",
		"constant",
		"ident",
		"(",
		")",
		".",
		"double",
		"float",
		"int32",
		"int64",
		"uint32",
		"uint64",
		"sint32",
		"sint64",
		"fixed32",
		"fixed64",
		"sfixed32",
		"sfixed64",
		"bool",
		"string",
		"bytes",
		"messageType",
		"enumType",
		"intLit",
		"fieldName",
		"[",
		"]",
		"repeated",
		",",
		"oneof",
		"oneofName",
		"{",
		"}",
		"map",
		"<",
		">",
		"mapName",
		"reserved",
		"to",
		"max",
		"enum",
		"enumName",
		"message",
		"messageName",
		"service",
		"serviceName",
		"rpc",
		"rpcName",
		"returns",
		"stream",
	},

	idMap: map[string]Type{
		"INVALID":        0,
		"$":              1,
		"emptyStatement": 2,
		"syntax":         3,
		"=":              4,
		"proto3":         5,
		";":              6,
		"import":         7,
		"weak":           8,
		"strLit":         9,
		"public":         10,
		"package":        11,
		"fullIdent":      12,
		"option":         13,
		"constant":       14,
		"ident":          15,
		"(":              16,
		")":              17,
		".":              18,
		"double":         19,
		"float":          20,
		"int32":          21,
		"int64":          22,
		"uint32":         23,
		"uint64":         24,
		"sint32":         25,
		"sint64":         26,
		"fixed32":        27,
		"fixed64":        28,
		"sfixed32":       29,
		"sfixed64":       30,
		"bool":           31,
		"string":         32,
		"bytes":          33,
		"messageType":    34,
		"enumType":       35,
		"intLit":         36,
		"fieldName":      37,
		"[":              38,
		"]":              39,
		"repeated":       40,
		",":              41,
		"oneof":          42,
		"oneofName":      43,
		"{":              44,
		"}":              45,
		"map":            46,
		"<":              47,
		">":              48,
		"mapName":        49,
		"reserved":       50,
		"to":             51,
		"max":            52,
		"enum":           53,
		"enumName":       54,
		"message":        55,
		"messageName":    56,
		"service":        57,
		"serviceName":    58,
		"rpc":            59,
		"rpcName":        60,
		"returns":        61,
		"stream":         62,
	},
}
