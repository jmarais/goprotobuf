S0{
	S' : •Proto «$»
	Proto : •Syntax «$»
	Proto : •Syntax ProtoContents «$»
	Syntax : •syntax = quote proto3 quote ; «$»
	Syntax : •syntax = quote proto3 quote ; «emptyStatement»
	Syntax : •syntax = quote proto3 quote ; «enum»
	Syntax : •syntax = quote proto3 quote ; «import»
	Syntax : •syntax = quote proto3 quote ; «message»
	Syntax : •syntax = quote proto3 quote ; «option»
	Syntax : •syntax = quote proto3 quote ; «package»
	Syntax : •syntax = quote proto3 quote ; «service»
}
Transitions:
	Proto -> 1
	Syntax -> 2
	syntax -> 3


S1{
	S' : Proto• «$»
}
Transitions:


S2{
	Proto : Syntax• «$»
	Proto : Syntax •ProtoContents «$»
	ProtoContents : •ProtoContent «$»
	ProtoContents : •ProtoContents ProtoContent «$»
	ProtoContent : •Import «$»
	ProtoContent : •Package «$»
	ProtoContent : •Option «$»
	ProtoContent : •TopLevelDef «$»
	ProtoContent : •emptyStatement «$»
	ProtoContents : •ProtoContent «emptyStatement»
	ProtoContents : •ProtoContent «enum»
	ProtoContents : •ProtoContent «import»
	ProtoContents : •ProtoContent «message»
	ProtoContents : •ProtoContent «option»
	ProtoContents : •ProtoContent «package»
	ProtoContents : •ProtoContent «service»
	ProtoContents : •ProtoContents ProtoContent «emptyStatement»
	ProtoContents : •ProtoContents ProtoContent «enum»
	ProtoContents : •ProtoContents ProtoContent «import»
	ProtoContents : •ProtoContents ProtoContent «message»
	ProtoContents : •ProtoContents ProtoContent «option»
	ProtoContents : •ProtoContents ProtoContent «package»
	ProtoContents : •ProtoContents ProtoContent «service»
	Import : •import weak String ; «$»
	Import : •import public String ; «$»
	Package : •package fullIdent ; «$»
	Option : •option OptionName = constant ; «$»
	TopLevelDef : •Message «$»
	TopLevelDef : •Enum «$»
	TopLevelDef : •Service «$»
	ProtoContent : •Import «emptyStatement»
	ProtoContent : •Package «emptyStatement»
	ProtoContent : •Option «emptyStatement»
	ProtoContent : •TopLevelDef «emptyStatement»
	ProtoContent : •emptyStatement «emptyStatement»
	ProtoContent : •Import «enum»
	ProtoContent : •Package «enum»
	ProtoContent : •Option «enum»
	ProtoContent : •TopLevelDef «enum»
	ProtoContent : •emptyStatement «enum»
	ProtoContent : •Import «import»
	ProtoContent : •Package «import»
	ProtoContent : •Option «import»
	ProtoContent : •TopLevelDef «import»
	ProtoContent : •emptyStatement «import»
	ProtoContent : •Import «message»
	ProtoContent : •Package «message»
	ProtoContent : •Option «message»
	ProtoContent : •TopLevelDef «message»
	ProtoContent : •emptyStatement «message»
	ProtoContent : •Import «option»
	ProtoContent : •Package «option»
	ProtoContent : •Option «option»
	ProtoContent : •TopLevelDef «option»
	ProtoContent : •emptyStatement «option»
	ProtoContent : •Import «package»
	ProtoContent : •Package «package»
	ProtoContent : •Option «package»
	ProtoContent : •TopLevelDef «package»
	ProtoContent : •emptyStatement «package»
	ProtoContent : •Import «service»
	ProtoContent : •Package «service»
	ProtoContent : •Option «service»
	ProtoContent : •TopLevelDef «service»
	ProtoContent : •emptyStatement «service»
	Message : •message messageName { } «$»
	Message : •message messageName { MessageBody } «$»
	Enum : •enum enumName EnumBody «$»
	Service : •service serviceName { } «$»
	Service : •service serviceName { ServiceBodies } «$»
	Import : •import weak String ; «emptyStatement»
	Import : •import public String ; «emptyStatement»
	Package : •package fullIdent ; «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	TopLevelDef : •Message «emptyStatement»
	TopLevelDef : •Enum «emptyStatement»
	TopLevelDef : •Service «emptyStatement»
	Import : •import weak String ; «enum»
	Import : •import public String ; «enum»
	Package : •package fullIdent ; «enum»
	Option : •option OptionName = constant ; «enum»
	TopLevelDef : •Message «enum»
	TopLevelDef : •Enum «enum»
	TopLevelDef : •Service «enum»
	Import : •import weak String ; «import»
	Import : •import public String ; «import»
	Package : •package fullIdent ; «import»
	Option : •option OptionName = constant ; «import»
	TopLevelDef : •Message «import»
	TopLevelDef : •Enum «import»
	TopLevelDef : •Service «import»
	Import : •import weak String ; «message»
	Import : •import public String ; «message»
	Package : •package fullIdent ; «message»
	Option : •option OptionName = constant ; «message»
	TopLevelDef : •Message «message»
	TopLevelDef : •Enum «message»
	TopLevelDef : •Service «message»
	Import : •import weak String ; «option»
	Import : •import public String ; «option»
	Package : •package fullIdent ; «option»
	Option : •option OptionName = constant ; «option»
	TopLevelDef : •Message «option»
	TopLevelDef : •Enum «option»
	TopLevelDef : •Service «option»
	Import : •import weak String ; «package»
	Import : •import public String ; «package»
	Package : •package fullIdent ; «package»
	Option : •option OptionName = constant ; «package»
	TopLevelDef : •Message «package»
	TopLevelDef : •Enum «package»
	TopLevelDef : •Service «package»
	Import : •import weak String ; «service»
	Import : •import public String ; «service»
	Package : •package fullIdent ; «service»
	Option : •option OptionName = constant ; «service»
	TopLevelDef : •Message «service»
	TopLevelDef : •Enum «service»
	TopLevelDef : •Service «service»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Service : •service serviceName { } «emptyStatement»
	Service : •service serviceName { ServiceBodies } «emptyStatement»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Enum : •enum enumName EnumBody «enum»
	Service : •service serviceName { } «enum»
	Service : •service serviceName { ServiceBodies } «enum»
	Message : •message messageName { } «import»
	Message : •message messageName { MessageBody } «import»
	Enum : •enum enumName EnumBody «import»
	Service : •service serviceName { } «import»
	Service : •service serviceName { ServiceBodies } «import»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Enum : •enum enumName EnumBody «message»
	Service : •service serviceName { } «message»
	Service : •service serviceName { ServiceBodies } «message»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Enum : •enum enumName EnumBody «option»
	Service : •service serviceName { } «option»
	Service : •service serviceName { ServiceBodies } «option»
	Message : •message messageName { } «package»
	Message : •message messageName { MessageBody } «package»
	Enum : •enum enumName EnumBody «package»
	Service : •service serviceName { } «package»
	Service : •service serviceName { ServiceBodies } «package»
	Message : •message messageName { } «service»
	Message : •message messageName { MessageBody } «service»
	Enum : •enum enumName EnumBody «service»
	Service : •service serviceName { } «service»
	Service : •service serviceName { ServiceBodies } «service»
}
Transitions:
	ProtoContents -> 4
	ProtoContent -> 5
	Import -> 6
	Package -> 7
	Option -> 8
	TopLevelDef -> 9
	emptyStatement -> 10
	import -> 11
	package -> 12
	option -> 13
	Message -> 14
	Enum -> 15
	Service -> 16
	enum -> 17
	message -> 18
	service -> 19


S3{
	Syntax : syntax •= quote proto3 quote ; «$»
	Syntax : syntax •= quote proto3 quote ; «emptyStatement»
	Syntax : syntax •= quote proto3 quote ; «enum»
	Syntax : syntax •= quote proto3 quote ; «import»
	Syntax : syntax •= quote proto3 quote ; «message»
	Syntax : syntax •= quote proto3 quote ; «option»
	Syntax : syntax •= quote proto3 quote ; «package»
	Syntax : syntax •= quote proto3 quote ; «service»
}
Transitions:
	= -> 20


S4{
	Proto : Syntax ProtoContents• «$»
	ProtoContents : ProtoContents •ProtoContent «$»
	ProtoContents : ProtoContents •ProtoContent «emptyStatement»
	ProtoContents : ProtoContents •ProtoContent «enum»
	ProtoContents : ProtoContents •ProtoContent «import»
	ProtoContents : ProtoContents •ProtoContent «message»
	ProtoContents : ProtoContents •ProtoContent «option»
	ProtoContents : ProtoContents •ProtoContent «package»
	ProtoContents : ProtoContents •ProtoContent «service»
	ProtoContent : •Import «$»
	ProtoContent : •Package «$»
	ProtoContent : •Option «$»
	ProtoContent : •TopLevelDef «$»
	ProtoContent : •emptyStatement «$»
	ProtoContent : •Import «emptyStatement»
	ProtoContent : •Package «emptyStatement»
	ProtoContent : •Option «emptyStatement»
	ProtoContent : •TopLevelDef «emptyStatement»
	ProtoContent : •emptyStatement «emptyStatement»
	ProtoContent : •Import «enum»
	ProtoContent : •Package «enum»
	ProtoContent : •Option «enum»
	ProtoContent : •TopLevelDef «enum»
	ProtoContent : •emptyStatement «enum»
	ProtoContent : •Import «import»
	ProtoContent : •Package «import»
	ProtoContent : •Option «import»
	ProtoContent : •TopLevelDef «import»
	ProtoContent : •emptyStatement «import»
	ProtoContent : •Import «message»
	ProtoContent : •Package «message»
	ProtoContent : •Option «message»
	ProtoContent : •TopLevelDef «message»
	ProtoContent : •emptyStatement «message»
	ProtoContent : •Import «option»
	ProtoContent : •Package «option»
	ProtoContent : •Option «option»
	ProtoContent : •TopLevelDef «option»
	ProtoContent : •emptyStatement «option»
	ProtoContent : •Import «package»
	ProtoContent : •Package «package»
	ProtoContent : •Option «package»
	ProtoContent : •TopLevelDef «package»
	ProtoContent : •emptyStatement «package»
	ProtoContent : •Import «service»
	ProtoContent : •Package «service»
	ProtoContent : •Option «service»
	ProtoContent : •TopLevelDef «service»
	ProtoContent : •emptyStatement «service»
	Import : •import weak String ; «$»
	Import : •import public String ; «$»
	Package : •package fullIdent ; «$»
	Option : •option OptionName = constant ; «$»
	TopLevelDef : •Message «$»
	TopLevelDef : •Enum «$»
	TopLevelDef : •Service «$»
	Import : •import weak String ; «emptyStatement»
	Import : •import public String ; «emptyStatement»
	Package : •package fullIdent ; «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	TopLevelDef : •Message «emptyStatement»
	TopLevelDef : •Enum «emptyStatement»
	TopLevelDef : •Service «emptyStatement»
	Import : •import weak String ; «enum»
	Import : •import public String ; «enum»
	Package : •package fullIdent ; «enum»
	Option : •option OptionName = constant ; «enum»
	TopLevelDef : •Message «enum»
	TopLevelDef : •Enum «enum»
	TopLevelDef : •Service «enum»
	Import : •import weak String ; «import»
	Import : •import public String ; «import»
	Package : •package fullIdent ; «import»
	Option : •option OptionName = constant ; «import»
	TopLevelDef : •Message «import»
	TopLevelDef : •Enum «import»
	TopLevelDef : •Service «import»
	Import : •import weak String ; «message»
	Import : •import public String ; «message»
	Package : •package fullIdent ; «message»
	Option : •option OptionName = constant ; «message»
	TopLevelDef : •Message «message»
	TopLevelDef : •Enum «message»
	TopLevelDef : •Service «message»
	Import : •import weak String ; «option»
	Import : •import public String ; «option»
	Package : •package fullIdent ; «option»
	Option : •option OptionName = constant ; «option»
	TopLevelDef : •Message «option»
	TopLevelDef : •Enum «option»
	TopLevelDef : •Service «option»
	Import : •import weak String ; «package»
	Import : •import public String ; «package»
	Package : •package fullIdent ; «package»
	Option : •option OptionName = constant ; «package»
	TopLevelDef : •Message «package»
	TopLevelDef : •Enum «package»
	TopLevelDef : •Service «package»
	Import : •import weak String ; «service»
	Import : •import public String ; «service»
	Package : •package fullIdent ; «service»
	Option : •option OptionName = constant ; «service»
	TopLevelDef : •Message «service»
	TopLevelDef : •Enum «service»
	TopLevelDef : •Service «service»
	Message : •message messageName { } «$»
	Message : •message messageName { MessageBody } «$»
	Enum : •enum enumName EnumBody «$»
	Service : •service serviceName { } «$»
	Service : •service serviceName { ServiceBodies } «$»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Service : •service serviceName { } «emptyStatement»
	Service : •service serviceName { ServiceBodies } «emptyStatement»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Enum : •enum enumName EnumBody «enum»
	Service : •service serviceName { } «enum»
	Service : •service serviceName { ServiceBodies } «enum»
	Message : •message messageName { } «import»
	Message : •message messageName { MessageBody } «import»
	Enum : •enum enumName EnumBody «import»
	Service : •service serviceName { } «import»
	Service : •service serviceName { ServiceBodies } «import»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Enum : •enum enumName EnumBody «message»
	Service : •service serviceName { } «message»
	Service : •service serviceName { ServiceBodies } «message»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Enum : •enum enumName EnumBody «option»
	Service : •service serviceName { } «option»
	Service : •service serviceName { ServiceBodies } «option»
	Message : •message messageName { } «package»
	Message : •message messageName { MessageBody } «package»
	Enum : •enum enumName EnumBody «package»
	Service : •service serviceName { } «package»
	Service : •service serviceName { ServiceBodies } «package»
	Message : •message messageName { } «service»
	Message : •message messageName { MessageBody } «service»
	Enum : •enum enumName EnumBody «service»
	Service : •service serviceName { } «service»
	Service : •service serviceName { ServiceBodies } «service»
}
Transitions:
	Import -> 6
	Package -> 7
	Option -> 8
	TopLevelDef -> 9
	emptyStatement -> 10
	import -> 11
	package -> 12
	option -> 13
	Message -> 14
	Enum -> 15
	Service -> 16
	enum -> 17
	message -> 18
	service -> 19
	ProtoContent -> 21


S5{
	ProtoContents : ProtoContent• «$»
	ProtoContents : ProtoContent• «emptyStatement»
	ProtoContents : ProtoContent• «enum»
	ProtoContents : ProtoContent• «import»
	ProtoContents : ProtoContent• «message»
	ProtoContents : ProtoContent• «option»
	ProtoContents : ProtoContent• «package»
	ProtoContents : ProtoContent• «service»
}
Transitions:


S6{
	ProtoContent : Import• «$»
	ProtoContent : Import• «emptyStatement»
	ProtoContent : Import• «enum»
	ProtoContent : Import• «import»
	ProtoContent : Import• «message»
	ProtoContent : Import• «option»
	ProtoContent : Import• «package»
	ProtoContent : Import• «service»
}
Transitions:


S7{
	ProtoContent : Package• «$»
	ProtoContent : Package• «emptyStatement»
	ProtoContent : Package• «enum»
	ProtoContent : Package• «import»
	ProtoContent : Package• «message»
	ProtoContent : Package• «option»
	ProtoContent : Package• «package»
	ProtoContent : Package• «service»
}
Transitions:


S8{
	ProtoContent : Option• «$»
	ProtoContent : Option• «emptyStatement»
	ProtoContent : Option• «enum»
	ProtoContent : Option• «import»
	ProtoContent : Option• «message»
	ProtoContent : Option• «option»
	ProtoContent : Option• «package»
	ProtoContent : Option• «service»
}
Transitions:


S9{
	ProtoContent : TopLevelDef• «$»
	ProtoContent : TopLevelDef• «emptyStatement»
	ProtoContent : TopLevelDef• «enum»
	ProtoContent : TopLevelDef• «import»
	ProtoContent : TopLevelDef• «message»
	ProtoContent : TopLevelDef• «option»
	ProtoContent : TopLevelDef• «package»
	ProtoContent : TopLevelDef• «service»
}
Transitions:


S10{
	ProtoContent : emptyStatement• «$»
	ProtoContent : emptyStatement• «emptyStatement»
	ProtoContent : emptyStatement• «enum»
	ProtoContent : emptyStatement• «import»
	ProtoContent : emptyStatement• «message»
	ProtoContent : emptyStatement• «option»
	ProtoContent : emptyStatement• «package»
	ProtoContent : emptyStatement• «service»
}
Transitions:


S11{
	Import : import •weak String ; «$»
	Import : import •public String ; «$»
	Import : import •weak String ; «emptyStatement»
	Import : import •public String ; «emptyStatement»
	Import : import •weak String ; «enum»
	Import : import •public String ; «enum»
	Import : import •weak String ; «import»
	Import : import •public String ; «import»
	Import : import •weak String ; «message»
	Import : import •public String ; «message»
	Import : import •weak String ; «option»
	Import : import •public String ; «option»
	Import : import •weak String ; «package»
	Import : import •public String ; «package»
	Import : import •weak String ; «service»
	Import : import •public String ; «service»
}
Transitions:
	weak -> 22
	public -> 23


S12{
	Package : package •fullIdent ; «$»
	Package : package •fullIdent ; «emptyStatement»
	Package : package •fullIdent ; «enum»
	Package : package •fullIdent ; «import»
	Package : package •fullIdent ; «message»
	Package : package •fullIdent ; «option»
	Package : package •fullIdent ; «package»
	Package : package •fullIdent ; «service»
}
Transitions:
	fullIdent -> 24


S13{
	Option : option •OptionName = constant ; «$»
	Option : option •OptionName = constant ; «emptyStatement»
	Option : option •OptionName = constant ; «enum»
	Option : option •OptionName = constant ; «import»
	Option : option •OptionName = constant ; «message»
	Option : option •OptionName = constant ; «option»
	Option : option •OptionName = constant ; «package»
	Option : option •OptionName = constant ; «service»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	OptionName -> 25
	ident -> 26
	( -> 27


S14{
	TopLevelDef : Message• «$»
	TopLevelDef : Message• «emptyStatement»
	TopLevelDef : Message• «enum»
	TopLevelDef : Message• «import»
	TopLevelDef : Message• «message»
	TopLevelDef : Message• «option»
	TopLevelDef : Message• «package»
	TopLevelDef : Message• «service»
}
Transitions:


S15{
	TopLevelDef : Enum• «$»
	TopLevelDef : Enum• «emptyStatement»
	TopLevelDef : Enum• «enum»
	TopLevelDef : Enum• «import»
	TopLevelDef : Enum• «message»
	TopLevelDef : Enum• «option»
	TopLevelDef : Enum• «package»
	TopLevelDef : Enum• «service»
}
Transitions:


S16{
	TopLevelDef : Service• «$»
	TopLevelDef : Service• «emptyStatement»
	TopLevelDef : Service• «enum»
	TopLevelDef : Service• «import»
	TopLevelDef : Service• «message»
	TopLevelDef : Service• «option»
	TopLevelDef : Service• «package»
	TopLevelDef : Service• «service»
}
Transitions:


S17{
	Enum : enum •enumName EnumBody «$»
	Enum : enum •enumName EnumBody «emptyStatement»
	Enum : enum •enumName EnumBody «enum»
	Enum : enum •enumName EnumBody «import»
	Enum : enum •enumName EnumBody «message»
	Enum : enum •enumName EnumBody «option»
	Enum : enum •enumName EnumBody «package»
	Enum : enum •enumName EnumBody «service»
}
Transitions:
	enumName -> 28


S18{
	Message : message •messageName { } «$»
	Message : message •messageName { MessageBody } «$»
	Message : message •messageName { } «emptyStatement»
	Message : message •messageName { MessageBody } «emptyStatement»
	Message : message •messageName { } «enum»
	Message : message •messageName { MessageBody } «enum»
	Message : message •messageName { } «import»
	Message : message •messageName { MessageBody } «import»
	Message : message •messageName { } «message»
	Message : message •messageName { MessageBody } «message»
	Message : message •messageName { } «option»
	Message : message •messageName { MessageBody } «option»
	Message : message •messageName { } «package»
	Message : message •messageName { MessageBody } «package»
	Message : message •messageName { } «service»
	Message : message •messageName { MessageBody } «service»
}
Transitions:
	messageName -> 29


S19{
	Service : service •serviceName { } «$»
	Service : service •serviceName { ServiceBodies } «$»
	Service : service •serviceName { } «emptyStatement»
	Service : service •serviceName { ServiceBodies } «emptyStatement»
	Service : service •serviceName { } «enum»
	Service : service •serviceName { ServiceBodies } «enum»
	Service : service •serviceName { } «import»
	Service : service •serviceName { ServiceBodies } «import»
	Service : service •serviceName { } «message»
	Service : service •serviceName { ServiceBodies } «message»
	Service : service •serviceName { } «option»
	Service : service •serviceName { ServiceBodies } «option»
	Service : service •serviceName { } «package»
	Service : service •serviceName { ServiceBodies } «package»
	Service : service •serviceName { } «service»
	Service : service •serviceName { ServiceBodies } «service»
}
Transitions:
	serviceName -> 30


S20{
	Syntax : syntax = •quote proto3 quote ; «$»
	Syntax : syntax = •quote proto3 quote ; «emptyStatement»
	Syntax : syntax = •quote proto3 quote ; «enum»
	Syntax : syntax = •quote proto3 quote ; «import»
	Syntax : syntax = •quote proto3 quote ; «message»
	Syntax : syntax = •quote proto3 quote ; «option»
	Syntax : syntax = •quote proto3 quote ; «package»
	Syntax : syntax = •quote proto3 quote ; «service»
}
Transitions:
	quote -> 31


S21{
	ProtoContents : ProtoContents ProtoContent• «$»
	ProtoContents : ProtoContents ProtoContent• «emptyStatement»
	ProtoContents : ProtoContents ProtoContent• «enum»
	ProtoContents : ProtoContents ProtoContent• «import»
	ProtoContents : ProtoContents ProtoContent• «message»
	ProtoContents : ProtoContents ProtoContent• «option»
	ProtoContents : ProtoContents ProtoContent• «package»
	ProtoContents : ProtoContents ProtoContent• «service»
}
Transitions:


S22{
	Import : import weak •String ; «$»
	Import : import weak •String ; «emptyStatement»
	Import : import weak •String ; «enum»
	Import : import weak •String ; «import»
	Import : import weak •String ; «message»
	Import : import weak •String ; «option»
	Import : import weak •String ; «package»
	Import : import weak •String ; «service»
	String : •strLit «;»
}
Transitions:
	String -> 32
	strLit -> 33


S23{
	Import : import public •String ; «$»
	Import : import public •String ; «emptyStatement»
	Import : import public •String ; «enum»
	Import : import public •String ; «import»
	Import : import public •String ; «message»
	Import : import public •String ; «option»
	Import : import public •String ; «package»
	Import : import public •String ; «service»
	String : •strLit «;»
}
Transitions:
	strLit -> 33
	String -> 34


S24{
	Package : package fullIdent •; «$»
	Package : package fullIdent •; «emptyStatement»
	Package : package fullIdent •; «enum»
	Package : package fullIdent •; «import»
	Package : package fullIdent •; «message»
	Package : package fullIdent •; «option»
	Package : package fullIdent •; «package»
	Package : package fullIdent •; «service»
}
Transitions:
	; -> 35


S25{
	Option : option OptionName •= constant ; «$»
	Option : option OptionName •= constant ; «emptyStatement»
	Option : option OptionName •= constant ; «enum»
	Option : option OptionName •= constant ; «import»
	Option : option OptionName •= constant ; «message»
	Option : option OptionName •= constant ; «option»
	Option : option OptionName •= constant ; «package»
	Option : option OptionName •= constant ; «service»
}
Transitions:
	= -> 36


S26{
	OptionName : ident• «=»
	OptionName : ident •DotRepeatedIdents «=»
	DotRepeatedIdents : •. ident «=»
	DotRepeatedIdents : •DotRepeatedIdents . ident «=»
	DotRepeatedIdents : •. ident «.»
	DotRepeatedIdents : •DotRepeatedIdents . ident «.»
}
Transitions:
	DotRepeatedIdents -> 37
	. -> 38


S27{
	OptionName : ( •fullIdent ) «=»
	OptionName : ( •fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	fullIdent -> 39


S28{
	Enum : enum enumName •EnumBody «$»
	Enum : enum enumName •EnumBody «emptyStatement»
	Enum : enum enumName •EnumBody «enum»
	Enum : enum enumName •EnumBody «import»
	Enum : enum enumName •EnumBody «message»
	Enum : enum enumName •EnumBody «option»
	Enum : enum enumName •EnumBody «package»
	Enum : enum enumName •EnumBody «service»
	EnumBody : •{ } «$»
	EnumBody : •{ Option } «$»
	EnumBody : •{ EnumField } «$»
	EnumBody : •{ emptyStatement } «$»
	EnumBody : •{ } «emptyStatement»
	EnumBody : •{ Option } «emptyStatement»
	EnumBody : •{ EnumField } «emptyStatement»
	EnumBody : •{ emptyStatement } «emptyStatement»
	EnumBody : •{ } «enum»
	EnumBody : •{ Option } «enum»
	EnumBody : •{ EnumField } «enum»
	EnumBody : •{ emptyStatement } «enum»
	EnumBody : •{ } «import»
	EnumBody : •{ Option } «import»
	EnumBody : •{ EnumField } «import»
	EnumBody : •{ emptyStatement } «import»
	EnumBody : •{ } «message»
	EnumBody : •{ Option } «message»
	EnumBody : •{ EnumField } «message»
	EnumBody : •{ emptyStatement } «message»
	EnumBody : •{ } «option»
	EnumBody : •{ Option } «option»
	EnumBody : •{ EnumField } «option»
	EnumBody : •{ emptyStatement } «option»
	EnumBody : •{ } «package»
	EnumBody : •{ Option } «package»
	EnumBody : •{ EnumField } «package»
	EnumBody : •{ emptyStatement } «package»
	EnumBody : •{ } «service»
	EnumBody : •{ Option } «service»
	EnumBody : •{ EnumField } «service»
	EnumBody : •{ emptyStatement } «service»
}
Transitions:
	{ -> 40
	EnumBody -> 41


S29{
	Message : message messageName •{ } «$»
	Message : message messageName •{ MessageBody } «$»
	Message : message messageName •{ } «emptyStatement»
	Message : message messageName •{ MessageBody } «emptyStatement»
	Message : message messageName •{ } «enum»
	Message : message messageName •{ MessageBody } «enum»
	Message : message messageName •{ } «import»
	Message : message messageName •{ MessageBody } «import»
	Message : message messageName •{ } «message»
	Message : message messageName •{ MessageBody } «message»
	Message : message messageName •{ } «option»
	Message : message messageName •{ MessageBody } «option»
	Message : message messageName •{ } «package»
	Message : message messageName •{ MessageBody } «package»
	Message : message messageName •{ } «service»
	Message : message messageName •{ MessageBody } «service»
}
Transitions:
	{ -> 42


S30{
	Service : service serviceName •{ } «$»
	Service : service serviceName •{ ServiceBodies } «$»
	Service : service serviceName •{ } «emptyStatement»
	Service : service serviceName •{ ServiceBodies } «emptyStatement»
	Service : service serviceName •{ } «enum»
	Service : service serviceName •{ ServiceBodies } «enum»
	Service : service serviceName •{ } «import»
	Service : service serviceName •{ ServiceBodies } «import»
	Service : service serviceName •{ } «message»
	Service : service serviceName •{ ServiceBodies } «message»
	Service : service serviceName •{ } «option»
	Service : service serviceName •{ ServiceBodies } «option»
	Service : service serviceName •{ } «package»
	Service : service serviceName •{ ServiceBodies } «package»
	Service : service serviceName •{ } «service»
	Service : service serviceName •{ ServiceBodies } «service»
}
Transitions:
	{ -> 43


S31{
	Syntax : syntax = quote •proto3 quote ; «$»
	Syntax : syntax = quote •proto3 quote ; «emptyStatement»
	Syntax : syntax = quote •proto3 quote ; «enum»
	Syntax : syntax = quote •proto3 quote ; «import»
	Syntax : syntax = quote •proto3 quote ; «message»
	Syntax : syntax = quote •proto3 quote ; «option»
	Syntax : syntax = quote •proto3 quote ; «package»
	Syntax : syntax = quote •proto3 quote ; «service»
}
Transitions:
	proto3 -> 44


S32{
	Import : import weak String •; «$»
	Import : import weak String •; «emptyStatement»
	Import : import weak String •; «enum»
	Import : import weak String •; «import»
	Import : import weak String •; «message»
	Import : import weak String •; «option»
	Import : import weak String •; «package»
	Import : import weak String •; «service»
}
Transitions:
	; -> 45


S33{
	String : strLit• «;»
}
Transitions:


S34{
	Import : import public String •; «$»
	Import : import public String •; «emptyStatement»
	Import : import public String •; «enum»
	Import : import public String •; «import»
	Import : import public String •; «message»
	Import : import public String •; «option»
	Import : import public String •; «package»
	Import : import public String •; «service»
}
Transitions:
	; -> 46


S35{
	Package : package fullIdent ;• «$»
	Package : package fullIdent ;• «emptyStatement»
	Package : package fullIdent ;• «enum»
	Package : package fullIdent ;• «import»
	Package : package fullIdent ;• «message»
	Package : package fullIdent ;• «option»
	Package : package fullIdent ;• «package»
	Package : package fullIdent ;• «service»
}
Transitions:


S36{
	Option : option OptionName = •constant ; «$»
	Option : option OptionName = •constant ; «emptyStatement»
	Option : option OptionName = •constant ; «enum»
	Option : option OptionName = •constant ; «import»
	Option : option OptionName = •constant ; «message»
	Option : option OptionName = •constant ; «option»
	Option : option OptionName = •constant ; «package»
	Option : option OptionName = •constant ; «service»
}
Transitions:
	constant -> 47


S37{
	OptionName : ident DotRepeatedIdents• «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «.»
}
Transitions:
	. -> 48


S38{
	DotRepeatedIdents : . •ident «=»
	DotRepeatedIdents : . •ident «.»
}
Transitions:
	ident -> 49


S39{
	OptionName : ( fullIdent •) «=»
	OptionName : ( fullIdent •) DotRepeatedIdents «=»
}
Transitions:
	) -> 50


S40{
	EnumBody : { •} «$»
	EnumBody : { •Option } «$»
	EnumBody : { •EnumField } «$»
	EnumBody : { •emptyStatement } «$»
	EnumBody : { •} «emptyStatement»
	EnumBody : { •Option } «emptyStatement»
	EnumBody : { •EnumField } «emptyStatement»
	EnumBody : { •emptyStatement } «emptyStatement»
	EnumBody : { •} «enum»
	EnumBody : { •Option } «enum»
	EnumBody : { •EnumField } «enum»
	EnumBody : { •emptyStatement } «enum»
	EnumBody : { •} «import»
	EnumBody : { •Option } «import»
	EnumBody : { •EnumField } «import»
	EnumBody : { •emptyStatement } «import»
	EnumBody : { •} «message»
	EnumBody : { •Option } «message»
	EnumBody : { •EnumField } «message»
	EnumBody : { •emptyStatement } «message»
	EnumBody : { •} «option»
	EnumBody : { •Option } «option»
	EnumBody : { •EnumField } «option»
	EnumBody : { •emptyStatement } «option»
	EnumBody : { •} «package»
	EnumBody : { •Option } «package»
	EnumBody : { •EnumField } «package»
	EnumBody : { •emptyStatement } «package»
	EnumBody : { •} «service»
	EnumBody : { •Option } «service»
	EnumBody : { •EnumField } «service»
	EnumBody : { •emptyStatement } «service»
	Option : •option OptionName = constant ; «}»
	EnumField : •ident = intLit ; «}»
	EnumField : •ident = intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	Option -> 51
	emptyStatement -> 52
	option -> 53
	ident -> 54
	} -> 55
	EnumField -> 56


S41{
	Enum : enum enumName EnumBody• «$»
	Enum : enum enumName EnumBody• «emptyStatement»
	Enum : enum enumName EnumBody• «enum»
	Enum : enum enumName EnumBody• «import»
	Enum : enum enumName EnumBody• «message»
	Enum : enum enumName EnumBody• «option»
	Enum : enum enumName EnumBody• «package»
	Enum : enum enumName EnumBody• «service»
}
Transitions:


S42{
	Message : message messageName { •} «$»
	Message : message messageName { •MessageBody } «$»
	Message : message messageName { •} «emptyStatement»
	Message : message messageName { •MessageBody } «emptyStatement»
	Message : message messageName { •} «enum»
	Message : message messageName { •MessageBody } «enum»
	Message : message messageName { •} «import»
	Message : message messageName { •MessageBody } «import»
	Message : message messageName { •} «message»
	Message : message messageName { •MessageBody } «message»
	Message : message messageName { •} «option»
	Message : message messageName { •MessageBody } «option»
	Message : message messageName { •} «package»
	Message : message messageName { •MessageBody } «package»
	Message : message messageName { •} «service»
	Message : message messageName { •MessageBody } «service»
	MessageBody : •MessageContent «}»
	MessageBody : •MessageBody MessageContent «}»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageBody : •MessageContent «bool»
	MessageBody : •MessageContent «bytes»
	MessageBody : •MessageContent «double»
	MessageBody : •MessageContent «emptyStatement»
	MessageBody : •MessageContent «enum»
	MessageBody : •MessageContent «enumType»
	MessageBody : •MessageContent «fixed32»
	MessageBody : •MessageContent «fixed64»
	MessageBody : •MessageContent «float»
	MessageBody : •MessageContent «int32»
	MessageBody : •MessageContent «int64»
	MessageBody : •MessageContent «map»
	MessageBody : •MessageContent «message»
	MessageBody : •MessageContent «messageType»
	MessageBody : •MessageContent «oneof»
	MessageBody : •MessageContent «option»
	MessageBody : •MessageContent «repeated»
	MessageBody : •MessageContent «reserved»
	MessageBody : •MessageContent «sfixed32»
	MessageBody : •MessageContent «sfixed64»
	MessageBody : •MessageContent «sint32»
	MessageBody : •MessageContent «sint64»
	MessageBody : •MessageContent «string»
	MessageBody : •MessageContent «uint32»
	MessageBody : •MessageContent «uint64»
	MessageBody : •MessageBody MessageContent «bool»
	MessageBody : •MessageBody MessageContent «bytes»
	MessageBody : •MessageBody MessageContent «double»
	MessageBody : •MessageBody MessageContent «emptyStatement»
	MessageBody : •MessageBody MessageContent «enum»
	MessageBody : •MessageBody MessageContent «enumType»
	MessageBody : •MessageBody MessageContent «fixed32»
	MessageBody : •MessageBody MessageContent «fixed64»
	MessageBody : •MessageBody MessageContent «float»
	MessageBody : •MessageBody MessageContent «int32»
	MessageBody : •MessageBody MessageContent «int64»
	MessageBody : •MessageBody MessageContent «map»
	MessageBody : •MessageBody MessageContent «message»
	MessageBody : •MessageBody MessageContent «messageType»
	MessageBody : •MessageBody MessageContent «oneof»
	MessageBody : •MessageBody MessageContent «option»
	MessageBody : •MessageBody MessageContent «repeated»
	MessageBody : •MessageBody MessageContent «reserved»
	MessageBody : •MessageBody MessageContent «sfixed32»
	MessageBody : •MessageBody MessageContent «sfixed64»
	MessageBody : •MessageBody MessageContent «sint32»
	MessageBody : •MessageBody MessageContent «sint64»
	MessageBody : •MessageBody MessageContent «string»
	MessageBody : •MessageBody MessageContent «uint32»
	MessageBody : •MessageBody MessageContent «uint64»
	Field : •Type fieldName = FieldNumber ; «}»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type fieldName = FieldNumber ; «}»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum enumName EnumBody «}»
	Message : •message messageName { } «}»
	Message : •message messageName { MessageBody } «}»
	Option : •option OptionName = constant ; «}»
	Oneof : •oneof oneofName { } «}»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «enumType»
	MessageContent : •Enum «enumType»
	MessageContent : •Message «enumType»
	MessageContent : •Option «enumType»
	MessageContent : •Oneof «enumType»
	MessageContent : •MapField «enumType»
	MessageContent : •Reserved «enumType»
	MessageContent : •emptyStatement «enumType»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «messageType»
	MessageContent : •Enum «messageType»
	MessageContent : •Message «messageType»
	MessageContent : •Option «messageType»
	MessageContent : •Oneof «messageType»
	MessageContent : •MapField «messageType»
	MessageContent : •Reserved «messageType»
	MessageContent : •emptyStatement «messageType»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
	Field : •Type fieldName = FieldNumber ; «bool»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type fieldName = FieldNumber ; «bool»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum enumName EnumBody «bool»
	Message : •message messageName { } «bool»
	Message : •message messageName { MessageBody } «bool»
	Option : •option OptionName = constant ; «bool»
	Oneof : •oneof oneofName { } «bool»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type fieldName = FieldNumber ; «bytes»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type fieldName = FieldNumber ; «bytes»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum enumName EnumBody «bytes»
	Message : •message messageName { } «bytes»
	Message : •message messageName { MessageBody } «bytes»
	Option : •option OptionName = constant ; «bytes»
	Oneof : •oneof oneofName { } «bytes»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type fieldName = FieldNumber ; «double»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type fieldName = FieldNumber ; «double»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum enumName EnumBody «double»
	Message : •message messageName { } «double»
	Message : •message messageName { MessageBody } «double»
	Option : •option OptionName = constant ; «double»
	Oneof : •oneof oneofName { } «double»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type fieldName = FieldNumber ; «emptyStatement»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	Oneof : •oneof oneofName { } «emptyStatement»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type fieldName = FieldNumber ; «enum»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type fieldName = FieldNumber ; «enum»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum enumName EnumBody «enum»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Option : •option OptionName = constant ; «enum»
	Oneof : •oneof oneofName { } «enum»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type fieldName = FieldNumber ; «enumType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : •repeated Type fieldName = FieldNumber ; «enumType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Enum : •enum enumName EnumBody «enumType»
	Message : •message messageName { } «enumType»
	Message : •message messageName { MessageBody } «enumType»
	Option : •option OptionName = constant ; «enumType»
	Oneof : •oneof oneofName { } «enumType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	Reserved : •reserved Ranges ; «enumType»
	Reserved : •reserved FieldNames ; «enumType»
	Field : •Type fieldName = FieldNumber ; «fixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum enumName EnumBody «fixed32»
	Message : •message messageName { } «fixed32»
	Message : •message messageName { MessageBody } «fixed32»
	Option : •option OptionName = constant ; «fixed32»
	Oneof : •oneof oneofName { } «fixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type fieldName = FieldNumber ; «fixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum enumName EnumBody «fixed64»
	Message : •message messageName { } «fixed64»
	Message : •message messageName { MessageBody } «fixed64»
	Option : •option OptionName = constant ; «fixed64»
	Oneof : •oneof oneofName { } «fixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type fieldName = FieldNumber ; «float»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type fieldName = FieldNumber ; «float»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum enumName EnumBody «float»
	Message : •message messageName { } «float»
	Message : •message messageName { MessageBody } «float»
	Option : •option OptionName = constant ; «float»
	Oneof : •oneof oneofName { } «float»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type fieldName = FieldNumber ; «int32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type fieldName = FieldNumber ; «int32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum enumName EnumBody «int32»
	Message : •message messageName { } «int32»
	Message : •message messageName { MessageBody } «int32»
	Option : •option OptionName = constant ; «int32»
	Oneof : •oneof oneofName { } «int32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type fieldName = FieldNumber ; «int64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type fieldName = FieldNumber ; «int64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum enumName EnumBody «int64»
	Message : •message messageName { } «int64»
	Message : •message messageName { MessageBody } «int64»
	Option : •option OptionName = constant ; «int64»
	Oneof : •oneof oneofName { } «int64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type fieldName = FieldNumber ; «map»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type fieldName = FieldNumber ; «map»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum enumName EnumBody «map»
	Message : •message messageName { } «map»
	Message : •message messageName { MessageBody } «map»
	Option : •option OptionName = constant ; «map»
	Oneof : •oneof oneofName { } «map»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type fieldName = FieldNumber ; «message»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type fieldName = FieldNumber ; «message»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum enumName EnumBody «message»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Option : •option OptionName = constant ; «message»
	Oneof : •oneof oneofName { } «message»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type fieldName = FieldNumber ; «messageType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : •repeated Type fieldName = FieldNumber ; «messageType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Enum : •enum enumName EnumBody «messageType»
	Message : •message messageName { } «messageType»
	Message : •message messageName { MessageBody } «messageType»
	Option : •option OptionName = constant ; «messageType»
	Oneof : •oneof oneofName { } «messageType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	Reserved : •reserved Ranges ; «messageType»
	Reserved : •reserved FieldNames ; «messageType»
	Field : •Type fieldName = FieldNumber ; «oneof»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type fieldName = FieldNumber ; «oneof»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum enumName EnumBody «oneof»
	Message : •message messageName { } «oneof»
	Message : •message messageName { MessageBody } «oneof»
	Option : •option OptionName = constant ; «oneof»
	Oneof : •oneof oneofName { } «oneof»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type fieldName = FieldNumber ; «option»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type fieldName = FieldNumber ; «option»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum enumName EnumBody «option»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Option : •option OptionName = constant ; «option»
	Oneof : •oneof oneofName { } «option»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type fieldName = FieldNumber ; «repeated»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type fieldName = FieldNumber ; «repeated»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum enumName EnumBody «repeated»
	Message : •message messageName { } «repeated»
	Message : •message messageName { MessageBody } «repeated»
	Option : •option OptionName = constant ; «repeated»
	Oneof : •oneof oneofName { } «repeated»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type fieldName = FieldNumber ; «reserved»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type fieldName = FieldNumber ; «reserved»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum enumName EnumBody «reserved»
	Message : •message messageName { } «reserved»
	Message : •message messageName { MessageBody } «reserved»
	Option : •option OptionName = constant ; «reserved»
	Oneof : •oneof oneofName { } «reserved»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type fieldName = FieldNumber ; «sfixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum enumName EnumBody «sfixed32»
	Message : •message messageName { } «sfixed32»
	Message : •message messageName { MessageBody } «sfixed32»
	Option : •option OptionName = constant ; «sfixed32»
	Oneof : •oneof oneofName { } «sfixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type fieldName = FieldNumber ; «sfixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum enumName EnumBody «sfixed64»
	Message : •message messageName { } «sfixed64»
	Message : •message messageName { MessageBody } «sfixed64»
	Option : •option OptionName = constant ; «sfixed64»
	Oneof : •oneof oneofName { } «sfixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type fieldName = FieldNumber ; «sint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type fieldName = FieldNumber ; «sint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum enumName EnumBody «sint32»
	Message : •message messageName { } «sint32»
	Message : •message messageName { MessageBody } «sint32»
	Option : •option OptionName = constant ; «sint32»
	Oneof : •oneof oneofName { } «sint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type fieldName = FieldNumber ; «sint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type fieldName = FieldNumber ; «sint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum enumName EnumBody «sint64»
	Message : •message messageName { } «sint64»
	Message : •message messageName { MessageBody } «sint64»
	Option : •option OptionName = constant ; «sint64»
	Oneof : •oneof oneofName { } «sint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type fieldName = FieldNumber ; «string»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type fieldName = FieldNumber ; «string»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum enumName EnumBody «string»
	Message : •message messageName { } «string»
	Message : •message messageName { MessageBody } «string»
	Option : •option OptionName = constant ; «string»
	Oneof : •oneof oneofName { } «string»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type fieldName = FieldNumber ; «uint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type fieldName = FieldNumber ; «uint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum enumName EnumBody «uint32»
	Message : •message messageName { } «uint32»
	Message : •message messageName { MessageBody } «uint32»
	Option : •option OptionName = constant ; «uint32»
	Oneof : •oneof oneofName { } «uint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type fieldName = FieldNumber ; «uint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type fieldName = FieldNumber ; «uint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum enumName EnumBody «uint64»
	Message : •message messageName { } «uint64»
	Message : •message messageName { MessageBody } «uint64»
	Option : •option OptionName = constant ; «uint64»
	Oneof : •oneof oneofName { } «uint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
}
Transitions:
	Option -> 57
	emptyStatement -> 58
	option -> 59
	Message -> 60
	Enum -> 61
	Type -> 62
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Field -> 80
	repeated -> 81
	Oneof -> 82
	oneof -> 83
	} -> 84
	MapField -> 85
	map -> 86
	Reserved -> 87
	reserved -> 88
	enum -> 89
	message -> 90
	MessageBody -> 91
	MessageContent -> 92


S43{
	Service : service serviceName { •} «$»
	Service : service serviceName { •ServiceBodies } «$»
	Service : service serviceName { •} «emptyStatement»
	Service : service serviceName { •ServiceBodies } «emptyStatement»
	Service : service serviceName { •} «enum»
	Service : service serviceName { •ServiceBodies } «enum»
	Service : service serviceName { •} «import»
	Service : service serviceName { •ServiceBodies } «import»
	Service : service serviceName { •} «message»
	Service : service serviceName { •ServiceBodies } «message»
	Service : service serviceName { •} «option»
	Service : service serviceName { •ServiceBodies } «option»
	Service : service serviceName { •} «package»
	Service : service serviceName { •ServiceBodies } «package»
	Service : service serviceName { •} «service»
	Service : service serviceName { •ServiceBodies } «service»
	ServiceBodies : •ServiceBody «}»
	ServiceBodies : •ServiceBodies ServiceBody «}»
	ServiceBody : •Option «}»
	ServiceBody : •Rpc «}»
	ServiceBody : •emptyStatement «}»
	ServiceBodies : •ServiceBody «emptyStatement»
	ServiceBodies : •ServiceBody «option»
	ServiceBodies : •ServiceBody «rpc»
	ServiceBodies : •ServiceBodies ServiceBody «emptyStatement»
	ServiceBodies : •ServiceBodies ServiceBody «option»
	ServiceBodies : •ServiceBodies ServiceBody «rpc»
	Option : •option OptionName = constant ; «}»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «}»
	ServiceBody : •Option «emptyStatement»
	ServiceBody : •Rpc «emptyStatement»
	ServiceBody : •emptyStatement «emptyStatement»
	ServiceBody : •Option «option»
	ServiceBody : •Rpc «option»
	ServiceBody : •emptyStatement «option»
	ServiceBody : •Option «rpc»
	ServiceBody : •Rpc «rpc»
	ServiceBody : •emptyStatement «rpc»
	Option : •option OptionName = constant ; «emptyStatement»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Option : •option OptionName = constant ; «option»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «option»
	Option : •option OptionName = constant ; «rpc»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	Option -> 93
	emptyStatement -> 94
	option -> 95
	} -> 96
	ServiceBodies -> 97
	ServiceBody -> 98
	Rpc -> 99
	rpc -> 100


S44{
	Syntax : syntax = quote proto3 •quote ; «$»
	Syntax : syntax = quote proto3 •quote ; «emptyStatement»
	Syntax : syntax = quote proto3 •quote ; «enum»
	Syntax : syntax = quote proto3 •quote ; «import»
	Syntax : syntax = quote proto3 •quote ; «message»
	Syntax : syntax = quote proto3 •quote ; «option»
	Syntax : syntax = quote proto3 •quote ; «package»
	Syntax : syntax = quote proto3 •quote ; «service»
}
Transitions:
	quote -> 101


S45{
	Import : import weak String ;• «$»
	Import : import weak String ;• «emptyStatement»
	Import : import weak String ;• «enum»
	Import : import weak String ;• «import»
	Import : import weak String ;• «message»
	Import : import weak String ;• «option»
	Import : import weak String ;• «package»
	Import : import weak String ;• «service»
}
Transitions:


S46{
	Import : import public String ;• «$»
	Import : import public String ;• «emptyStatement»
	Import : import public String ;• «enum»
	Import : import public String ;• «import»
	Import : import public String ;• «message»
	Import : import public String ;• «option»
	Import : import public String ;• «package»
	Import : import public String ;• «service»
}
Transitions:


S47{
	Option : option OptionName = constant •; «$»
	Option : option OptionName = constant •; «emptyStatement»
	Option : option OptionName = constant •; «enum»
	Option : option OptionName = constant •; «import»
	Option : option OptionName = constant •; «message»
	Option : option OptionName = constant •; «option»
	Option : option OptionName = constant •; «package»
	Option : option OptionName = constant •; «service»
}
Transitions:
	; -> 102


S48{
	DotRepeatedIdents : DotRepeatedIdents . •ident «=»
	DotRepeatedIdents : DotRepeatedIdents . •ident «.»
}
Transitions:
	ident -> 103


S49{
	DotRepeatedIdents : . ident• «=»
	DotRepeatedIdents : . ident• «.»
}
Transitions:


S50{
	OptionName : ( fullIdent )• «=»
	OptionName : ( fullIdent ) •DotRepeatedIdents «=»
	DotRepeatedIdents : •. ident «=»
	DotRepeatedIdents : •DotRepeatedIdents . ident «=»
	DotRepeatedIdents : •. ident «.»
	DotRepeatedIdents : •DotRepeatedIdents . ident «.»
}
Transitions:
	. -> 38
	DotRepeatedIdents -> 104


S51{
	EnumBody : { Option •} «$»
	EnumBody : { Option •} «emptyStatement»
	EnumBody : { Option •} «enum»
	EnumBody : { Option •} «import»
	EnumBody : { Option •} «message»
	EnumBody : { Option •} «option»
	EnumBody : { Option •} «package»
	EnumBody : { Option •} «service»
}
Transitions:
	} -> 105


S52{
	EnumBody : { emptyStatement •} «$»
	EnumBody : { emptyStatement •} «emptyStatement»
	EnumBody : { emptyStatement •} «enum»
	EnumBody : { emptyStatement •} «import»
	EnumBody : { emptyStatement •} «message»
	EnumBody : { emptyStatement •} «option»
	EnumBody : { emptyStatement •} «package»
	EnumBody : { emptyStatement •} «service»
}
Transitions:
	} -> 106


S53{
	Option : option •OptionName = constant ; «}»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 107


S54{
	EnumField : ident •= intLit ; «}»
	EnumField : ident •= intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	= -> 108


S55{
	EnumBody : { }• «$»
	EnumBody : { }• «emptyStatement»
	EnumBody : { }• «enum»
	EnumBody : { }• «import»
	EnumBody : { }• «message»
	EnumBody : { }• «option»
	EnumBody : { }• «package»
	EnumBody : { }• «service»
}
Transitions:


S56{
	EnumBody : { EnumField •} «$»
	EnumBody : { EnumField •} «emptyStatement»
	EnumBody : { EnumField •} «enum»
	EnumBody : { EnumField •} «import»
	EnumBody : { EnumField •} «message»
	EnumBody : { EnumField •} «option»
	EnumBody : { EnumField •} «package»
	EnumBody : { EnumField •} «service»
}
Transitions:
	} -> 109


S57{
	MessageContent : Option• «}»
	MessageContent : Option• «bool»
	MessageContent : Option• «bytes»
	MessageContent : Option• «double»
	MessageContent : Option• «emptyStatement»
	MessageContent : Option• «enum»
	MessageContent : Option• «enumType»
	MessageContent : Option• «fixed32»
	MessageContent : Option• «fixed64»
	MessageContent : Option• «float»
	MessageContent : Option• «int32»
	MessageContent : Option• «int64»
	MessageContent : Option• «map»
	MessageContent : Option• «message»
	MessageContent : Option• «messageType»
	MessageContent : Option• «oneof»
	MessageContent : Option• «option»
	MessageContent : Option• «repeated»
	MessageContent : Option• «reserved»
	MessageContent : Option• «sfixed32»
	MessageContent : Option• «sfixed64»
	MessageContent : Option• «sint32»
	MessageContent : Option• «sint64»
	MessageContent : Option• «string»
	MessageContent : Option• «uint32»
	MessageContent : Option• «uint64»
}
Transitions:


S58{
	MessageContent : emptyStatement• «}»
	MessageContent : emptyStatement• «bool»
	MessageContent : emptyStatement• «bytes»
	MessageContent : emptyStatement• «double»
	MessageContent : emptyStatement• «emptyStatement»
	MessageContent : emptyStatement• «enum»
	MessageContent : emptyStatement• «enumType»
	MessageContent : emptyStatement• «fixed32»
	MessageContent : emptyStatement• «fixed64»
	MessageContent : emptyStatement• «float»
	MessageContent : emptyStatement• «int32»
	MessageContent : emptyStatement• «int64»
	MessageContent : emptyStatement• «map»
	MessageContent : emptyStatement• «message»
	MessageContent : emptyStatement• «messageType»
	MessageContent : emptyStatement• «oneof»
	MessageContent : emptyStatement• «option»
	MessageContent : emptyStatement• «repeated»
	MessageContent : emptyStatement• «reserved»
	MessageContent : emptyStatement• «sfixed32»
	MessageContent : emptyStatement• «sfixed64»
	MessageContent : emptyStatement• «sint32»
	MessageContent : emptyStatement• «sint64»
	MessageContent : emptyStatement• «string»
	MessageContent : emptyStatement• «uint32»
	MessageContent : emptyStatement• «uint64»
}
Transitions:


S59{
	Option : option •OptionName = constant ; «}»
	Option : option •OptionName = constant ; «bool»
	Option : option •OptionName = constant ; «bytes»
	Option : option •OptionName = constant ; «double»
	Option : option •OptionName = constant ; «emptyStatement»
	Option : option •OptionName = constant ; «enum»
	Option : option •OptionName = constant ; «enumType»
	Option : option •OptionName = constant ; «fixed32»
	Option : option •OptionName = constant ; «fixed64»
	Option : option •OptionName = constant ; «float»
	Option : option •OptionName = constant ; «int32»
	Option : option •OptionName = constant ; «int64»
	Option : option •OptionName = constant ; «map»
	Option : option •OptionName = constant ; «message»
	Option : option •OptionName = constant ; «messageType»
	Option : option •OptionName = constant ; «oneof»
	Option : option •OptionName = constant ; «option»
	Option : option •OptionName = constant ; «repeated»
	Option : option •OptionName = constant ; «reserved»
	Option : option •OptionName = constant ; «sfixed32»
	Option : option •OptionName = constant ; «sfixed64»
	Option : option •OptionName = constant ; «sint32»
	Option : option •OptionName = constant ; «sint64»
	Option : option •OptionName = constant ; «string»
	Option : option •OptionName = constant ; «uint32»
	Option : option •OptionName = constant ; «uint64»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 110


S60{
	MessageContent : Message• «}»
	MessageContent : Message• «bool»
	MessageContent : Message• «bytes»
	MessageContent : Message• «double»
	MessageContent : Message• «emptyStatement»
	MessageContent : Message• «enum»
	MessageContent : Message• «enumType»
	MessageContent : Message• «fixed32»
	MessageContent : Message• «fixed64»
	MessageContent : Message• «float»
	MessageContent : Message• «int32»
	MessageContent : Message• «int64»
	MessageContent : Message• «map»
	MessageContent : Message• «message»
	MessageContent : Message• «messageType»
	MessageContent : Message• «oneof»
	MessageContent : Message• «option»
	MessageContent : Message• «repeated»
	MessageContent : Message• «reserved»
	MessageContent : Message• «sfixed32»
	MessageContent : Message• «sfixed64»
	MessageContent : Message• «sint32»
	MessageContent : Message• «sint64»
	MessageContent : Message• «string»
	MessageContent : Message• «uint32»
	MessageContent : Message• «uint64»
}
Transitions:


S61{
	MessageContent : Enum• «}»
	MessageContent : Enum• «bool»
	MessageContent : Enum• «bytes»
	MessageContent : Enum• «double»
	MessageContent : Enum• «emptyStatement»
	MessageContent : Enum• «enum»
	MessageContent : Enum• «enumType»
	MessageContent : Enum• «fixed32»
	MessageContent : Enum• «fixed64»
	MessageContent : Enum• «float»
	MessageContent : Enum• «int32»
	MessageContent : Enum• «int64»
	MessageContent : Enum• «map»
	MessageContent : Enum• «message»
	MessageContent : Enum• «messageType»
	MessageContent : Enum• «oneof»
	MessageContent : Enum• «option»
	MessageContent : Enum• «repeated»
	MessageContent : Enum• «reserved»
	MessageContent : Enum• «sfixed32»
	MessageContent : Enum• «sfixed64»
	MessageContent : Enum• «sint32»
	MessageContent : Enum• «sint64»
	MessageContent : Enum• «string»
	MessageContent : Enum• «uint32»
	MessageContent : Enum• «uint64»
}
Transitions:


S62{
	Field : Type •fieldName = FieldNumber ; «}»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : Type •fieldName = FieldNumber ; «bool»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : Type •fieldName = FieldNumber ; «bytes»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type •fieldName = FieldNumber ; «double»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : Type •fieldName = FieldNumber ; «emptyStatement»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type •fieldName = FieldNumber ; «enum»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : Type •fieldName = FieldNumber ; «enumType»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : Type •fieldName = FieldNumber ; «fixed32»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type •fieldName = FieldNumber ; «fixed64»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type •fieldName = FieldNumber ; «float»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : Type •fieldName = FieldNumber ; «int32»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : Type •fieldName = FieldNumber ; «int64»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : Type •fieldName = FieldNumber ; «map»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : Type •fieldName = FieldNumber ; «message»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : Type •fieldName = FieldNumber ; «messageType»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : Type •fieldName = FieldNumber ; «oneof»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type •fieldName = FieldNumber ; «option»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : Type •fieldName = FieldNumber ; «repeated»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type •fieldName = FieldNumber ; «reserved»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type •fieldName = FieldNumber ; «sfixed32»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type •fieldName = FieldNumber ; «sfixed64»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type •fieldName = FieldNumber ; «sint32»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type •fieldName = FieldNumber ; «sint64»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type •fieldName = FieldNumber ; «string»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : Type •fieldName = FieldNumber ; «uint32»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type •fieldName = FieldNumber ; «uint64»
	Field : Type •fieldName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	fieldName -> 111


S63{
	Type : double• «fieldName»
}
Transitions:


S64{
	Type : float• «fieldName»
}
Transitions:


S65{
	Type : int32• «fieldName»
}
Transitions:


S66{
	Type : int64• «fieldName»
}
Transitions:


S67{
	Type : uint32• «fieldName»
}
Transitions:


S68{
	Type : uint64• «fieldName»
}
Transitions:


S69{
	Type : sint32• «fieldName»
}
Transitions:


S70{
	Type : sint64• «fieldName»
}
Transitions:


S71{
	Type : fixed32• «fieldName»
}
Transitions:


S72{
	Type : fixed64• «fieldName»
}
Transitions:


S73{
	Type : sfixed32• «fieldName»
}
Transitions:


S74{
	Type : sfixed64• «fieldName»
}
Transitions:


S75{
	Type : bool• «fieldName»
}
Transitions:


S76{
	Type : string• «fieldName»
}
Transitions:


S77{
	Type : bytes• «fieldName»
}
Transitions:


S78{
	Type : messageType• «fieldName»
}
Transitions:


S79{
	Type : enumType• «fieldName»
}
Transitions:


S80{
	MessageContent : Field• «}»
	MessageContent : Field• «bool»
	MessageContent : Field• «bytes»
	MessageContent : Field• «double»
	MessageContent : Field• «emptyStatement»
	MessageContent : Field• «enum»
	MessageContent : Field• «enumType»
	MessageContent : Field• «fixed32»
	MessageContent : Field• «fixed64»
	MessageContent : Field• «float»
	MessageContent : Field• «int32»
	MessageContent : Field• «int64»
	MessageContent : Field• «map»
	MessageContent : Field• «message»
	MessageContent : Field• «messageType»
	MessageContent : Field• «oneof»
	MessageContent : Field• «option»
	MessageContent : Field• «repeated»
	MessageContent : Field• «reserved»
	MessageContent : Field• «sfixed32»
	MessageContent : Field• «sfixed64»
	MessageContent : Field• «sint32»
	MessageContent : Field• «sint64»
	MessageContent : Field• «string»
	MessageContent : Field• «uint32»
	MessageContent : Field• «uint64»
}
Transitions:


S81{
	Field : repeated •Type fieldName = FieldNumber ; «}»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : repeated •Type fieldName = FieldNumber ; «bool»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated •Type fieldName = FieldNumber ; «bytes»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated •Type fieldName = FieldNumber ; «double»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : repeated •Type fieldName = FieldNumber ; «emptyStatement»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated •Type fieldName = FieldNumber ; «enum»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated •Type fieldName = FieldNumber ; «enumType»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : repeated •Type fieldName = FieldNumber ; «fixed32»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated •Type fieldName = FieldNumber ; «fixed64»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated •Type fieldName = FieldNumber ; «float»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : repeated •Type fieldName = FieldNumber ; «int32»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated •Type fieldName = FieldNumber ; «int64»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated •Type fieldName = FieldNumber ; «map»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : repeated •Type fieldName = FieldNumber ; «message»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : repeated •Type fieldName = FieldNumber ; «messageType»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : repeated •Type fieldName = FieldNumber ; «oneof»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated •Type fieldName = FieldNumber ; «option»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : repeated •Type fieldName = FieldNumber ; «repeated»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated •Type fieldName = FieldNumber ; «reserved»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated •Type fieldName = FieldNumber ; «sfixed32»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated •Type fieldName = FieldNumber ; «sfixed64»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated •Type fieldName = FieldNumber ; «sint32»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated •Type fieldName = FieldNumber ; «sint64»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated •Type fieldName = FieldNumber ; «string»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : repeated •Type fieldName = FieldNumber ; «uint32»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated •Type fieldName = FieldNumber ; «uint64»
	Field : repeated •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
}
Transitions:
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Type -> 112


S82{
	MessageContent : Oneof• «}»
	MessageContent : Oneof• «bool»
	MessageContent : Oneof• «bytes»
	MessageContent : Oneof• «double»
	MessageContent : Oneof• «emptyStatement»
	MessageContent : Oneof• «enum»
	MessageContent : Oneof• «enumType»
	MessageContent : Oneof• «fixed32»
	MessageContent : Oneof• «fixed64»
	MessageContent : Oneof• «float»
	MessageContent : Oneof• «int32»
	MessageContent : Oneof• «int64»
	MessageContent : Oneof• «map»
	MessageContent : Oneof• «message»
	MessageContent : Oneof• «messageType»
	MessageContent : Oneof• «oneof»
	MessageContent : Oneof• «option»
	MessageContent : Oneof• «repeated»
	MessageContent : Oneof• «reserved»
	MessageContent : Oneof• «sfixed32»
	MessageContent : Oneof• «sfixed64»
	MessageContent : Oneof• «sint32»
	MessageContent : Oneof• «sint64»
	MessageContent : Oneof• «string»
	MessageContent : Oneof• «uint32»
	MessageContent : Oneof• «uint64»
}
Transitions:


S83{
	Oneof : oneof •oneofName { } «}»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof •oneofName { } «bool»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof •oneofName { } «bytes»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof •oneofName { } «double»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof •oneofName { } «emptyStatement»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof •oneofName { } «enum»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof •oneofName { } «enumType»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «enumType»
	Oneof : oneof •oneofName { } «fixed32»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof •oneofName { } «fixed64»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof •oneofName { } «float»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof •oneofName { } «int32»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof •oneofName { } «int64»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof •oneofName { } «map»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof •oneofName { } «message»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof •oneofName { } «messageType»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «messageType»
	Oneof : oneof •oneofName { } «oneof»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof •oneofName { } «option»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof •oneofName { } «repeated»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof •oneofName { } «reserved»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof •oneofName { } «sfixed32»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof •oneofName { } «sfixed64»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof •oneofName { } «sint32»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof •oneofName { } «sint64»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof •oneofName { } «string»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof •oneofName { } «uint32»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof •oneofName { } «uint64»
	Oneof : oneof •oneofName { RepeatedOneOfFieldOrEmpty } «uint64»
}
Transitions:
	oneofName -> 113


S84{
	Message : message messageName { }• «$»
	Message : message messageName { }• «emptyStatement»
	Message : message messageName { }• «enum»
	Message : message messageName { }• «import»
	Message : message messageName { }• «message»
	Message : message messageName { }• «option»
	Message : message messageName { }• «package»
	Message : message messageName { }• «service»
}
Transitions:


S85{
	MessageContent : MapField• «}»
	MessageContent : MapField• «bool»
	MessageContent : MapField• «bytes»
	MessageContent : MapField• «double»
	MessageContent : MapField• «emptyStatement»
	MessageContent : MapField• «enum»
	MessageContent : MapField• «enumType»
	MessageContent : MapField• «fixed32»
	MessageContent : MapField• «fixed64»
	MessageContent : MapField• «float»
	MessageContent : MapField• «int32»
	MessageContent : MapField• «int64»
	MessageContent : MapField• «map»
	MessageContent : MapField• «message»
	MessageContent : MapField• «messageType»
	MessageContent : MapField• «oneof»
	MessageContent : MapField• «option»
	MessageContent : MapField• «repeated»
	MessageContent : MapField• «reserved»
	MessageContent : MapField• «sfixed32»
	MessageContent : MapField• «sfixed64»
	MessageContent : MapField• «sint32»
	MessageContent : MapField• «sint64»
	MessageContent : MapField• «string»
	MessageContent : MapField• «uint32»
	MessageContent : MapField• «uint64»
}
Transitions:


S86{
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «}»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «double»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «float»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «map»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «message»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «option»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «string»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map •< KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : map •< KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	< -> 114


S87{
	MessageContent : Reserved• «}»
	MessageContent : Reserved• «bool»
	MessageContent : Reserved• «bytes»
	MessageContent : Reserved• «double»
	MessageContent : Reserved• «emptyStatement»
	MessageContent : Reserved• «enum»
	MessageContent : Reserved• «enumType»
	MessageContent : Reserved• «fixed32»
	MessageContent : Reserved• «fixed64»
	MessageContent : Reserved• «float»
	MessageContent : Reserved• «int32»
	MessageContent : Reserved• «int64»
	MessageContent : Reserved• «map»
	MessageContent : Reserved• «message»
	MessageContent : Reserved• «messageType»
	MessageContent : Reserved• «oneof»
	MessageContent : Reserved• «option»
	MessageContent : Reserved• «repeated»
	MessageContent : Reserved• «reserved»
	MessageContent : Reserved• «sfixed32»
	MessageContent : Reserved• «sfixed64»
	MessageContent : Reserved• «sint32»
	MessageContent : Reserved• «sint64»
	MessageContent : Reserved• «string»
	MessageContent : Reserved• «uint32»
	MessageContent : Reserved• «uint64»
}
Transitions:


S88{
	Reserved : reserved •Ranges ; «}»
	Reserved : reserved •FieldNames ; «}»
	Reserved : reserved •Ranges ; «bool»
	Reserved : reserved •FieldNames ; «bool»
	Reserved : reserved •Ranges ; «bytes»
	Reserved : reserved •FieldNames ; «bytes»
	Reserved : reserved •Ranges ; «double»
	Reserved : reserved •FieldNames ; «double»
	Reserved : reserved •Ranges ; «emptyStatement»
	Reserved : reserved •FieldNames ; «emptyStatement»
	Reserved : reserved •Ranges ; «enum»
	Reserved : reserved •FieldNames ; «enum»
	Reserved : reserved •Ranges ; «enumType»
	Reserved : reserved •FieldNames ; «enumType»
	Reserved : reserved •Ranges ; «fixed32»
	Reserved : reserved •FieldNames ; «fixed32»
	Reserved : reserved •Ranges ; «fixed64»
	Reserved : reserved •FieldNames ; «fixed64»
	Reserved : reserved •Ranges ; «float»
	Reserved : reserved •FieldNames ; «float»
	Reserved : reserved •Ranges ; «int32»
	Reserved : reserved •FieldNames ; «int32»
	Reserved : reserved •Ranges ; «int64»
	Reserved : reserved •FieldNames ; «int64»
	Reserved : reserved •Ranges ; «map»
	Reserved : reserved •FieldNames ; «map»
	Reserved : reserved •Ranges ; «message»
	Reserved : reserved •FieldNames ; «message»
	Reserved : reserved •Ranges ; «messageType»
	Reserved : reserved •FieldNames ; «messageType»
	Reserved : reserved •Ranges ; «oneof»
	Reserved : reserved •FieldNames ; «oneof»
	Reserved : reserved •Ranges ; «option»
	Reserved : reserved •FieldNames ; «option»
	Reserved : reserved •Ranges ; «repeated»
	Reserved : reserved •FieldNames ; «repeated»
	Reserved : reserved •Ranges ; «reserved»
	Reserved : reserved •FieldNames ; «reserved»
	Reserved : reserved •Ranges ; «sfixed32»
	Reserved : reserved •FieldNames ; «sfixed32»
	Reserved : reserved •Ranges ; «sfixed64»
	Reserved : reserved •FieldNames ; «sfixed64»
	Reserved : reserved •Ranges ; «sint32»
	Reserved : reserved •FieldNames ; «sint32»
	Reserved : reserved •Ranges ; «sint64»
	Reserved : reserved •FieldNames ; «sint64»
	Reserved : reserved •Ranges ; «string»
	Reserved : reserved •FieldNames ; «string»
	Reserved : reserved •Ranges ; «uint32»
	Reserved : reserved •FieldNames ; «uint32»
	Reserved : reserved •Ranges ; «uint64»
	Reserved : reserved •FieldNames ; «uint64»
	Ranges : •Range «;»
	Ranges : •Ranges , Range «;»
	FieldNames : •fieldName «;»
	FieldNames : •FieldNames , fieldName «;»
	Range : •intLit «;»
	Range : •intLit to intLit «;»
	Range : •intLit to max «;»
	Ranges : •Range «,»
	Ranges : •Ranges , Range «,»
	FieldNames : •fieldName «,»
	FieldNames : •FieldNames , fieldName «,»
	Range : •intLit «,»
	Range : •intLit to intLit «,»
	Range : •intLit to max «,»
}
Transitions:
	intLit -> 115
	fieldName -> 116
	Ranges -> 117
	FieldNames -> 118
	Range -> 119


S89{
	Enum : enum •enumName EnumBody «}»
	Enum : enum •enumName EnumBody «bool»
	Enum : enum •enumName EnumBody «bytes»
	Enum : enum •enumName EnumBody «double»
	Enum : enum •enumName EnumBody «emptyStatement»
	Enum : enum •enumName EnumBody «enum»
	Enum : enum •enumName EnumBody «enumType»
	Enum : enum •enumName EnumBody «fixed32»
	Enum : enum •enumName EnumBody «fixed64»
	Enum : enum •enumName EnumBody «float»
	Enum : enum •enumName EnumBody «int32»
	Enum : enum •enumName EnumBody «int64»
	Enum : enum •enumName EnumBody «map»
	Enum : enum •enumName EnumBody «message»
	Enum : enum •enumName EnumBody «messageType»
	Enum : enum •enumName EnumBody «oneof»
	Enum : enum •enumName EnumBody «option»
	Enum : enum •enumName EnumBody «repeated»
	Enum : enum •enumName EnumBody «reserved»
	Enum : enum •enumName EnumBody «sfixed32»
	Enum : enum •enumName EnumBody «sfixed64»
	Enum : enum •enumName EnumBody «sint32»
	Enum : enum •enumName EnumBody «sint64»
	Enum : enum •enumName EnumBody «string»
	Enum : enum •enumName EnumBody «uint32»
	Enum : enum •enumName EnumBody «uint64»
}
Transitions:
	enumName -> 120


S90{
	Message : message •messageName { } «}»
	Message : message •messageName { MessageBody } «}»
	Message : message •messageName { } «bool»
	Message : message •messageName { MessageBody } «bool»
	Message : message •messageName { } «bytes»
	Message : message •messageName { MessageBody } «bytes»
	Message : message •messageName { } «double»
	Message : message •messageName { MessageBody } «double»
	Message : message •messageName { } «emptyStatement»
	Message : message •messageName { MessageBody } «emptyStatement»
	Message : message •messageName { } «enum»
	Message : message •messageName { MessageBody } «enum»
	Message : message •messageName { } «enumType»
	Message : message •messageName { MessageBody } «enumType»
	Message : message •messageName { } «fixed32»
	Message : message •messageName { MessageBody } «fixed32»
	Message : message •messageName { } «fixed64»
	Message : message •messageName { MessageBody } «fixed64»
	Message : message •messageName { } «float»
	Message : message •messageName { MessageBody } «float»
	Message : message •messageName { } «int32»
	Message : message •messageName { MessageBody } «int32»
	Message : message •messageName { } «int64»
	Message : message •messageName { MessageBody } «int64»
	Message : message •messageName { } «map»
	Message : message •messageName { MessageBody } «map»
	Message : message •messageName { } «message»
	Message : message •messageName { MessageBody } «message»
	Message : message •messageName { } «messageType»
	Message : message •messageName { MessageBody } «messageType»
	Message : message •messageName { } «oneof»
	Message : message •messageName { MessageBody } «oneof»
	Message : message •messageName { } «option»
	Message : message •messageName { MessageBody } «option»
	Message : message •messageName { } «repeated»
	Message : message •messageName { MessageBody } «repeated»
	Message : message •messageName { } «reserved»
	Message : message •messageName { MessageBody } «reserved»
	Message : message •messageName { } «sfixed32»
	Message : message •messageName { MessageBody } «sfixed32»
	Message : message •messageName { } «sfixed64»
	Message : message •messageName { MessageBody } «sfixed64»
	Message : message •messageName { } «sint32»
	Message : message •messageName { MessageBody } «sint32»
	Message : message •messageName { } «sint64»
	Message : message •messageName { MessageBody } «sint64»
	Message : message •messageName { } «string»
	Message : message •messageName { MessageBody } «string»
	Message : message •messageName { } «uint32»
	Message : message •messageName { MessageBody } «uint32»
	Message : message •messageName { } «uint64»
	Message : message •messageName { MessageBody } «uint64»
}
Transitions:
	messageName -> 121


S91{
	Message : message messageName { MessageBody •} «$»
	Message : message messageName { MessageBody •} «emptyStatement»
	Message : message messageName { MessageBody •} «enum»
	Message : message messageName { MessageBody •} «import»
	Message : message messageName { MessageBody •} «message»
	Message : message messageName { MessageBody •} «option»
	Message : message messageName { MessageBody •} «package»
	Message : message messageName { MessageBody •} «service»
	MessageBody : MessageBody •MessageContent «}»
	MessageBody : MessageBody •MessageContent «bool»
	MessageBody : MessageBody •MessageContent «bytes»
	MessageBody : MessageBody •MessageContent «double»
	MessageBody : MessageBody •MessageContent «emptyStatement»
	MessageBody : MessageBody •MessageContent «enum»
	MessageBody : MessageBody •MessageContent «enumType»
	MessageBody : MessageBody •MessageContent «fixed32»
	MessageBody : MessageBody •MessageContent «fixed64»
	MessageBody : MessageBody •MessageContent «float»
	MessageBody : MessageBody •MessageContent «int32»
	MessageBody : MessageBody •MessageContent «int64»
	MessageBody : MessageBody •MessageContent «map»
	MessageBody : MessageBody •MessageContent «message»
	MessageBody : MessageBody •MessageContent «messageType»
	MessageBody : MessageBody •MessageContent «oneof»
	MessageBody : MessageBody •MessageContent «option»
	MessageBody : MessageBody •MessageContent «repeated»
	MessageBody : MessageBody •MessageContent «reserved»
	MessageBody : MessageBody •MessageContent «sfixed32»
	MessageBody : MessageBody •MessageContent «sfixed64»
	MessageBody : MessageBody •MessageContent «sint32»
	MessageBody : MessageBody •MessageContent «sint64»
	MessageBody : MessageBody •MessageContent «string»
	MessageBody : MessageBody •MessageContent «uint32»
	MessageBody : MessageBody •MessageContent «uint64»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «enumType»
	MessageContent : •Enum «enumType»
	MessageContent : •Message «enumType»
	MessageContent : •Option «enumType»
	MessageContent : •Oneof «enumType»
	MessageContent : •MapField «enumType»
	MessageContent : •Reserved «enumType»
	MessageContent : •emptyStatement «enumType»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «messageType»
	MessageContent : •Enum «messageType»
	MessageContent : •Message «messageType»
	MessageContent : •Option «messageType»
	MessageContent : •Oneof «messageType»
	MessageContent : •MapField «messageType»
	MessageContent : •Reserved «messageType»
	MessageContent : •emptyStatement «messageType»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Field : •Type fieldName = FieldNumber ; «}»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type fieldName = FieldNumber ; «}»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum enumName EnumBody «}»
	Message : •message messageName { } «}»
	Message : •message messageName { MessageBody } «}»
	Option : •option OptionName = constant ; «}»
	Oneof : •oneof oneofName { } «}»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	Field : •Type fieldName = FieldNumber ; «bool»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type fieldName = FieldNumber ; «bool»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum enumName EnumBody «bool»
	Message : •message messageName { } «bool»
	Message : •message messageName { MessageBody } «bool»
	Option : •option OptionName = constant ; «bool»
	Oneof : •oneof oneofName { } «bool»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type fieldName = FieldNumber ; «bytes»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type fieldName = FieldNumber ; «bytes»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum enumName EnumBody «bytes»
	Message : •message messageName { } «bytes»
	Message : •message messageName { MessageBody } «bytes»
	Option : •option OptionName = constant ; «bytes»
	Oneof : •oneof oneofName { } «bytes»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type fieldName = FieldNumber ; «double»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type fieldName = FieldNumber ; «double»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum enumName EnumBody «double»
	Message : •message messageName { } «double»
	Message : •message messageName { MessageBody } «double»
	Option : •option OptionName = constant ; «double»
	Oneof : •oneof oneofName { } «double»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type fieldName = FieldNumber ; «emptyStatement»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	Oneof : •oneof oneofName { } «emptyStatement»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type fieldName = FieldNumber ; «enum»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type fieldName = FieldNumber ; «enum»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum enumName EnumBody «enum»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Option : •option OptionName = constant ; «enum»
	Oneof : •oneof oneofName { } «enum»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type fieldName = FieldNumber ; «enumType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : •repeated Type fieldName = FieldNumber ; «enumType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Enum : •enum enumName EnumBody «enumType»
	Message : •message messageName { } «enumType»
	Message : •message messageName { MessageBody } «enumType»
	Option : •option OptionName = constant ; «enumType»
	Oneof : •oneof oneofName { } «enumType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	Reserved : •reserved Ranges ; «enumType»
	Reserved : •reserved FieldNames ; «enumType»
	Field : •Type fieldName = FieldNumber ; «fixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum enumName EnumBody «fixed32»
	Message : •message messageName { } «fixed32»
	Message : •message messageName { MessageBody } «fixed32»
	Option : •option OptionName = constant ; «fixed32»
	Oneof : •oneof oneofName { } «fixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type fieldName = FieldNumber ; «fixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum enumName EnumBody «fixed64»
	Message : •message messageName { } «fixed64»
	Message : •message messageName { MessageBody } «fixed64»
	Option : •option OptionName = constant ; «fixed64»
	Oneof : •oneof oneofName { } «fixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type fieldName = FieldNumber ; «float»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type fieldName = FieldNumber ; «float»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum enumName EnumBody «float»
	Message : •message messageName { } «float»
	Message : •message messageName { MessageBody } «float»
	Option : •option OptionName = constant ; «float»
	Oneof : •oneof oneofName { } «float»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type fieldName = FieldNumber ; «int32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type fieldName = FieldNumber ; «int32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum enumName EnumBody «int32»
	Message : •message messageName { } «int32»
	Message : •message messageName { MessageBody } «int32»
	Option : •option OptionName = constant ; «int32»
	Oneof : •oneof oneofName { } «int32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type fieldName = FieldNumber ; «int64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type fieldName = FieldNumber ; «int64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum enumName EnumBody «int64»
	Message : •message messageName { } «int64»
	Message : •message messageName { MessageBody } «int64»
	Option : •option OptionName = constant ; «int64»
	Oneof : •oneof oneofName { } «int64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type fieldName = FieldNumber ; «map»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type fieldName = FieldNumber ; «map»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum enumName EnumBody «map»
	Message : •message messageName { } «map»
	Message : •message messageName { MessageBody } «map»
	Option : •option OptionName = constant ; «map»
	Oneof : •oneof oneofName { } «map»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type fieldName = FieldNumber ; «message»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type fieldName = FieldNumber ; «message»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum enumName EnumBody «message»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Option : •option OptionName = constant ; «message»
	Oneof : •oneof oneofName { } «message»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type fieldName = FieldNumber ; «messageType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : •repeated Type fieldName = FieldNumber ; «messageType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Enum : •enum enumName EnumBody «messageType»
	Message : •message messageName { } «messageType»
	Message : •message messageName { MessageBody } «messageType»
	Option : •option OptionName = constant ; «messageType»
	Oneof : •oneof oneofName { } «messageType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	Reserved : •reserved Ranges ; «messageType»
	Reserved : •reserved FieldNames ; «messageType»
	Field : •Type fieldName = FieldNumber ; «oneof»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type fieldName = FieldNumber ; «oneof»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum enumName EnumBody «oneof»
	Message : •message messageName { } «oneof»
	Message : •message messageName { MessageBody } «oneof»
	Option : •option OptionName = constant ; «oneof»
	Oneof : •oneof oneofName { } «oneof»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type fieldName = FieldNumber ; «option»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type fieldName = FieldNumber ; «option»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum enumName EnumBody «option»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Option : •option OptionName = constant ; «option»
	Oneof : •oneof oneofName { } «option»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type fieldName = FieldNumber ; «repeated»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type fieldName = FieldNumber ; «repeated»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum enumName EnumBody «repeated»
	Message : •message messageName { } «repeated»
	Message : •message messageName { MessageBody } «repeated»
	Option : •option OptionName = constant ; «repeated»
	Oneof : •oneof oneofName { } «repeated»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type fieldName = FieldNumber ; «reserved»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type fieldName = FieldNumber ; «reserved»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum enumName EnumBody «reserved»
	Message : •message messageName { } «reserved»
	Message : •message messageName { MessageBody } «reserved»
	Option : •option OptionName = constant ; «reserved»
	Oneof : •oneof oneofName { } «reserved»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type fieldName = FieldNumber ; «sfixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum enumName EnumBody «sfixed32»
	Message : •message messageName { } «sfixed32»
	Message : •message messageName { MessageBody } «sfixed32»
	Option : •option OptionName = constant ; «sfixed32»
	Oneof : •oneof oneofName { } «sfixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type fieldName = FieldNumber ; «sfixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum enumName EnumBody «sfixed64»
	Message : •message messageName { } «sfixed64»
	Message : •message messageName { MessageBody } «sfixed64»
	Option : •option OptionName = constant ; «sfixed64»
	Oneof : •oneof oneofName { } «sfixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type fieldName = FieldNumber ; «sint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type fieldName = FieldNumber ; «sint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum enumName EnumBody «sint32»
	Message : •message messageName { } «sint32»
	Message : •message messageName { MessageBody } «sint32»
	Option : •option OptionName = constant ; «sint32»
	Oneof : •oneof oneofName { } «sint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type fieldName = FieldNumber ; «sint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type fieldName = FieldNumber ; «sint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum enumName EnumBody «sint64»
	Message : •message messageName { } «sint64»
	Message : •message messageName { MessageBody } «sint64»
	Option : •option OptionName = constant ; «sint64»
	Oneof : •oneof oneofName { } «sint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type fieldName = FieldNumber ; «string»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type fieldName = FieldNumber ; «string»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum enumName EnumBody «string»
	Message : •message messageName { } «string»
	Message : •message messageName { MessageBody } «string»
	Option : •option OptionName = constant ; «string»
	Oneof : •oneof oneofName { } «string»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type fieldName = FieldNumber ; «uint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type fieldName = FieldNumber ; «uint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum enumName EnumBody «uint32»
	Message : •message messageName { } «uint32»
	Message : •message messageName { MessageBody } «uint32»
	Option : •option OptionName = constant ; «uint32»
	Oneof : •oneof oneofName { } «uint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type fieldName = FieldNumber ; «uint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type fieldName = FieldNumber ; «uint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum enumName EnumBody «uint64»
	Message : •message messageName { } «uint64»
	Message : •message messageName { MessageBody } «uint64»
	Option : •option OptionName = constant ; «uint64»
	Oneof : •oneof oneofName { } «uint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
}
Transitions:
	Option -> 57
	emptyStatement -> 58
	option -> 59
	Message -> 60
	Enum -> 61
	Type -> 62
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Field -> 80
	repeated -> 81
	Oneof -> 82
	oneof -> 83
	MapField -> 85
	map -> 86
	Reserved -> 87
	reserved -> 88
	enum -> 89
	message -> 90
	} -> 122
	MessageContent -> 123


S92{
	MessageBody : MessageContent• «}»
	MessageBody : MessageContent• «bool»
	MessageBody : MessageContent• «bytes»
	MessageBody : MessageContent• «double»
	MessageBody : MessageContent• «emptyStatement»
	MessageBody : MessageContent• «enum»
	MessageBody : MessageContent• «enumType»
	MessageBody : MessageContent• «fixed32»
	MessageBody : MessageContent• «fixed64»
	MessageBody : MessageContent• «float»
	MessageBody : MessageContent• «int32»
	MessageBody : MessageContent• «int64»
	MessageBody : MessageContent• «map»
	MessageBody : MessageContent• «message»
	MessageBody : MessageContent• «messageType»
	MessageBody : MessageContent• «oneof»
	MessageBody : MessageContent• «option»
	MessageBody : MessageContent• «repeated»
	MessageBody : MessageContent• «reserved»
	MessageBody : MessageContent• «sfixed32»
	MessageBody : MessageContent• «sfixed64»
	MessageBody : MessageContent• «sint32»
	MessageBody : MessageContent• «sint64»
	MessageBody : MessageContent• «string»
	MessageBody : MessageContent• «uint32»
	MessageBody : MessageContent• «uint64»
}
Transitions:


S93{
	ServiceBody : Option• «}»
	ServiceBody : Option• «emptyStatement»
	ServiceBody : Option• «option»
	ServiceBody : Option• «rpc»
}
Transitions:


S94{
	ServiceBody : emptyStatement• «}»
	ServiceBody : emptyStatement• «emptyStatement»
	ServiceBody : emptyStatement• «option»
	ServiceBody : emptyStatement• «rpc»
}
Transitions:


S95{
	Option : option •OptionName = constant ; «}»
	Option : option •OptionName = constant ; «emptyStatement»
	Option : option •OptionName = constant ; «option»
	Option : option •OptionName = constant ; «rpc»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 124


S96{
	Service : service serviceName { }• «$»
	Service : service serviceName { }• «emptyStatement»
	Service : service serviceName { }• «enum»
	Service : service serviceName { }• «import»
	Service : service serviceName { }• «message»
	Service : service serviceName { }• «option»
	Service : service serviceName { }• «package»
	Service : service serviceName { }• «service»
}
Transitions:


S97{
	Service : service serviceName { ServiceBodies •} «$»
	Service : service serviceName { ServiceBodies •} «emptyStatement»
	Service : service serviceName { ServiceBodies •} «enum»
	Service : service serviceName { ServiceBodies •} «import»
	Service : service serviceName { ServiceBodies •} «message»
	Service : service serviceName { ServiceBodies •} «option»
	Service : service serviceName { ServiceBodies •} «package»
	Service : service serviceName { ServiceBodies •} «service»
	ServiceBodies : ServiceBodies •ServiceBody «}»
	ServiceBodies : ServiceBodies •ServiceBody «emptyStatement»
	ServiceBodies : ServiceBodies •ServiceBody «option»
	ServiceBodies : ServiceBodies •ServiceBody «rpc»
	ServiceBody : •Option «}»
	ServiceBody : •Rpc «}»
	ServiceBody : •emptyStatement «}»
	ServiceBody : •Option «emptyStatement»
	ServiceBody : •Rpc «emptyStatement»
	ServiceBody : •emptyStatement «emptyStatement»
	ServiceBody : •Option «option»
	ServiceBody : •Rpc «option»
	ServiceBody : •emptyStatement «option»
	ServiceBody : •Option «rpc»
	ServiceBody : •Rpc «rpc»
	ServiceBody : •emptyStatement «rpc»
	Option : •option OptionName = constant ; «}»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «}»
	Option : •option OptionName = constant ; «emptyStatement»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Option : •option OptionName = constant ; «option»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «option»
	Option : •option OptionName = constant ; «rpc»
	Rpc : •rpc rpcName ( messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies «rpc»
	Rpc : •rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	Option -> 93
	emptyStatement -> 94
	option -> 95
	Rpc -> 99
	rpc -> 100
	} -> 125
	ServiceBody -> 126


S98{
	ServiceBodies : ServiceBody• «}»
	ServiceBodies : ServiceBody• «emptyStatement»
	ServiceBodies : ServiceBody• «option»
	ServiceBodies : ServiceBody• «rpc»
}
Transitions:


S99{
	ServiceBody : Rpc• «}»
	ServiceBody : Rpc• «emptyStatement»
	ServiceBody : Rpc• «option»
	ServiceBody : Rpc• «rpc»
}
Transitions:


S100{
	Rpc : rpc •rpcName ( messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc •rpcName ( stream messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc •rpcName ( messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc •rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc •rpcName ( messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc •rpcName ( stream messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc •rpcName ( messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc •rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc •rpcName ( messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc •rpcName ( stream messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc •rpcName ( messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc •rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc •rpcName ( messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc •rpcName ( stream messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc •rpcName ( messageType ) returns ( stream messageType ) RpcBodies «rpc»
	Rpc : rpc •rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	rpcName -> 127


S101{
	Syntax : syntax = quote proto3 quote •; «$»
	Syntax : syntax = quote proto3 quote •; «emptyStatement»
	Syntax : syntax = quote proto3 quote •; «enum»
	Syntax : syntax = quote proto3 quote •; «import»
	Syntax : syntax = quote proto3 quote •; «message»
	Syntax : syntax = quote proto3 quote •; «option»
	Syntax : syntax = quote proto3 quote •; «package»
	Syntax : syntax = quote proto3 quote •; «service»
}
Transitions:
	; -> 128


S102{
	Option : option OptionName = constant ;• «$»
	Option : option OptionName = constant ;• «emptyStatement»
	Option : option OptionName = constant ;• «enum»
	Option : option OptionName = constant ;• «import»
	Option : option OptionName = constant ;• «message»
	Option : option OptionName = constant ;• «option»
	Option : option OptionName = constant ;• «package»
	Option : option OptionName = constant ;• «service»
}
Transitions:


S103{
	DotRepeatedIdents : DotRepeatedIdents . ident• «=»
	DotRepeatedIdents : DotRepeatedIdents . ident• «.»
}
Transitions:


S104{
	OptionName : ( fullIdent ) DotRepeatedIdents• «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «.»
}
Transitions:
	. -> 48


S105{
	EnumBody : { Option }• «$»
	EnumBody : { Option }• «emptyStatement»
	EnumBody : { Option }• «enum»
	EnumBody : { Option }• «import»
	EnumBody : { Option }• «message»
	EnumBody : { Option }• «option»
	EnumBody : { Option }• «package»
	EnumBody : { Option }• «service»
}
Transitions:


S106{
	EnumBody : { emptyStatement }• «$»
	EnumBody : { emptyStatement }• «emptyStatement»
	EnumBody : { emptyStatement }• «enum»
	EnumBody : { emptyStatement }• «import»
	EnumBody : { emptyStatement }• «message»
	EnumBody : { emptyStatement }• «option»
	EnumBody : { emptyStatement }• «package»
	EnumBody : { emptyStatement }• «service»
}
Transitions:


S107{
	Option : option OptionName •= constant ; «}»
}
Transitions:
	= -> 129


S108{
	EnumField : ident = •intLit ; «}»
	EnumField : ident = •intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	intLit -> 130


S109{
	EnumBody : { EnumField }• «$»
	EnumBody : { EnumField }• «emptyStatement»
	EnumBody : { EnumField }• «enum»
	EnumBody : { EnumField }• «import»
	EnumBody : { EnumField }• «message»
	EnumBody : { EnumField }• «option»
	EnumBody : { EnumField }• «package»
	EnumBody : { EnumField }• «service»
}
Transitions:


S110{
	Option : option OptionName •= constant ; «}»
	Option : option OptionName •= constant ; «bool»
	Option : option OptionName •= constant ; «bytes»
	Option : option OptionName •= constant ; «double»
	Option : option OptionName •= constant ; «emptyStatement»
	Option : option OptionName •= constant ; «enum»
	Option : option OptionName •= constant ; «enumType»
	Option : option OptionName •= constant ; «fixed32»
	Option : option OptionName •= constant ; «fixed64»
	Option : option OptionName •= constant ; «float»
	Option : option OptionName •= constant ; «int32»
	Option : option OptionName •= constant ; «int64»
	Option : option OptionName •= constant ; «map»
	Option : option OptionName •= constant ; «message»
	Option : option OptionName •= constant ; «messageType»
	Option : option OptionName •= constant ; «oneof»
	Option : option OptionName •= constant ; «option»
	Option : option OptionName •= constant ; «repeated»
	Option : option OptionName •= constant ; «reserved»
	Option : option OptionName •= constant ; «sfixed32»
	Option : option OptionName •= constant ; «sfixed64»
	Option : option OptionName •= constant ; «sint32»
	Option : option OptionName •= constant ; «sint64»
	Option : option OptionName •= constant ; «string»
	Option : option OptionName •= constant ; «uint32»
	Option : option OptionName •= constant ; «uint64»
}
Transitions:
	= -> 131


S111{
	Field : Type fieldName •= FieldNumber ; «}»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «}»
	Field : Type fieldName •= FieldNumber ; «bool»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «bool»
	Field : Type fieldName •= FieldNumber ; «bytes»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type fieldName •= FieldNumber ; «double»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «double»
	Field : Type fieldName •= FieldNumber ; «emptyStatement»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type fieldName •= FieldNumber ; «enum»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «enum»
	Field : Type fieldName •= FieldNumber ; «enumType»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «enumType»
	Field : Type fieldName •= FieldNumber ; «fixed32»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type fieldName •= FieldNumber ; «fixed64»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type fieldName •= FieldNumber ; «float»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «float»
	Field : Type fieldName •= FieldNumber ; «int32»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «int32»
	Field : Type fieldName •= FieldNumber ; «int64»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «int64»
	Field : Type fieldName •= FieldNumber ; «map»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «map»
	Field : Type fieldName •= FieldNumber ; «message»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «message»
	Field : Type fieldName •= FieldNumber ; «messageType»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «messageType»
	Field : Type fieldName •= FieldNumber ; «oneof»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type fieldName •= FieldNumber ; «option»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «option»
	Field : Type fieldName •= FieldNumber ; «repeated»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type fieldName •= FieldNumber ; «reserved»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type fieldName •= FieldNumber ; «sfixed32»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type fieldName •= FieldNumber ; «sfixed64»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type fieldName •= FieldNumber ; «sint32»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type fieldName •= FieldNumber ; «sint64»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type fieldName •= FieldNumber ; «string»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «string»
	Field : Type fieldName •= FieldNumber ; «uint32»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type fieldName •= FieldNumber ; «uint64»
	Field : Type fieldName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 132


S112{
	Field : repeated Type •fieldName = FieldNumber ; «}»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type •fieldName = FieldNumber ; «bool»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type •fieldName = FieldNumber ; «bytes»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type •fieldName = FieldNumber ; «double»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type •fieldName = FieldNumber ; «emptyStatement»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type •fieldName = FieldNumber ; «enum»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type •fieldName = FieldNumber ; «enumType»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : repeated Type •fieldName = FieldNumber ; «fixed32»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type •fieldName = FieldNumber ; «fixed64»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type •fieldName = FieldNumber ; «float»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type •fieldName = FieldNumber ; «int32»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type •fieldName = FieldNumber ; «int64»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type •fieldName = FieldNumber ; «map»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type •fieldName = FieldNumber ; «message»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type •fieldName = FieldNumber ; «messageType»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : repeated Type •fieldName = FieldNumber ; «oneof»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type •fieldName = FieldNumber ; «option»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type •fieldName = FieldNumber ; «repeated»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type •fieldName = FieldNumber ; «reserved»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type •fieldName = FieldNumber ; «sfixed32»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type •fieldName = FieldNumber ; «sfixed64»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type •fieldName = FieldNumber ; «sint32»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type •fieldName = FieldNumber ; «sint64»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type •fieldName = FieldNumber ; «string»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type •fieldName = FieldNumber ; «uint32»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type •fieldName = FieldNumber ; «uint64»
	Field : repeated Type •fieldName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	fieldName -> 133


S113{
	Oneof : oneof oneofName •{ } «}»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof oneofName •{ } «bool»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof oneofName •{ } «bytes»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof oneofName •{ } «double»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof oneofName •{ } «emptyStatement»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof oneofName •{ } «enum»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof oneofName •{ } «enumType»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «enumType»
	Oneof : oneof oneofName •{ } «fixed32»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof oneofName •{ } «fixed64»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof oneofName •{ } «float»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof oneofName •{ } «int32»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof oneofName •{ } «int64»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof oneofName •{ } «map»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof oneofName •{ } «message»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof oneofName •{ } «messageType»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «messageType»
	Oneof : oneof oneofName •{ } «oneof»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof oneofName •{ } «option»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof oneofName •{ } «repeated»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof oneofName •{ } «reserved»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof oneofName •{ } «sfixed32»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof oneofName •{ } «sfixed64»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof oneofName •{ } «sint32»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof oneofName •{ } «sint64»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof oneofName •{ } «string»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof oneofName •{ } «uint32»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof oneofName •{ } «uint64»
	Oneof : oneof oneofName •{ RepeatedOneOfFieldOrEmpty } «uint64»
}
Transitions:
	{ -> 134


S114{
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «}»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «double»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «float»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «map»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «message»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «option»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «string»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < •KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : map < •KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	KeyType : •int32 «,»
	KeyType : •int64 «,»
	KeyType : •uint32 «,»
	KeyType : •uint64 «,»
	KeyType : •sint32 «,»
	KeyType : •sint64 «,»
	KeyType : •fixed32 «,»
	KeyType : •fixed64 «,»
	KeyType : •sfixed32 «,»
	KeyType : •sfixed64 «,»
	KeyType : •bool «,»
	KeyType : •string «,»
}
Transitions:
	int32 -> 135
	int64 -> 136
	uint32 -> 137
	uint64 -> 138
	sint32 -> 139
	sint64 -> 140
	fixed32 -> 141
	fixed64 -> 142
	sfixed32 -> 143
	sfixed64 -> 144
	bool -> 145
	string -> 146
	KeyType -> 147


S115{
	Range : intLit• «;»
	Range : intLit •to intLit «;»
	Range : intLit •to max «;»
	Range : intLit• «,»
	Range : intLit •to intLit «,»
	Range : intLit •to max «,»
}
Transitions:
	to -> 148


S116{
	FieldNames : fieldName• «;»
	FieldNames : fieldName• «,»
}
Transitions:


S117{
	Reserved : reserved Ranges •; «}»
	Reserved : reserved Ranges •; «bool»
	Reserved : reserved Ranges •; «bytes»
	Reserved : reserved Ranges •; «double»
	Reserved : reserved Ranges •; «emptyStatement»
	Reserved : reserved Ranges •; «enum»
	Reserved : reserved Ranges •; «enumType»
	Reserved : reserved Ranges •; «fixed32»
	Reserved : reserved Ranges •; «fixed64»
	Reserved : reserved Ranges •; «float»
	Reserved : reserved Ranges •; «int32»
	Reserved : reserved Ranges •; «int64»
	Reserved : reserved Ranges •; «map»
	Reserved : reserved Ranges •; «message»
	Reserved : reserved Ranges •; «messageType»
	Reserved : reserved Ranges •; «oneof»
	Reserved : reserved Ranges •; «option»
	Reserved : reserved Ranges •; «repeated»
	Reserved : reserved Ranges •; «reserved»
	Reserved : reserved Ranges •; «sfixed32»
	Reserved : reserved Ranges •; «sfixed64»
	Reserved : reserved Ranges •; «sint32»
	Reserved : reserved Ranges •; «sint64»
	Reserved : reserved Ranges •; «string»
	Reserved : reserved Ranges •; «uint32»
	Reserved : reserved Ranges •; «uint64»
	Ranges : Ranges •, Range «;»
	Ranges : Ranges •, Range «,»
}
Transitions:
	; -> 149
	, -> 150


S118{
	Reserved : reserved FieldNames •; «}»
	Reserved : reserved FieldNames •; «bool»
	Reserved : reserved FieldNames •; «bytes»
	Reserved : reserved FieldNames •; «double»
	Reserved : reserved FieldNames •; «emptyStatement»
	Reserved : reserved FieldNames •; «enum»
	Reserved : reserved FieldNames •; «enumType»
	Reserved : reserved FieldNames •; «fixed32»
	Reserved : reserved FieldNames •; «fixed64»
	Reserved : reserved FieldNames •; «float»
	Reserved : reserved FieldNames •; «int32»
	Reserved : reserved FieldNames •; «int64»
	Reserved : reserved FieldNames •; «map»
	Reserved : reserved FieldNames •; «message»
	Reserved : reserved FieldNames •; «messageType»
	Reserved : reserved FieldNames •; «oneof»
	Reserved : reserved FieldNames •; «option»
	Reserved : reserved FieldNames •; «repeated»
	Reserved : reserved FieldNames •; «reserved»
	Reserved : reserved FieldNames •; «sfixed32»
	Reserved : reserved FieldNames •; «sfixed64»
	Reserved : reserved FieldNames •; «sint32»
	Reserved : reserved FieldNames •; «sint64»
	Reserved : reserved FieldNames •; «string»
	Reserved : reserved FieldNames •; «uint32»
	Reserved : reserved FieldNames •; «uint64»
	FieldNames : FieldNames •, fieldName «;»
	FieldNames : FieldNames •, fieldName «,»
}
Transitions:
	; -> 151
	, -> 152


S119{
	Ranges : Range• «;»
	Ranges : Range• «,»
}
Transitions:


S120{
	Enum : enum enumName •EnumBody «}»
	Enum : enum enumName •EnumBody «bool»
	Enum : enum enumName •EnumBody «bytes»
	Enum : enum enumName •EnumBody «double»
	Enum : enum enumName •EnumBody «emptyStatement»
	Enum : enum enumName •EnumBody «enum»
	Enum : enum enumName •EnumBody «enumType»
	Enum : enum enumName •EnumBody «fixed32»
	Enum : enum enumName •EnumBody «fixed64»
	Enum : enum enumName •EnumBody «float»
	Enum : enum enumName •EnumBody «int32»
	Enum : enum enumName •EnumBody «int64»
	Enum : enum enumName •EnumBody «map»
	Enum : enum enumName •EnumBody «message»
	Enum : enum enumName •EnumBody «messageType»
	Enum : enum enumName •EnumBody «oneof»
	Enum : enum enumName •EnumBody «option»
	Enum : enum enumName •EnumBody «repeated»
	Enum : enum enumName •EnumBody «reserved»
	Enum : enum enumName •EnumBody «sfixed32»
	Enum : enum enumName •EnumBody «sfixed64»
	Enum : enum enumName •EnumBody «sint32»
	Enum : enum enumName •EnumBody «sint64»
	Enum : enum enumName •EnumBody «string»
	Enum : enum enumName •EnumBody «uint32»
	Enum : enum enumName •EnumBody «uint64»
	EnumBody : •{ } «}»
	EnumBody : •{ Option } «}»
	EnumBody : •{ EnumField } «}»
	EnumBody : •{ emptyStatement } «}»
	EnumBody : •{ } «bool»
	EnumBody : •{ Option } «bool»
	EnumBody : •{ EnumField } «bool»
	EnumBody : •{ emptyStatement } «bool»
	EnumBody : •{ } «bytes»
	EnumBody : •{ Option } «bytes»
	EnumBody : •{ EnumField } «bytes»
	EnumBody : •{ emptyStatement } «bytes»
	EnumBody : •{ } «double»
	EnumBody : •{ Option } «double»
	EnumBody : •{ EnumField } «double»
	EnumBody : •{ emptyStatement } «double»
	EnumBody : •{ } «emptyStatement»
	EnumBody : •{ Option } «emptyStatement»
	EnumBody : •{ EnumField } «emptyStatement»
	EnumBody : •{ emptyStatement } «emptyStatement»
	EnumBody : •{ } «enum»
	EnumBody : •{ Option } «enum»
	EnumBody : •{ EnumField } «enum»
	EnumBody : •{ emptyStatement } «enum»
	EnumBody : •{ } «enumType»
	EnumBody : •{ Option } «enumType»
	EnumBody : •{ EnumField } «enumType»
	EnumBody : •{ emptyStatement } «enumType»
	EnumBody : •{ } «fixed32»
	EnumBody : •{ Option } «fixed32»
	EnumBody : •{ EnumField } «fixed32»
	EnumBody : •{ emptyStatement } «fixed32»
	EnumBody : •{ } «fixed64»
	EnumBody : •{ Option } «fixed64»
	EnumBody : •{ EnumField } «fixed64»
	EnumBody : •{ emptyStatement } «fixed64»
	EnumBody : •{ } «float»
	EnumBody : •{ Option } «float»
	EnumBody : •{ EnumField } «float»
	EnumBody : •{ emptyStatement } «float»
	EnumBody : •{ } «int32»
	EnumBody : •{ Option } «int32»
	EnumBody : •{ EnumField } «int32»
	EnumBody : •{ emptyStatement } «int32»
	EnumBody : •{ } «int64»
	EnumBody : •{ Option } «int64»
	EnumBody : •{ EnumField } «int64»
	EnumBody : •{ emptyStatement } «int64»
	EnumBody : •{ } «map»
	EnumBody : •{ Option } «map»
	EnumBody : •{ EnumField } «map»
	EnumBody : •{ emptyStatement } «map»
	EnumBody : •{ } «message»
	EnumBody : •{ Option } «message»
	EnumBody : •{ EnumField } «message»
	EnumBody : •{ emptyStatement } «message»
	EnumBody : •{ } «messageType»
	EnumBody : •{ Option } «messageType»
	EnumBody : •{ EnumField } «messageType»
	EnumBody : •{ emptyStatement } «messageType»
	EnumBody : •{ } «oneof»
	EnumBody : •{ Option } «oneof»
	EnumBody : •{ EnumField } «oneof»
	EnumBody : •{ emptyStatement } «oneof»
	EnumBody : •{ } «option»
	EnumBody : •{ Option } «option»
	EnumBody : •{ EnumField } «option»
	EnumBody : •{ emptyStatement } «option»
	EnumBody : •{ } «repeated»
	EnumBody : •{ Option } «repeated»
	EnumBody : •{ EnumField } «repeated»
	EnumBody : •{ emptyStatement } «repeated»
	EnumBody : •{ } «reserved»
	EnumBody : •{ Option } «reserved»
	EnumBody : •{ EnumField } «reserved»
	EnumBody : •{ emptyStatement } «reserved»
	EnumBody : •{ } «sfixed32»
	EnumBody : •{ Option } «sfixed32»
	EnumBody : •{ EnumField } «sfixed32»
	EnumBody : •{ emptyStatement } «sfixed32»
	EnumBody : •{ } «sfixed64»
	EnumBody : •{ Option } «sfixed64»
	EnumBody : •{ EnumField } «sfixed64»
	EnumBody : •{ emptyStatement } «sfixed64»
	EnumBody : •{ } «sint32»
	EnumBody : •{ Option } «sint32»
	EnumBody : •{ EnumField } «sint32»
	EnumBody : •{ emptyStatement } «sint32»
	EnumBody : •{ } «sint64»
	EnumBody : •{ Option } «sint64»
	EnumBody : •{ EnumField } «sint64»
	EnumBody : •{ emptyStatement } «sint64»
	EnumBody : •{ } «string»
	EnumBody : •{ Option } «string»
	EnumBody : •{ EnumField } «string»
	EnumBody : •{ emptyStatement } «string»
	EnumBody : •{ } «uint32»
	EnumBody : •{ Option } «uint32»
	EnumBody : •{ EnumField } «uint32»
	EnumBody : •{ emptyStatement } «uint32»
	EnumBody : •{ } «uint64»
	EnumBody : •{ Option } «uint64»
	EnumBody : •{ EnumField } «uint64»
	EnumBody : •{ emptyStatement } «uint64»
}
Transitions:
	{ -> 153
	EnumBody -> 154


S121{
	Message : message messageName •{ } «}»
	Message : message messageName •{ MessageBody } «}»
	Message : message messageName •{ } «bool»
	Message : message messageName •{ MessageBody } «bool»
	Message : message messageName •{ } «bytes»
	Message : message messageName •{ MessageBody } «bytes»
	Message : message messageName •{ } «double»
	Message : message messageName •{ MessageBody } «double»
	Message : message messageName •{ } «emptyStatement»
	Message : message messageName •{ MessageBody } «emptyStatement»
	Message : message messageName •{ } «enum»
	Message : message messageName •{ MessageBody } «enum»
	Message : message messageName •{ } «enumType»
	Message : message messageName •{ MessageBody } «enumType»
	Message : message messageName •{ } «fixed32»
	Message : message messageName •{ MessageBody } «fixed32»
	Message : message messageName •{ } «fixed64»
	Message : message messageName •{ MessageBody } «fixed64»
	Message : message messageName •{ } «float»
	Message : message messageName •{ MessageBody } «float»
	Message : message messageName •{ } «int32»
	Message : message messageName •{ MessageBody } «int32»
	Message : message messageName •{ } «int64»
	Message : message messageName •{ MessageBody } «int64»
	Message : message messageName •{ } «map»
	Message : message messageName •{ MessageBody } «map»
	Message : message messageName •{ } «message»
	Message : message messageName •{ MessageBody } «message»
	Message : message messageName •{ } «messageType»
	Message : message messageName •{ MessageBody } «messageType»
	Message : message messageName •{ } «oneof»
	Message : message messageName •{ MessageBody } «oneof»
	Message : message messageName •{ } «option»
	Message : message messageName •{ MessageBody } «option»
	Message : message messageName •{ } «repeated»
	Message : message messageName •{ MessageBody } «repeated»
	Message : message messageName •{ } «reserved»
	Message : message messageName •{ MessageBody } «reserved»
	Message : message messageName •{ } «sfixed32»
	Message : message messageName •{ MessageBody } «sfixed32»
	Message : message messageName •{ } «sfixed64»
	Message : message messageName •{ MessageBody } «sfixed64»
	Message : message messageName •{ } «sint32»
	Message : message messageName •{ MessageBody } «sint32»
	Message : message messageName •{ } «sint64»
	Message : message messageName •{ MessageBody } «sint64»
	Message : message messageName •{ } «string»
	Message : message messageName •{ MessageBody } «string»
	Message : message messageName •{ } «uint32»
	Message : message messageName •{ MessageBody } «uint32»
	Message : message messageName •{ } «uint64»
	Message : message messageName •{ MessageBody } «uint64»
}
Transitions:
	{ -> 155


S122{
	Message : message messageName { MessageBody }• «$»
	Message : message messageName { MessageBody }• «emptyStatement»
	Message : message messageName { MessageBody }• «enum»
	Message : message messageName { MessageBody }• «import»
	Message : message messageName { MessageBody }• «message»
	Message : message messageName { MessageBody }• «option»
	Message : message messageName { MessageBody }• «package»
	Message : message messageName { MessageBody }• «service»
}
Transitions:


S123{
	MessageBody : MessageBody MessageContent• «}»
	MessageBody : MessageBody MessageContent• «bool»
	MessageBody : MessageBody MessageContent• «bytes»
	MessageBody : MessageBody MessageContent• «double»
	MessageBody : MessageBody MessageContent• «emptyStatement»
	MessageBody : MessageBody MessageContent• «enum»
	MessageBody : MessageBody MessageContent• «enumType»
	MessageBody : MessageBody MessageContent• «fixed32»
	MessageBody : MessageBody MessageContent• «fixed64»
	MessageBody : MessageBody MessageContent• «float»
	MessageBody : MessageBody MessageContent• «int32»
	MessageBody : MessageBody MessageContent• «int64»
	MessageBody : MessageBody MessageContent• «map»
	MessageBody : MessageBody MessageContent• «message»
	MessageBody : MessageBody MessageContent• «messageType»
	MessageBody : MessageBody MessageContent• «oneof»
	MessageBody : MessageBody MessageContent• «option»
	MessageBody : MessageBody MessageContent• «repeated»
	MessageBody : MessageBody MessageContent• «reserved»
	MessageBody : MessageBody MessageContent• «sfixed32»
	MessageBody : MessageBody MessageContent• «sfixed64»
	MessageBody : MessageBody MessageContent• «sint32»
	MessageBody : MessageBody MessageContent• «sint64»
	MessageBody : MessageBody MessageContent• «string»
	MessageBody : MessageBody MessageContent• «uint32»
	MessageBody : MessageBody MessageContent• «uint64»
}
Transitions:


S124{
	Option : option OptionName •= constant ; «}»
	Option : option OptionName •= constant ; «emptyStatement»
	Option : option OptionName •= constant ; «option»
	Option : option OptionName •= constant ; «rpc»
}
Transitions:
	= -> 156


S125{
	Service : service serviceName { ServiceBodies }• «$»
	Service : service serviceName { ServiceBodies }• «emptyStatement»
	Service : service serviceName { ServiceBodies }• «enum»
	Service : service serviceName { ServiceBodies }• «import»
	Service : service serviceName { ServiceBodies }• «message»
	Service : service serviceName { ServiceBodies }• «option»
	Service : service serviceName { ServiceBodies }• «package»
	Service : service serviceName { ServiceBodies }• «service»
}
Transitions:


S126{
	ServiceBodies : ServiceBodies ServiceBody• «}»
	ServiceBodies : ServiceBodies ServiceBody• «emptyStatement»
	ServiceBodies : ServiceBodies ServiceBody• «option»
	ServiceBodies : ServiceBodies ServiceBody• «rpc»
}
Transitions:


S127{
	Rpc : rpc rpcName •( messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName •( stream messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName •( messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName •( stream messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName •( messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName •( stream messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName •( messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName •( stream messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName •( messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName •( stream messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName •( messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName •( stream messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName •( messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName •( stream messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName •( messageType ) returns ( stream messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName •( stream messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	( -> 157


S128{
	Syntax : syntax = quote proto3 quote ;• «$»
	Syntax : syntax = quote proto3 quote ;• «emptyStatement»
	Syntax : syntax = quote proto3 quote ;• «enum»
	Syntax : syntax = quote proto3 quote ;• «import»
	Syntax : syntax = quote proto3 quote ;• «message»
	Syntax : syntax = quote proto3 quote ;• «option»
	Syntax : syntax = quote proto3 quote ;• «package»
	Syntax : syntax = quote proto3 quote ;• «service»
}
Transitions:


S129{
	Option : option OptionName = •constant ; «}»
}
Transitions:
	constant -> 158


S130{
	EnumField : ident = intLit •; «}»
	EnumField : ident = intLit •[ EnumValueOptions ] ; «}»
}
Transitions:
	; -> 159
	[ -> 160


S131{
	Option : option OptionName = •constant ; «}»
	Option : option OptionName = •constant ; «bool»
	Option : option OptionName = •constant ; «bytes»
	Option : option OptionName = •constant ; «double»
	Option : option OptionName = •constant ; «emptyStatement»
	Option : option OptionName = •constant ; «enum»
	Option : option OptionName = •constant ; «enumType»
	Option : option OptionName = •constant ; «fixed32»
	Option : option OptionName = •constant ; «fixed64»
	Option : option OptionName = •constant ; «float»
	Option : option OptionName = •constant ; «int32»
	Option : option OptionName = •constant ; «int64»
	Option : option OptionName = •constant ; «map»
	Option : option OptionName = •constant ; «message»
	Option : option OptionName = •constant ; «messageType»
	Option : option OptionName = •constant ; «oneof»
	Option : option OptionName = •constant ; «option»
	Option : option OptionName = •constant ; «repeated»
	Option : option OptionName = •constant ; «reserved»
	Option : option OptionName = •constant ; «sfixed32»
	Option : option OptionName = •constant ; «sfixed64»
	Option : option OptionName = •constant ; «sint32»
	Option : option OptionName = •constant ; «sint64»
	Option : option OptionName = •constant ; «string»
	Option : option OptionName = •constant ; «uint32»
	Option : option OptionName = •constant ; «uint64»
}
Transitions:
	constant -> 161


S132{
	Field : Type fieldName = •FieldNumber ; «}»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «}»
	Field : Type fieldName = •FieldNumber ; «bool»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «bool»
	Field : Type fieldName = •FieldNumber ; «bytes»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type fieldName = •FieldNumber ; «double»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «double»
	Field : Type fieldName = •FieldNumber ; «emptyStatement»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type fieldName = •FieldNumber ; «enum»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «enum»
	Field : Type fieldName = •FieldNumber ; «enumType»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «enumType»
	Field : Type fieldName = •FieldNumber ; «fixed32»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type fieldName = •FieldNumber ; «fixed64»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type fieldName = •FieldNumber ; «float»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «float»
	Field : Type fieldName = •FieldNumber ; «int32»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «int32»
	Field : Type fieldName = •FieldNumber ; «int64»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «int64»
	Field : Type fieldName = •FieldNumber ; «map»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «map»
	Field : Type fieldName = •FieldNumber ; «message»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «message»
	Field : Type fieldName = •FieldNumber ; «messageType»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «messageType»
	Field : Type fieldName = •FieldNumber ; «oneof»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type fieldName = •FieldNumber ; «option»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «option»
	Field : Type fieldName = •FieldNumber ; «repeated»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type fieldName = •FieldNumber ; «reserved»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type fieldName = •FieldNumber ; «sfixed32»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type fieldName = •FieldNumber ; «sfixed64»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type fieldName = •FieldNumber ; «sint32»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type fieldName = •FieldNumber ; «sint64»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type fieldName = •FieldNumber ; «string»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «string»
	Field : Type fieldName = •FieldNumber ; «uint32»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type fieldName = •FieldNumber ; «uint64»
	Field : Type fieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	FieldNumber -> 162
	intLit -> 163


S133{
	Field : repeated Type fieldName •= FieldNumber ; «}»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type fieldName •= FieldNumber ; «bool»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type fieldName •= FieldNumber ; «bytes»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type fieldName •= FieldNumber ; «double»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type fieldName •= FieldNumber ; «emptyStatement»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type fieldName •= FieldNumber ; «enum»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type fieldName •= FieldNumber ; «enumType»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «enumType»
	Field : repeated Type fieldName •= FieldNumber ; «fixed32»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type fieldName •= FieldNumber ; «fixed64»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type fieldName •= FieldNumber ; «float»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type fieldName •= FieldNumber ; «int32»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type fieldName •= FieldNumber ; «int64»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type fieldName •= FieldNumber ; «map»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type fieldName •= FieldNumber ; «message»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type fieldName •= FieldNumber ; «messageType»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «messageType»
	Field : repeated Type fieldName •= FieldNumber ; «oneof»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type fieldName •= FieldNumber ; «option»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type fieldName •= FieldNumber ; «repeated»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type fieldName •= FieldNumber ; «reserved»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type fieldName •= FieldNumber ; «sfixed32»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type fieldName •= FieldNumber ; «sfixed64»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type fieldName •= FieldNumber ; «sint32»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type fieldName •= FieldNumber ; «sint64»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type fieldName •= FieldNumber ; «string»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type fieldName •= FieldNumber ; «uint32»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type fieldName •= FieldNumber ; «uint64»
	Field : repeated Type fieldName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 164


S134{
	Oneof : oneof oneofName { •} «}»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof oneofName { •} «bool»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof oneofName { •} «bytes»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof oneofName { •} «double»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof oneofName { •} «emptyStatement»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof oneofName { •} «enum»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof oneofName { •} «enumType»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «enumType»
	Oneof : oneof oneofName { •} «fixed32»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof oneofName { •} «fixed64»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof oneofName { •} «float»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof oneofName { •} «int32»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof oneofName { •} «int64»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof oneofName { •} «map»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof oneofName { •} «message»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof oneofName { •} «messageType»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «messageType»
	Oneof : oneof oneofName { •} «oneof»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof oneofName { •} «option»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof oneofName { •} «repeated»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof oneofName { •} «reserved»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof oneofName { •} «sfixed32»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof oneofName { •} «sfixed64»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof oneofName { •} «sint32»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof oneofName { •} «sint64»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof oneofName { •} «string»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof oneofName { •} «uint32»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof oneofName { •} «uint64»
	Oneof : oneof oneofName { •RepeatedOneOfFieldOrEmpty } «uint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «}»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «}»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «}»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «}»
	OneofField : •Type fieldName = FieldNumber ; «}»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	RepeatedOneOfFieldOrEmpty : •OneofField «bool»
	RepeatedOneOfFieldOrEmpty : •OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : •OneofField «double»
	RepeatedOneOfFieldOrEmpty : •OneofField «enumType»
	RepeatedOneOfFieldOrEmpty : •OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : •OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : •OneofField «float»
	RepeatedOneOfFieldOrEmpty : •OneofField «int32»
	RepeatedOneOfFieldOrEmpty : •OneofField «int64»
	RepeatedOneOfFieldOrEmpty : •OneofField «messageType»
	RepeatedOneOfFieldOrEmpty : •OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : •OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : •OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : •OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «string»
	RepeatedOneOfFieldOrEmpty : •OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : •OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «bool»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «double»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «enumType»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «float»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «int32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «int64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «messageType»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «string»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «enumType»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «messageType»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «enumType»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «messageType»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «emptyStatement»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
	OneofField : •Type fieldName = FieldNumber ; «bool»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : •Type fieldName = FieldNumber ; «bytes»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : •Type fieldName = FieldNumber ; «double»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : •Type fieldName = FieldNumber ; «enumType»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	OneofField : •Type fieldName = FieldNumber ; «fixed32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : •Type fieldName = FieldNumber ; «fixed64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : •Type fieldName = FieldNumber ; «float»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : •Type fieldName = FieldNumber ; «int32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : •Type fieldName = FieldNumber ; «int64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : •Type fieldName = FieldNumber ; «messageType»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	OneofField : •Type fieldName = FieldNumber ; «sfixed32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : •Type fieldName = FieldNumber ; «sfixed64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : •Type fieldName = FieldNumber ; «sint32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : •Type fieldName = FieldNumber ; «sint64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : •Type fieldName = FieldNumber ; «string»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : •Type fieldName = FieldNumber ; «uint32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : •Type fieldName = FieldNumber ; «uint64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : •Type fieldName = FieldNumber ; «emptyStatement»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
}
Transitions:
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	emptyStatement -> 165
	Type -> 166
	} -> 167
	RepeatedOneOfFieldOrEmpty -> 168
	OneofField -> 169


S135{
	KeyType : int32• «,»
}
Transitions:


S136{
	KeyType : int64• «,»
}
Transitions:


S137{
	KeyType : uint32• «,»
}
Transitions:


S138{
	KeyType : uint64• «,»
}
Transitions:


S139{
	KeyType : sint32• «,»
}
Transitions:


S140{
	KeyType : sint64• «,»
}
Transitions:


S141{
	KeyType : fixed32• «,»
}
Transitions:


S142{
	KeyType : fixed64• «,»
}
Transitions:


S143{
	KeyType : sfixed32• «,»
}
Transitions:


S144{
	KeyType : sfixed64• «,»
}
Transitions:


S145{
	KeyType : bool• «,»
}
Transitions:


S146{
	KeyType : string• «,»
}
Transitions:


S147{
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «}»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «bool»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «bytes»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «double»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «enum»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «enumType»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «fixed32»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «fixed64»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «float»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «int32»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «int64»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «map»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «message»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «messageType»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «oneof»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «option»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «repeated»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «reserved»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «sint32»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «sint64»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «string»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «uint32»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType •, Type > mapName = FieldNumber ; «uint64»
	MapField : map < KeyType •, Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	, -> 170


S148{
	Range : intLit to •intLit «;»
	Range : intLit to •max «;»
	Range : intLit to •intLit «,»
	Range : intLit to •max «,»
}
Transitions:
	intLit -> 171
	max -> 172


S149{
	Reserved : reserved Ranges ;• «}»
	Reserved : reserved Ranges ;• «bool»
	Reserved : reserved Ranges ;• «bytes»
	Reserved : reserved Ranges ;• «double»
	Reserved : reserved Ranges ;• «emptyStatement»
	Reserved : reserved Ranges ;• «enum»
	Reserved : reserved Ranges ;• «enumType»
	Reserved : reserved Ranges ;• «fixed32»
	Reserved : reserved Ranges ;• «fixed64»
	Reserved : reserved Ranges ;• «float»
	Reserved : reserved Ranges ;• «int32»
	Reserved : reserved Ranges ;• «int64»
	Reserved : reserved Ranges ;• «map»
	Reserved : reserved Ranges ;• «message»
	Reserved : reserved Ranges ;• «messageType»
	Reserved : reserved Ranges ;• «oneof»
	Reserved : reserved Ranges ;• «option»
	Reserved : reserved Ranges ;• «repeated»
	Reserved : reserved Ranges ;• «reserved»
	Reserved : reserved Ranges ;• «sfixed32»
	Reserved : reserved Ranges ;• «sfixed64»
	Reserved : reserved Ranges ;• «sint32»
	Reserved : reserved Ranges ;• «sint64»
	Reserved : reserved Ranges ;• «string»
	Reserved : reserved Ranges ;• «uint32»
	Reserved : reserved Ranges ;• «uint64»
}
Transitions:


S150{
	Ranges : Ranges , •Range «;»
	Ranges : Ranges , •Range «,»
	Range : •intLit «;»
	Range : •intLit to intLit «;»
	Range : •intLit to max «;»
	Range : •intLit «,»
	Range : •intLit to intLit «,»
	Range : •intLit to max «,»
}
Transitions:
	intLit -> 115
	Range -> 173


S151{
	Reserved : reserved FieldNames ;• «}»
	Reserved : reserved FieldNames ;• «bool»
	Reserved : reserved FieldNames ;• «bytes»
	Reserved : reserved FieldNames ;• «double»
	Reserved : reserved FieldNames ;• «emptyStatement»
	Reserved : reserved FieldNames ;• «enum»
	Reserved : reserved FieldNames ;• «enumType»
	Reserved : reserved FieldNames ;• «fixed32»
	Reserved : reserved FieldNames ;• «fixed64»
	Reserved : reserved FieldNames ;• «float»
	Reserved : reserved FieldNames ;• «int32»
	Reserved : reserved FieldNames ;• «int64»
	Reserved : reserved FieldNames ;• «map»
	Reserved : reserved FieldNames ;• «message»
	Reserved : reserved FieldNames ;• «messageType»
	Reserved : reserved FieldNames ;• «oneof»
	Reserved : reserved FieldNames ;• «option»
	Reserved : reserved FieldNames ;• «repeated»
	Reserved : reserved FieldNames ;• «reserved»
	Reserved : reserved FieldNames ;• «sfixed32»
	Reserved : reserved FieldNames ;• «sfixed64»
	Reserved : reserved FieldNames ;• «sint32»
	Reserved : reserved FieldNames ;• «sint64»
	Reserved : reserved FieldNames ;• «string»
	Reserved : reserved FieldNames ;• «uint32»
	Reserved : reserved FieldNames ;• «uint64»
}
Transitions:


S152{
	FieldNames : FieldNames , •fieldName «;»
	FieldNames : FieldNames , •fieldName «,»
}
Transitions:
	fieldName -> 174


S153{
	EnumBody : { •} «}»
	EnumBody : { •Option } «}»
	EnumBody : { •EnumField } «}»
	EnumBody : { •emptyStatement } «}»
	EnumBody : { •} «bool»
	EnumBody : { •Option } «bool»
	EnumBody : { •EnumField } «bool»
	EnumBody : { •emptyStatement } «bool»
	EnumBody : { •} «bytes»
	EnumBody : { •Option } «bytes»
	EnumBody : { •EnumField } «bytes»
	EnumBody : { •emptyStatement } «bytes»
	EnumBody : { •} «double»
	EnumBody : { •Option } «double»
	EnumBody : { •EnumField } «double»
	EnumBody : { •emptyStatement } «double»
	EnumBody : { •} «emptyStatement»
	EnumBody : { •Option } «emptyStatement»
	EnumBody : { •EnumField } «emptyStatement»
	EnumBody : { •emptyStatement } «emptyStatement»
	EnumBody : { •} «enum»
	EnumBody : { •Option } «enum»
	EnumBody : { •EnumField } «enum»
	EnumBody : { •emptyStatement } «enum»
	EnumBody : { •} «enumType»
	EnumBody : { •Option } «enumType»
	EnumBody : { •EnumField } «enumType»
	EnumBody : { •emptyStatement } «enumType»
	EnumBody : { •} «fixed32»
	EnumBody : { •Option } «fixed32»
	EnumBody : { •EnumField } «fixed32»
	EnumBody : { •emptyStatement } «fixed32»
	EnumBody : { •} «fixed64»
	EnumBody : { •Option } «fixed64»
	EnumBody : { •EnumField } «fixed64»
	EnumBody : { •emptyStatement } «fixed64»
	EnumBody : { •} «float»
	EnumBody : { •Option } «float»
	EnumBody : { •EnumField } «float»
	EnumBody : { •emptyStatement } «float»
	EnumBody : { •} «int32»
	EnumBody : { •Option } «int32»
	EnumBody : { •EnumField } «int32»
	EnumBody : { •emptyStatement } «int32»
	EnumBody : { •} «int64»
	EnumBody : { •Option } «int64»
	EnumBody : { •EnumField } «int64»
	EnumBody : { •emptyStatement } «int64»
	EnumBody : { •} «map»
	EnumBody : { •Option } «map»
	EnumBody : { •EnumField } «map»
	EnumBody : { •emptyStatement } «map»
	EnumBody : { •} «message»
	EnumBody : { •Option } «message»
	EnumBody : { •EnumField } «message»
	EnumBody : { •emptyStatement } «message»
	EnumBody : { •} «messageType»
	EnumBody : { •Option } «messageType»
	EnumBody : { •EnumField } «messageType»
	EnumBody : { •emptyStatement } «messageType»
	EnumBody : { •} «oneof»
	EnumBody : { •Option } «oneof»
	EnumBody : { •EnumField } «oneof»
	EnumBody : { •emptyStatement } «oneof»
	EnumBody : { •} «option»
	EnumBody : { •Option } «option»
	EnumBody : { •EnumField } «option»
	EnumBody : { •emptyStatement } «option»
	EnumBody : { •} «repeated»
	EnumBody : { •Option } «repeated»
	EnumBody : { •EnumField } «repeated»
	EnumBody : { •emptyStatement } «repeated»
	EnumBody : { •} «reserved»
	EnumBody : { •Option } «reserved»
	EnumBody : { •EnumField } «reserved»
	EnumBody : { •emptyStatement } «reserved»
	EnumBody : { •} «sfixed32»
	EnumBody : { •Option } «sfixed32»
	EnumBody : { •EnumField } «sfixed32»
	EnumBody : { •emptyStatement } «sfixed32»
	EnumBody : { •} «sfixed64»
	EnumBody : { •Option } «sfixed64»
	EnumBody : { •EnumField } «sfixed64»
	EnumBody : { •emptyStatement } «sfixed64»
	EnumBody : { •} «sint32»
	EnumBody : { •Option } «sint32»
	EnumBody : { •EnumField } «sint32»
	EnumBody : { •emptyStatement } «sint32»
	EnumBody : { •} «sint64»
	EnumBody : { •Option } «sint64»
	EnumBody : { •EnumField } «sint64»
	EnumBody : { •emptyStatement } «sint64»
	EnumBody : { •} «string»
	EnumBody : { •Option } «string»
	EnumBody : { •EnumField } «string»
	EnumBody : { •emptyStatement } «string»
	EnumBody : { •} «uint32»
	EnumBody : { •Option } «uint32»
	EnumBody : { •EnumField } «uint32»
	EnumBody : { •emptyStatement } «uint32»
	EnumBody : { •} «uint64»
	EnumBody : { •Option } «uint64»
	EnumBody : { •EnumField } «uint64»
	EnumBody : { •emptyStatement } «uint64»
	Option : •option OptionName = constant ; «}»
	EnumField : •ident = intLit ; «}»
	EnumField : •ident = intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	option -> 53
	ident -> 54
	Option -> 175
	emptyStatement -> 176
	} -> 177
	EnumField -> 178


S154{
	Enum : enum enumName EnumBody• «}»
	Enum : enum enumName EnumBody• «bool»
	Enum : enum enumName EnumBody• «bytes»
	Enum : enum enumName EnumBody• «double»
	Enum : enum enumName EnumBody• «emptyStatement»
	Enum : enum enumName EnumBody• «enum»
	Enum : enum enumName EnumBody• «enumType»
	Enum : enum enumName EnumBody• «fixed32»
	Enum : enum enumName EnumBody• «fixed64»
	Enum : enum enumName EnumBody• «float»
	Enum : enum enumName EnumBody• «int32»
	Enum : enum enumName EnumBody• «int64»
	Enum : enum enumName EnumBody• «map»
	Enum : enum enumName EnumBody• «message»
	Enum : enum enumName EnumBody• «messageType»
	Enum : enum enumName EnumBody• «oneof»
	Enum : enum enumName EnumBody• «option»
	Enum : enum enumName EnumBody• «repeated»
	Enum : enum enumName EnumBody• «reserved»
	Enum : enum enumName EnumBody• «sfixed32»
	Enum : enum enumName EnumBody• «sfixed64»
	Enum : enum enumName EnumBody• «sint32»
	Enum : enum enumName EnumBody• «sint64»
	Enum : enum enumName EnumBody• «string»
	Enum : enum enumName EnumBody• «uint32»
	Enum : enum enumName EnumBody• «uint64»
}
Transitions:


S155{
	Message : message messageName { •} «}»
	Message : message messageName { •MessageBody } «}»
	Message : message messageName { •} «bool»
	Message : message messageName { •MessageBody } «bool»
	Message : message messageName { •} «bytes»
	Message : message messageName { •MessageBody } «bytes»
	Message : message messageName { •} «double»
	Message : message messageName { •MessageBody } «double»
	Message : message messageName { •} «emptyStatement»
	Message : message messageName { •MessageBody } «emptyStatement»
	Message : message messageName { •} «enum»
	Message : message messageName { •MessageBody } «enum»
	Message : message messageName { •} «enumType»
	Message : message messageName { •MessageBody } «enumType»
	Message : message messageName { •} «fixed32»
	Message : message messageName { •MessageBody } «fixed32»
	Message : message messageName { •} «fixed64»
	Message : message messageName { •MessageBody } «fixed64»
	Message : message messageName { •} «float»
	Message : message messageName { •MessageBody } «float»
	Message : message messageName { •} «int32»
	Message : message messageName { •MessageBody } «int32»
	Message : message messageName { •} «int64»
	Message : message messageName { •MessageBody } «int64»
	Message : message messageName { •} «map»
	Message : message messageName { •MessageBody } «map»
	Message : message messageName { •} «message»
	Message : message messageName { •MessageBody } «message»
	Message : message messageName { •} «messageType»
	Message : message messageName { •MessageBody } «messageType»
	Message : message messageName { •} «oneof»
	Message : message messageName { •MessageBody } «oneof»
	Message : message messageName { •} «option»
	Message : message messageName { •MessageBody } «option»
	Message : message messageName { •} «repeated»
	Message : message messageName { •MessageBody } «repeated»
	Message : message messageName { •} «reserved»
	Message : message messageName { •MessageBody } «reserved»
	Message : message messageName { •} «sfixed32»
	Message : message messageName { •MessageBody } «sfixed32»
	Message : message messageName { •} «sfixed64»
	Message : message messageName { •MessageBody } «sfixed64»
	Message : message messageName { •} «sint32»
	Message : message messageName { •MessageBody } «sint32»
	Message : message messageName { •} «sint64»
	Message : message messageName { •MessageBody } «sint64»
	Message : message messageName { •} «string»
	Message : message messageName { •MessageBody } «string»
	Message : message messageName { •} «uint32»
	Message : message messageName { •MessageBody } «uint32»
	Message : message messageName { •} «uint64»
	Message : message messageName { •MessageBody } «uint64»
	MessageBody : •MessageContent «}»
	MessageBody : •MessageBody MessageContent «}»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageBody : •MessageContent «bool»
	MessageBody : •MessageContent «bytes»
	MessageBody : •MessageContent «double»
	MessageBody : •MessageContent «emptyStatement»
	MessageBody : •MessageContent «enum»
	MessageBody : •MessageContent «enumType»
	MessageBody : •MessageContent «fixed32»
	MessageBody : •MessageContent «fixed64»
	MessageBody : •MessageContent «float»
	MessageBody : •MessageContent «int32»
	MessageBody : •MessageContent «int64»
	MessageBody : •MessageContent «map»
	MessageBody : •MessageContent «message»
	MessageBody : •MessageContent «messageType»
	MessageBody : •MessageContent «oneof»
	MessageBody : •MessageContent «option»
	MessageBody : •MessageContent «repeated»
	MessageBody : •MessageContent «reserved»
	MessageBody : •MessageContent «sfixed32»
	MessageBody : •MessageContent «sfixed64»
	MessageBody : •MessageContent «sint32»
	MessageBody : •MessageContent «sint64»
	MessageBody : •MessageContent «string»
	MessageBody : •MessageContent «uint32»
	MessageBody : •MessageContent «uint64»
	MessageBody : •MessageBody MessageContent «bool»
	MessageBody : •MessageBody MessageContent «bytes»
	MessageBody : •MessageBody MessageContent «double»
	MessageBody : •MessageBody MessageContent «emptyStatement»
	MessageBody : •MessageBody MessageContent «enum»
	MessageBody : •MessageBody MessageContent «enumType»
	MessageBody : •MessageBody MessageContent «fixed32»
	MessageBody : •MessageBody MessageContent «fixed64»
	MessageBody : •MessageBody MessageContent «float»
	MessageBody : •MessageBody MessageContent «int32»
	MessageBody : •MessageBody MessageContent «int64»
	MessageBody : •MessageBody MessageContent «map»
	MessageBody : •MessageBody MessageContent «message»
	MessageBody : •MessageBody MessageContent «messageType»
	MessageBody : •MessageBody MessageContent «oneof»
	MessageBody : •MessageBody MessageContent «option»
	MessageBody : •MessageBody MessageContent «repeated»
	MessageBody : •MessageBody MessageContent «reserved»
	MessageBody : •MessageBody MessageContent «sfixed32»
	MessageBody : •MessageBody MessageContent «sfixed64»
	MessageBody : •MessageBody MessageContent «sint32»
	MessageBody : •MessageBody MessageContent «sint64»
	MessageBody : •MessageBody MessageContent «string»
	MessageBody : •MessageBody MessageContent «uint32»
	MessageBody : •MessageBody MessageContent «uint64»
	Field : •Type fieldName = FieldNumber ; «}»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type fieldName = FieldNumber ; «}»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum enumName EnumBody «}»
	Message : •message messageName { } «}»
	Message : •message messageName { MessageBody } «}»
	Option : •option OptionName = constant ; «}»
	Oneof : •oneof oneofName { } «}»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «enumType»
	MessageContent : •Enum «enumType»
	MessageContent : •Message «enumType»
	MessageContent : •Option «enumType»
	MessageContent : •Oneof «enumType»
	MessageContent : •MapField «enumType»
	MessageContent : •Reserved «enumType»
	MessageContent : •emptyStatement «enumType»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «messageType»
	MessageContent : •Enum «messageType»
	MessageContent : •Message «messageType»
	MessageContent : •Option «messageType»
	MessageContent : •Oneof «messageType»
	MessageContent : •MapField «messageType»
	MessageContent : •Reserved «messageType»
	MessageContent : •emptyStatement «messageType»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
	Field : •Type fieldName = FieldNumber ; «bool»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type fieldName = FieldNumber ; «bool»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum enumName EnumBody «bool»
	Message : •message messageName { } «bool»
	Message : •message messageName { MessageBody } «bool»
	Option : •option OptionName = constant ; «bool»
	Oneof : •oneof oneofName { } «bool»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type fieldName = FieldNumber ; «bytes»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type fieldName = FieldNumber ; «bytes»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum enumName EnumBody «bytes»
	Message : •message messageName { } «bytes»
	Message : •message messageName { MessageBody } «bytes»
	Option : •option OptionName = constant ; «bytes»
	Oneof : •oneof oneofName { } «bytes»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type fieldName = FieldNumber ; «double»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type fieldName = FieldNumber ; «double»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum enumName EnumBody «double»
	Message : •message messageName { } «double»
	Message : •message messageName { MessageBody } «double»
	Option : •option OptionName = constant ; «double»
	Oneof : •oneof oneofName { } «double»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type fieldName = FieldNumber ; «emptyStatement»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	Oneof : •oneof oneofName { } «emptyStatement»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type fieldName = FieldNumber ; «enum»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type fieldName = FieldNumber ; «enum»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum enumName EnumBody «enum»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Option : •option OptionName = constant ; «enum»
	Oneof : •oneof oneofName { } «enum»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type fieldName = FieldNumber ; «enumType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : •repeated Type fieldName = FieldNumber ; «enumType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Enum : •enum enumName EnumBody «enumType»
	Message : •message messageName { } «enumType»
	Message : •message messageName { MessageBody } «enumType»
	Option : •option OptionName = constant ; «enumType»
	Oneof : •oneof oneofName { } «enumType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	Reserved : •reserved Ranges ; «enumType»
	Reserved : •reserved FieldNames ; «enumType»
	Field : •Type fieldName = FieldNumber ; «fixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum enumName EnumBody «fixed32»
	Message : •message messageName { } «fixed32»
	Message : •message messageName { MessageBody } «fixed32»
	Option : •option OptionName = constant ; «fixed32»
	Oneof : •oneof oneofName { } «fixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type fieldName = FieldNumber ; «fixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum enumName EnumBody «fixed64»
	Message : •message messageName { } «fixed64»
	Message : •message messageName { MessageBody } «fixed64»
	Option : •option OptionName = constant ; «fixed64»
	Oneof : •oneof oneofName { } «fixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type fieldName = FieldNumber ; «float»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type fieldName = FieldNumber ; «float»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum enumName EnumBody «float»
	Message : •message messageName { } «float»
	Message : •message messageName { MessageBody } «float»
	Option : •option OptionName = constant ; «float»
	Oneof : •oneof oneofName { } «float»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type fieldName = FieldNumber ; «int32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type fieldName = FieldNumber ; «int32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum enumName EnumBody «int32»
	Message : •message messageName { } «int32»
	Message : •message messageName { MessageBody } «int32»
	Option : •option OptionName = constant ; «int32»
	Oneof : •oneof oneofName { } «int32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type fieldName = FieldNumber ; «int64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type fieldName = FieldNumber ; «int64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum enumName EnumBody «int64»
	Message : •message messageName { } «int64»
	Message : •message messageName { MessageBody } «int64»
	Option : •option OptionName = constant ; «int64»
	Oneof : •oneof oneofName { } «int64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type fieldName = FieldNumber ; «map»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type fieldName = FieldNumber ; «map»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum enumName EnumBody «map»
	Message : •message messageName { } «map»
	Message : •message messageName { MessageBody } «map»
	Option : •option OptionName = constant ; «map»
	Oneof : •oneof oneofName { } «map»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type fieldName = FieldNumber ; «message»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type fieldName = FieldNumber ; «message»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum enumName EnumBody «message»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Option : •option OptionName = constant ; «message»
	Oneof : •oneof oneofName { } «message»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type fieldName = FieldNumber ; «messageType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : •repeated Type fieldName = FieldNumber ; «messageType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Enum : •enum enumName EnumBody «messageType»
	Message : •message messageName { } «messageType»
	Message : •message messageName { MessageBody } «messageType»
	Option : •option OptionName = constant ; «messageType»
	Oneof : •oneof oneofName { } «messageType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	Reserved : •reserved Ranges ; «messageType»
	Reserved : •reserved FieldNames ; «messageType»
	Field : •Type fieldName = FieldNumber ; «oneof»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type fieldName = FieldNumber ; «oneof»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum enumName EnumBody «oneof»
	Message : •message messageName { } «oneof»
	Message : •message messageName { MessageBody } «oneof»
	Option : •option OptionName = constant ; «oneof»
	Oneof : •oneof oneofName { } «oneof»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type fieldName = FieldNumber ; «option»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type fieldName = FieldNumber ; «option»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum enumName EnumBody «option»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Option : •option OptionName = constant ; «option»
	Oneof : •oneof oneofName { } «option»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type fieldName = FieldNumber ; «repeated»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type fieldName = FieldNumber ; «repeated»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum enumName EnumBody «repeated»
	Message : •message messageName { } «repeated»
	Message : •message messageName { MessageBody } «repeated»
	Option : •option OptionName = constant ; «repeated»
	Oneof : •oneof oneofName { } «repeated»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type fieldName = FieldNumber ; «reserved»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type fieldName = FieldNumber ; «reserved»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum enumName EnumBody «reserved»
	Message : •message messageName { } «reserved»
	Message : •message messageName { MessageBody } «reserved»
	Option : •option OptionName = constant ; «reserved»
	Oneof : •oneof oneofName { } «reserved»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type fieldName = FieldNumber ; «sfixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum enumName EnumBody «sfixed32»
	Message : •message messageName { } «sfixed32»
	Message : •message messageName { MessageBody } «sfixed32»
	Option : •option OptionName = constant ; «sfixed32»
	Oneof : •oneof oneofName { } «sfixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type fieldName = FieldNumber ; «sfixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum enumName EnumBody «sfixed64»
	Message : •message messageName { } «sfixed64»
	Message : •message messageName { MessageBody } «sfixed64»
	Option : •option OptionName = constant ; «sfixed64»
	Oneof : •oneof oneofName { } «sfixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type fieldName = FieldNumber ; «sint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type fieldName = FieldNumber ; «sint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum enumName EnumBody «sint32»
	Message : •message messageName { } «sint32»
	Message : •message messageName { MessageBody } «sint32»
	Option : •option OptionName = constant ; «sint32»
	Oneof : •oneof oneofName { } «sint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type fieldName = FieldNumber ; «sint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type fieldName = FieldNumber ; «sint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum enumName EnumBody «sint64»
	Message : •message messageName { } «sint64»
	Message : •message messageName { MessageBody } «sint64»
	Option : •option OptionName = constant ; «sint64»
	Oneof : •oneof oneofName { } «sint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type fieldName = FieldNumber ; «string»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type fieldName = FieldNumber ; «string»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum enumName EnumBody «string»
	Message : •message messageName { } «string»
	Message : •message messageName { MessageBody } «string»
	Option : •option OptionName = constant ; «string»
	Oneof : •oneof oneofName { } «string»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type fieldName = FieldNumber ; «uint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type fieldName = FieldNumber ; «uint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum enumName EnumBody «uint32»
	Message : •message messageName { } «uint32»
	Message : •message messageName { MessageBody } «uint32»
	Option : •option OptionName = constant ; «uint32»
	Oneof : •oneof oneofName { } «uint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type fieldName = FieldNumber ; «uint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type fieldName = FieldNumber ; «uint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum enumName EnumBody «uint64»
	Message : •message messageName { } «uint64»
	Message : •message messageName { MessageBody } «uint64»
	Option : •option OptionName = constant ; «uint64»
	Oneof : •oneof oneofName { } «uint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
}
Transitions:
	Option -> 57
	emptyStatement -> 58
	option -> 59
	Message -> 60
	Enum -> 61
	Type -> 62
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Field -> 80
	repeated -> 81
	Oneof -> 82
	oneof -> 83
	MapField -> 85
	map -> 86
	Reserved -> 87
	reserved -> 88
	enum -> 89
	message -> 90
	MessageContent -> 92
	} -> 179
	MessageBody -> 180


S156{
	Option : option OptionName = •constant ; «}»
	Option : option OptionName = •constant ; «emptyStatement»
	Option : option OptionName = •constant ; «option»
	Option : option OptionName = •constant ; «rpc»
}
Transitions:
	constant -> 181


S157{
	Rpc : rpc rpcName ( •messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( •stream messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( •messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( •stream messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( •messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( •stream messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( •messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( •stream messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( •messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( •stream messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( •messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( •stream messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( •messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( •stream messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( •messageType ) returns ( stream messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( •stream messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 182
	stream -> 183


S158{
	Option : option OptionName = constant •; «}»
}
Transitions:
	; -> 184


S159{
	EnumField : ident = intLit ;• «}»
}
Transitions:


S160{
	EnumField : ident = intLit [ •EnumValueOptions ] ; «}»
	EnumValueOptions : •EnumValueOption «]»
	EnumValueOptions : •EnumValueOptions , EnumValueOption «]»
	EnumValueOption : •OptionName = constant «]»
	EnumValueOptions : •EnumValueOption «,»
	EnumValueOptions : •EnumValueOptions , EnumValueOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
	EnumValueOption : •OptionName = constant «,»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 185
	EnumValueOptions -> 186
	EnumValueOption -> 187


S161{
	Option : option OptionName = constant •; «}»
	Option : option OptionName = constant •; «bool»
	Option : option OptionName = constant •; «bytes»
	Option : option OptionName = constant •; «double»
	Option : option OptionName = constant •; «emptyStatement»
	Option : option OptionName = constant •; «enum»
	Option : option OptionName = constant •; «enumType»
	Option : option OptionName = constant •; «fixed32»
	Option : option OptionName = constant •; «fixed64»
	Option : option OptionName = constant •; «float»
	Option : option OptionName = constant •; «int32»
	Option : option OptionName = constant •; «int64»
	Option : option OptionName = constant •; «map»
	Option : option OptionName = constant •; «message»
	Option : option OptionName = constant •; «messageType»
	Option : option OptionName = constant •; «oneof»
	Option : option OptionName = constant •; «option»
	Option : option OptionName = constant •; «repeated»
	Option : option OptionName = constant •; «reserved»
	Option : option OptionName = constant •; «sfixed32»
	Option : option OptionName = constant •; «sfixed64»
	Option : option OptionName = constant •; «sint32»
	Option : option OptionName = constant •; «sint64»
	Option : option OptionName = constant •; «string»
	Option : option OptionName = constant •; «uint32»
	Option : option OptionName = constant •; «uint64»
}
Transitions:
	; -> 188


S162{
	Field : Type fieldName = FieldNumber •; «}»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «}»
	Field : Type fieldName = FieldNumber •; «bool»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «bool»
	Field : Type fieldName = FieldNumber •; «bytes»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	Field : Type fieldName = FieldNumber •; «double»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «double»
	Field : Type fieldName = FieldNumber •; «emptyStatement»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	Field : Type fieldName = FieldNumber •; «enum»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «enum»
	Field : Type fieldName = FieldNumber •; «enumType»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «enumType»
	Field : Type fieldName = FieldNumber •; «fixed32»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	Field : Type fieldName = FieldNumber •; «fixed64»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	Field : Type fieldName = FieldNumber •; «float»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «float»
	Field : Type fieldName = FieldNumber •; «int32»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «int32»
	Field : Type fieldName = FieldNumber •; «int64»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «int64»
	Field : Type fieldName = FieldNumber •; «map»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «map»
	Field : Type fieldName = FieldNumber •; «message»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «message»
	Field : Type fieldName = FieldNumber •; «messageType»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «messageType»
	Field : Type fieldName = FieldNumber •; «oneof»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «oneof»
	Field : Type fieldName = FieldNumber •; «option»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «option»
	Field : Type fieldName = FieldNumber •; «repeated»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «repeated»
	Field : Type fieldName = FieldNumber •; «reserved»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «reserved»
	Field : Type fieldName = FieldNumber •; «sfixed32»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	Field : Type fieldName = FieldNumber •; «sfixed64»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	Field : Type fieldName = FieldNumber •; «sint32»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	Field : Type fieldName = FieldNumber •; «sint64»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	Field : Type fieldName = FieldNumber •; «string»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «string»
	Field : Type fieldName = FieldNumber •; «uint32»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	Field : Type fieldName = FieldNumber •; «uint64»
	Field : Type fieldName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 189
	[ -> 190


S163{
	FieldNumber : intLit• «;»
	FieldNumber : intLit• «[»
}
Transitions:


S164{
	Field : repeated Type fieldName = •FieldNumber ; «}»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type fieldName = •FieldNumber ; «bool»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type fieldName = •FieldNumber ; «bytes»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type fieldName = •FieldNumber ; «double»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type fieldName = •FieldNumber ; «emptyStatement»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type fieldName = •FieldNumber ; «enum»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type fieldName = •FieldNumber ; «enumType»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «enumType»
	Field : repeated Type fieldName = •FieldNumber ; «fixed32»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type fieldName = •FieldNumber ; «fixed64»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type fieldName = •FieldNumber ; «float»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type fieldName = •FieldNumber ; «int32»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type fieldName = •FieldNumber ; «int64»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type fieldName = •FieldNumber ; «map»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type fieldName = •FieldNumber ; «message»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type fieldName = •FieldNumber ; «messageType»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «messageType»
	Field : repeated Type fieldName = •FieldNumber ; «oneof»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type fieldName = •FieldNumber ; «option»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type fieldName = •FieldNumber ; «repeated»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type fieldName = •FieldNumber ; «reserved»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type fieldName = •FieldNumber ; «sfixed32»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type fieldName = •FieldNumber ; «sfixed64»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type fieldName = •FieldNumber ; «sint32»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type fieldName = •FieldNumber ; «sint64»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type fieldName = •FieldNumber ; «string»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type fieldName = •FieldNumber ; «uint32»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type fieldName = •FieldNumber ; «uint64»
	Field : repeated Type fieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 163
	FieldNumber -> 191


S165{
	RepeatedOneOfFieldOrEmpty : emptyStatement• «}»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «bool»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «bytes»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «double»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «enumType»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «fixed32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «fixed64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «float»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «int32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «int64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «messageType»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sfixed32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sfixed64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sint32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sint64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «string»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «uint32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «uint64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «emptyStatement»
}
Transitions:


S166{
	OneofField : Type •fieldName = FieldNumber ; «}»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type •fieldName = FieldNumber ; «bool»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type •fieldName = FieldNumber ; «bytes»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type •fieldName = FieldNumber ; «double»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type •fieldName = FieldNumber ; «enumType»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	OneofField : Type •fieldName = FieldNumber ; «fixed32»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type •fieldName = FieldNumber ; «fixed64»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type •fieldName = FieldNumber ; «float»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type •fieldName = FieldNumber ; «int32»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type •fieldName = FieldNumber ; «int64»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type •fieldName = FieldNumber ; «messageType»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	OneofField : Type •fieldName = FieldNumber ; «sfixed32»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type •fieldName = FieldNumber ; «sfixed64»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type •fieldName = FieldNumber ; «sint32»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type •fieldName = FieldNumber ; «sint64»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type •fieldName = FieldNumber ; «string»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type •fieldName = FieldNumber ; «uint32»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type •fieldName = FieldNumber ; «uint64»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type •fieldName = FieldNumber ; «emptyStatement»
	OneofField : Type •fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
}
Transitions:
	fieldName -> 192


S167{
	Oneof : oneof oneofName { }• «}»
	Oneof : oneof oneofName { }• «bool»
	Oneof : oneof oneofName { }• «bytes»
	Oneof : oneof oneofName { }• «double»
	Oneof : oneof oneofName { }• «emptyStatement»
	Oneof : oneof oneofName { }• «enum»
	Oneof : oneof oneofName { }• «enumType»
	Oneof : oneof oneofName { }• «fixed32»
	Oneof : oneof oneofName { }• «fixed64»
	Oneof : oneof oneofName { }• «float»
	Oneof : oneof oneofName { }• «int32»
	Oneof : oneof oneofName { }• «int64»
	Oneof : oneof oneofName { }• «map»
	Oneof : oneof oneofName { }• «message»
	Oneof : oneof oneofName { }• «messageType»
	Oneof : oneof oneofName { }• «oneof»
	Oneof : oneof oneofName { }• «option»
	Oneof : oneof oneofName { }• «repeated»
	Oneof : oneof oneofName { }• «reserved»
	Oneof : oneof oneofName { }• «sfixed32»
	Oneof : oneof oneofName { }• «sfixed64»
	Oneof : oneof oneofName { }• «sint32»
	Oneof : oneof oneofName { }• «sint64»
	Oneof : oneof oneofName { }• «string»
	Oneof : oneof oneofName { }• «uint32»
	Oneof : oneof oneofName { }• «uint64»
}
Transitions:


S168{
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «}»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «bool»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «bytes»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «double»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «emptyStatement»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «enum»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «enumType»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «fixed32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «fixed64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «float»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «int32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «int64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «map»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «message»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «messageType»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «oneof»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «option»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «repeated»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «reserved»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «sfixed32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «sfixed64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «sint32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «sint64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «string»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «uint32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty •} «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «enumType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «messageType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «enumType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «messageType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «emptyStatement»
	OneofField : •Type fieldName = FieldNumber ; «}»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	OneofField : •Type fieldName = FieldNumber ; «bool»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : •Type fieldName = FieldNumber ; «bytes»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : •Type fieldName = FieldNumber ; «double»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : •Type fieldName = FieldNumber ; «enumType»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	OneofField : •Type fieldName = FieldNumber ; «fixed32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : •Type fieldName = FieldNumber ; «fixed64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : •Type fieldName = FieldNumber ; «float»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : •Type fieldName = FieldNumber ; «int32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : •Type fieldName = FieldNumber ; «int64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : •Type fieldName = FieldNumber ; «messageType»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	OneofField : •Type fieldName = FieldNumber ; «sfixed32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : •Type fieldName = FieldNumber ; «sfixed64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : •Type fieldName = FieldNumber ; «sint32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : •Type fieldName = FieldNumber ; «sint64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : •Type fieldName = FieldNumber ; «string»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : •Type fieldName = FieldNumber ; «uint32»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : •Type fieldName = FieldNumber ; «uint64»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : •Type fieldName = FieldNumber ; «emptyStatement»
	OneofField : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
}
Transitions:
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Type -> 166
	emptyStatement -> 193
	} -> 194
	OneofField -> 195


S169{
	RepeatedOneOfFieldOrEmpty : OneofField• «}»
	RepeatedOneOfFieldOrEmpty : OneofField• «bool»
	RepeatedOneOfFieldOrEmpty : OneofField• «bytes»
	RepeatedOneOfFieldOrEmpty : OneofField• «double»
	RepeatedOneOfFieldOrEmpty : OneofField• «enumType»
	RepeatedOneOfFieldOrEmpty : OneofField• «fixed32»
	RepeatedOneOfFieldOrEmpty : OneofField• «fixed64»
	RepeatedOneOfFieldOrEmpty : OneofField• «float»
	RepeatedOneOfFieldOrEmpty : OneofField• «int32»
	RepeatedOneOfFieldOrEmpty : OneofField• «int64»
	RepeatedOneOfFieldOrEmpty : OneofField• «messageType»
	RepeatedOneOfFieldOrEmpty : OneofField• «sfixed32»
	RepeatedOneOfFieldOrEmpty : OneofField• «sfixed64»
	RepeatedOneOfFieldOrEmpty : OneofField• «sint32»
	RepeatedOneOfFieldOrEmpty : OneofField• «sint64»
	RepeatedOneOfFieldOrEmpty : OneofField• «string»
	RepeatedOneOfFieldOrEmpty : OneofField• «uint32»
	RepeatedOneOfFieldOrEmpty : OneofField• «uint64»
	RepeatedOneOfFieldOrEmpty : OneofField• «emptyStatement»
}
Transitions:


S170{
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «}»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «bool»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «bytes»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «double»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «enum»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «enumType»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «float»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «int32»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «int64»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «map»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «message»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «messageType»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «oneof»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «option»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «repeated»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «reserved»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «sint32»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «sint64»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «string»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «uint32»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , •Type > mapName = FieldNumber ; «uint64»
	MapField : map < KeyType , •Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	Type : •double «>»
	Type : •float «>»
	Type : •int32 «>»
	Type : •int64 «>»
	Type : •uint32 «>»
	Type : •uint64 «>»
	Type : •sint32 «>»
	Type : •sint64 «>»
	Type : •fixed32 «>»
	Type : •fixed64 «>»
	Type : •sfixed32 «>»
	Type : •sfixed64 «>»
	Type : •bool «>»
	Type : •string «>»
	Type : •bytes «>»
	Type : •messageType «>»
	Type : •enumType «>»
}
Transitions:
	Type -> 196
	double -> 197
	float -> 198
	int32 -> 199
	int64 -> 200
	uint32 -> 201
	uint64 -> 202
	sint32 -> 203
	sint64 -> 204
	fixed32 -> 205
	fixed64 -> 206
	sfixed32 -> 207
	sfixed64 -> 208
	bool -> 209
	string -> 210
	bytes -> 211
	messageType -> 212
	enumType -> 213


S171{
	Range : intLit to intLit• «;»
	Range : intLit to intLit• «,»
}
Transitions:


S172{
	Range : intLit to max• «;»
	Range : intLit to max• «,»
}
Transitions:


S173{
	Ranges : Ranges , Range• «;»
	Ranges : Ranges , Range• «,»
}
Transitions:


S174{
	FieldNames : FieldNames , fieldName• «;»
	FieldNames : FieldNames , fieldName• «,»
}
Transitions:


S175{
	EnumBody : { Option •} «}»
	EnumBody : { Option •} «bool»
	EnumBody : { Option •} «bytes»
	EnumBody : { Option •} «double»
	EnumBody : { Option •} «emptyStatement»
	EnumBody : { Option •} «enum»
	EnumBody : { Option •} «enumType»
	EnumBody : { Option •} «fixed32»
	EnumBody : { Option •} «fixed64»
	EnumBody : { Option •} «float»
	EnumBody : { Option •} «int32»
	EnumBody : { Option •} «int64»
	EnumBody : { Option •} «map»
	EnumBody : { Option •} «message»
	EnumBody : { Option •} «messageType»
	EnumBody : { Option •} «oneof»
	EnumBody : { Option •} «option»
	EnumBody : { Option •} «repeated»
	EnumBody : { Option •} «reserved»
	EnumBody : { Option •} «sfixed32»
	EnumBody : { Option •} «sfixed64»
	EnumBody : { Option •} «sint32»
	EnumBody : { Option •} «sint64»
	EnumBody : { Option •} «string»
	EnumBody : { Option •} «uint32»
	EnumBody : { Option •} «uint64»
}
Transitions:
	} -> 214


S176{
	EnumBody : { emptyStatement •} «}»
	EnumBody : { emptyStatement •} «bool»
	EnumBody : { emptyStatement •} «bytes»
	EnumBody : { emptyStatement •} «double»
	EnumBody : { emptyStatement •} «emptyStatement»
	EnumBody : { emptyStatement •} «enum»
	EnumBody : { emptyStatement •} «enumType»
	EnumBody : { emptyStatement •} «fixed32»
	EnumBody : { emptyStatement •} «fixed64»
	EnumBody : { emptyStatement •} «float»
	EnumBody : { emptyStatement •} «int32»
	EnumBody : { emptyStatement •} «int64»
	EnumBody : { emptyStatement •} «map»
	EnumBody : { emptyStatement •} «message»
	EnumBody : { emptyStatement •} «messageType»
	EnumBody : { emptyStatement •} «oneof»
	EnumBody : { emptyStatement •} «option»
	EnumBody : { emptyStatement •} «repeated»
	EnumBody : { emptyStatement •} «reserved»
	EnumBody : { emptyStatement •} «sfixed32»
	EnumBody : { emptyStatement •} «sfixed64»
	EnumBody : { emptyStatement •} «sint32»
	EnumBody : { emptyStatement •} «sint64»
	EnumBody : { emptyStatement •} «string»
	EnumBody : { emptyStatement •} «uint32»
	EnumBody : { emptyStatement •} «uint64»
}
Transitions:
	} -> 215


S177{
	EnumBody : { }• «}»
	EnumBody : { }• «bool»
	EnumBody : { }• «bytes»
	EnumBody : { }• «double»
	EnumBody : { }• «emptyStatement»
	EnumBody : { }• «enum»
	EnumBody : { }• «enumType»
	EnumBody : { }• «fixed32»
	EnumBody : { }• «fixed64»
	EnumBody : { }• «float»
	EnumBody : { }• «int32»
	EnumBody : { }• «int64»
	EnumBody : { }• «map»
	EnumBody : { }• «message»
	EnumBody : { }• «messageType»
	EnumBody : { }• «oneof»
	EnumBody : { }• «option»
	EnumBody : { }• «repeated»
	EnumBody : { }• «reserved»
	EnumBody : { }• «sfixed32»
	EnumBody : { }• «sfixed64»
	EnumBody : { }• «sint32»
	EnumBody : { }• «sint64»
	EnumBody : { }• «string»
	EnumBody : { }• «uint32»
	EnumBody : { }• «uint64»
}
Transitions:


S178{
	EnumBody : { EnumField •} «}»
	EnumBody : { EnumField •} «bool»
	EnumBody : { EnumField •} «bytes»
	EnumBody : { EnumField •} «double»
	EnumBody : { EnumField •} «emptyStatement»
	EnumBody : { EnumField •} «enum»
	EnumBody : { EnumField •} «enumType»
	EnumBody : { EnumField •} «fixed32»
	EnumBody : { EnumField •} «fixed64»
	EnumBody : { EnumField •} «float»
	EnumBody : { EnumField •} «int32»
	EnumBody : { EnumField •} «int64»
	EnumBody : { EnumField •} «map»
	EnumBody : { EnumField •} «message»
	EnumBody : { EnumField •} «messageType»
	EnumBody : { EnumField •} «oneof»
	EnumBody : { EnumField •} «option»
	EnumBody : { EnumField •} «repeated»
	EnumBody : { EnumField •} «reserved»
	EnumBody : { EnumField •} «sfixed32»
	EnumBody : { EnumField •} «sfixed64»
	EnumBody : { EnumField •} «sint32»
	EnumBody : { EnumField •} «sint64»
	EnumBody : { EnumField •} «string»
	EnumBody : { EnumField •} «uint32»
	EnumBody : { EnumField •} «uint64»
}
Transitions:
	} -> 216


S179{
	Message : message messageName { }• «}»
	Message : message messageName { }• «bool»
	Message : message messageName { }• «bytes»
	Message : message messageName { }• «double»
	Message : message messageName { }• «emptyStatement»
	Message : message messageName { }• «enum»
	Message : message messageName { }• «enumType»
	Message : message messageName { }• «fixed32»
	Message : message messageName { }• «fixed64»
	Message : message messageName { }• «float»
	Message : message messageName { }• «int32»
	Message : message messageName { }• «int64»
	Message : message messageName { }• «map»
	Message : message messageName { }• «message»
	Message : message messageName { }• «messageType»
	Message : message messageName { }• «oneof»
	Message : message messageName { }• «option»
	Message : message messageName { }• «repeated»
	Message : message messageName { }• «reserved»
	Message : message messageName { }• «sfixed32»
	Message : message messageName { }• «sfixed64»
	Message : message messageName { }• «sint32»
	Message : message messageName { }• «sint64»
	Message : message messageName { }• «string»
	Message : message messageName { }• «uint32»
	Message : message messageName { }• «uint64»
}
Transitions:


S180{
	Message : message messageName { MessageBody •} «}»
	Message : message messageName { MessageBody •} «bool»
	Message : message messageName { MessageBody •} «bytes»
	Message : message messageName { MessageBody •} «double»
	Message : message messageName { MessageBody •} «emptyStatement»
	Message : message messageName { MessageBody •} «enum»
	Message : message messageName { MessageBody •} «enumType»
	Message : message messageName { MessageBody •} «fixed32»
	Message : message messageName { MessageBody •} «fixed64»
	Message : message messageName { MessageBody •} «float»
	Message : message messageName { MessageBody •} «int32»
	Message : message messageName { MessageBody •} «int64»
	Message : message messageName { MessageBody •} «map»
	Message : message messageName { MessageBody •} «message»
	Message : message messageName { MessageBody •} «messageType»
	Message : message messageName { MessageBody •} «oneof»
	Message : message messageName { MessageBody •} «option»
	Message : message messageName { MessageBody •} «repeated»
	Message : message messageName { MessageBody •} «reserved»
	Message : message messageName { MessageBody •} «sfixed32»
	Message : message messageName { MessageBody •} «sfixed64»
	Message : message messageName { MessageBody •} «sint32»
	Message : message messageName { MessageBody •} «sint64»
	Message : message messageName { MessageBody •} «string»
	Message : message messageName { MessageBody •} «uint32»
	Message : message messageName { MessageBody •} «uint64»
	MessageBody : MessageBody •MessageContent «}»
	MessageBody : MessageBody •MessageContent «bool»
	MessageBody : MessageBody •MessageContent «bytes»
	MessageBody : MessageBody •MessageContent «double»
	MessageBody : MessageBody •MessageContent «emptyStatement»
	MessageBody : MessageBody •MessageContent «enum»
	MessageBody : MessageBody •MessageContent «enumType»
	MessageBody : MessageBody •MessageContent «fixed32»
	MessageBody : MessageBody •MessageContent «fixed64»
	MessageBody : MessageBody •MessageContent «float»
	MessageBody : MessageBody •MessageContent «int32»
	MessageBody : MessageBody •MessageContent «int64»
	MessageBody : MessageBody •MessageContent «map»
	MessageBody : MessageBody •MessageContent «message»
	MessageBody : MessageBody •MessageContent «messageType»
	MessageBody : MessageBody •MessageContent «oneof»
	MessageBody : MessageBody •MessageContent «option»
	MessageBody : MessageBody •MessageContent «repeated»
	MessageBody : MessageBody •MessageContent «reserved»
	MessageBody : MessageBody •MessageContent «sfixed32»
	MessageBody : MessageBody •MessageContent «sfixed64»
	MessageBody : MessageBody •MessageContent «sint32»
	MessageBody : MessageBody •MessageContent «sint64»
	MessageBody : MessageBody •MessageContent «string»
	MessageBody : MessageBody •MessageContent «uint32»
	MessageBody : MessageBody •MessageContent «uint64»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «enumType»
	MessageContent : •Enum «enumType»
	MessageContent : •Message «enumType»
	MessageContent : •Option «enumType»
	MessageContent : •Oneof «enumType»
	MessageContent : •MapField «enumType»
	MessageContent : •Reserved «enumType»
	MessageContent : •emptyStatement «enumType»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «messageType»
	MessageContent : •Enum «messageType»
	MessageContent : •Message «messageType»
	MessageContent : •Option «messageType»
	MessageContent : •Oneof «messageType»
	MessageContent : •MapField «messageType»
	MessageContent : •Reserved «messageType»
	MessageContent : •emptyStatement «messageType»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Field : •Type fieldName = FieldNumber ; «}»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type fieldName = FieldNumber ; «}»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum enumName EnumBody «}»
	Message : •message messageName { } «}»
	Message : •message messageName { MessageBody } «}»
	Option : •option OptionName = constant ; «}»
	Oneof : •oneof oneofName { } «}»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	Field : •Type fieldName = FieldNumber ; «bool»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type fieldName = FieldNumber ; «bool»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum enumName EnumBody «bool»
	Message : •message messageName { } «bool»
	Message : •message messageName { MessageBody } «bool»
	Option : •option OptionName = constant ; «bool»
	Oneof : •oneof oneofName { } «bool»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type fieldName = FieldNumber ; «bytes»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type fieldName = FieldNumber ; «bytes»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum enumName EnumBody «bytes»
	Message : •message messageName { } «bytes»
	Message : •message messageName { MessageBody } «bytes»
	Option : •option OptionName = constant ; «bytes»
	Oneof : •oneof oneofName { } «bytes»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type fieldName = FieldNumber ; «double»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type fieldName = FieldNumber ; «double»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum enumName EnumBody «double»
	Message : •message messageName { } «double»
	Message : •message messageName { MessageBody } «double»
	Option : •option OptionName = constant ; «double»
	Oneof : •oneof oneofName { } «double»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type fieldName = FieldNumber ; «emptyStatement»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum enumName EnumBody «emptyStatement»
	Message : •message messageName { } «emptyStatement»
	Message : •message messageName { MessageBody } «emptyStatement»
	Option : •option OptionName = constant ; «emptyStatement»
	Oneof : •oneof oneofName { } «emptyStatement»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type fieldName = FieldNumber ; «enum»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type fieldName = FieldNumber ; «enum»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum enumName EnumBody «enum»
	Message : •message messageName { } «enum»
	Message : •message messageName { MessageBody } «enum»
	Option : •option OptionName = constant ; «enum»
	Oneof : •oneof oneofName { } «enum»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type fieldName = FieldNumber ; «enumType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Field : •repeated Type fieldName = FieldNumber ; «enumType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «enumType»
	Enum : •enum enumName EnumBody «enumType»
	Message : •message messageName { } «enumType»
	Message : •message messageName { MessageBody } «enumType»
	Option : •option OptionName = constant ; «enumType»
	Oneof : •oneof oneofName { } «enumType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «enumType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «enumType»
	Reserved : •reserved Ranges ; «enumType»
	Reserved : •reserved FieldNames ; «enumType»
	Field : •Type fieldName = FieldNumber ; «fixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber ; «fixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum enumName EnumBody «fixed32»
	Message : •message messageName { } «fixed32»
	Message : •message messageName { MessageBody } «fixed32»
	Option : •option OptionName = constant ; «fixed32»
	Oneof : •oneof oneofName { } «fixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type fieldName = FieldNumber ; «fixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber ; «fixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum enumName EnumBody «fixed64»
	Message : •message messageName { } «fixed64»
	Message : •message messageName { MessageBody } «fixed64»
	Option : •option OptionName = constant ; «fixed64»
	Oneof : •oneof oneofName { } «fixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type fieldName = FieldNumber ; «float»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type fieldName = FieldNumber ; «float»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum enumName EnumBody «float»
	Message : •message messageName { } «float»
	Message : •message messageName { MessageBody } «float»
	Option : •option OptionName = constant ; «float»
	Oneof : •oneof oneofName { } «float»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type fieldName = FieldNumber ; «int32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type fieldName = FieldNumber ; «int32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum enumName EnumBody «int32»
	Message : •message messageName { } «int32»
	Message : •message messageName { MessageBody } «int32»
	Option : •option OptionName = constant ; «int32»
	Oneof : •oneof oneofName { } «int32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type fieldName = FieldNumber ; «int64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type fieldName = FieldNumber ; «int64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum enumName EnumBody «int64»
	Message : •message messageName { } «int64»
	Message : •message messageName { MessageBody } «int64»
	Option : •option OptionName = constant ; «int64»
	Oneof : •oneof oneofName { } «int64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type fieldName = FieldNumber ; «map»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type fieldName = FieldNumber ; «map»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum enumName EnumBody «map»
	Message : •message messageName { } «map»
	Message : •message messageName { MessageBody } «map»
	Option : •option OptionName = constant ; «map»
	Oneof : •oneof oneofName { } «map»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type fieldName = FieldNumber ; «message»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type fieldName = FieldNumber ; «message»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum enumName EnumBody «message»
	Message : •message messageName { } «message»
	Message : •message messageName { MessageBody } «message»
	Option : •option OptionName = constant ; «message»
	Oneof : •oneof oneofName { } «message»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type fieldName = FieldNumber ; «messageType»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Field : •repeated Type fieldName = FieldNumber ; «messageType»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «messageType»
	Enum : •enum enumName EnumBody «messageType»
	Message : •message messageName { } «messageType»
	Message : •message messageName { MessageBody } «messageType»
	Option : •option OptionName = constant ; «messageType»
	Oneof : •oneof oneofName { } «messageType»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «messageType»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «messageType»
	Reserved : •reserved Ranges ; «messageType»
	Reserved : •reserved FieldNames ; «messageType»
	Field : •Type fieldName = FieldNumber ; «oneof»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type fieldName = FieldNumber ; «oneof»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum enumName EnumBody «oneof»
	Message : •message messageName { } «oneof»
	Message : •message messageName { MessageBody } «oneof»
	Option : •option OptionName = constant ; «oneof»
	Oneof : •oneof oneofName { } «oneof»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type fieldName = FieldNumber ; «option»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type fieldName = FieldNumber ; «option»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum enumName EnumBody «option»
	Message : •message messageName { } «option»
	Message : •message messageName { MessageBody } «option»
	Option : •option OptionName = constant ; «option»
	Oneof : •oneof oneofName { } «option»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type fieldName = FieldNumber ; «repeated»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type fieldName = FieldNumber ; «repeated»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum enumName EnumBody «repeated»
	Message : •message messageName { } «repeated»
	Message : •message messageName { MessageBody } «repeated»
	Option : •option OptionName = constant ; «repeated»
	Oneof : •oneof oneofName { } «repeated»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type fieldName = FieldNumber ; «reserved»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type fieldName = FieldNumber ; «reserved»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum enumName EnumBody «reserved»
	Message : •message messageName { } «reserved»
	Message : •message messageName { MessageBody } «reserved»
	Option : •option OptionName = constant ; «reserved»
	Oneof : •oneof oneofName { } «reserved»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type fieldName = FieldNumber ; «sfixed32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum enumName EnumBody «sfixed32»
	Message : •message messageName { } «sfixed32»
	Message : •message messageName { MessageBody } «sfixed32»
	Option : •option OptionName = constant ; «sfixed32»
	Oneof : •oneof oneofName { } «sfixed32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type fieldName = FieldNumber ; «sfixed64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum enumName EnumBody «sfixed64»
	Message : •message messageName { } «sfixed64»
	Message : •message messageName { MessageBody } «sfixed64»
	Option : •option OptionName = constant ; «sfixed64»
	Oneof : •oneof oneofName { } «sfixed64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type fieldName = FieldNumber ; «sint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type fieldName = FieldNumber ; «sint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum enumName EnumBody «sint32»
	Message : •message messageName { } «sint32»
	Message : •message messageName { MessageBody } «sint32»
	Option : •option OptionName = constant ; «sint32»
	Oneof : •oneof oneofName { } «sint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type fieldName = FieldNumber ; «sint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type fieldName = FieldNumber ; «sint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum enumName EnumBody «sint64»
	Message : •message messageName { } «sint64»
	Message : •message messageName { MessageBody } «sint64»
	Option : •option OptionName = constant ; «sint64»
	Oneof : •oneof oneofName { } «sint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type fieldName = FieldNumber ; «string»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type fieldName = FieldNumber ; «string»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum enumName EnumBody «string»
	Message : •message messageName { } «string»
	Message : •message messageName { MessageBody } «string»
	Option : •option OptionName = constant ; «string»
	Oneof : •oneof oneofName { } «string»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type fieldName = FieldNumber ; «uint32»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type fieldName = FieldNumber ; «uint32»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum enumName EnumBody «uint32»
	Message : •message messageName { } «uint32»
	Message : •message messageName { MessageBody } «uint32»
	Option : •option OptionName = constant ; «uint32»
	Oneof : •oneof oneofName { } «uint32»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type fieldName = FieldNumber ; «uint64»
	Field : •Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type fieldName = FieldNumber ; «uint64»
	Field : •repeated Type fieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum enumName EnumBody «uint64»
	Message : •message messageName { } «uint64»
	Message : •message messageName { MessageBody } «uint64»
	Option : •option OptionName = constant ; «uint64»
	Oneof : •oneof oneofName { } «uint64»
	Oneof : •oneof oneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	Type : •double «fieldName»
	Type : •float «fieldName»
	Type : •int32 «fieldName»
	Type : •int64 «fieldName»
	Type : •uint32 «fieldName»
	Type : •uint64 «fieldName»
	Type : •sint32 «fieldName»
	Type : •sint64 «fieldName»
	Type : •fixed32 «fieldName»
	Type : •fixed64 «fieldName»
	Type : •sfixed32 «fieldName»
	Type : •sfixed64 «fieldName»
	Type : •bool «fieldName»
	Type : •string «fieldName»
	Type : •bytes «fieldName»
	Type : •messageType «fieldName»
	Type : •enumType «fieldName»
}
Transitions:
	Option -> 57
	emptyStatement -> 58
	option -> 59
	Message -> 60
	Enum -> 61
	Type -> 62
	double -> 63
	float -> 64
	int32 -> 65
	int64 -> 66
	uint32 -> 67
	uint64 -> 68
	sint32 -> 69
	sint64 -> 70
	fixed32 -> 71
	fixed64 -> 72
	sfixed32 -> 73
	sfixed64 -> 74
	bool -> 75
	string -> 76
	bytes -> 77
	messageType -> 78
	enumType -> 79
	Field -> 80
	repeated -> 81
	Oneof -> 82
	oneof -> 83
	MapField -> 85
	map -> 86
	Reserved -> 87
	reserved -> 88
	enum -> 89
	message -> 90
	MessageContent -> 123
	} -> 217


S181{
	Option : option OptionName = constant •; «}»
	Option : option OptionName = constant •; «emptyStatement»
	Option : option OptionName = constant •; «option»
	Option : option OptionName = constant •; «rpc»
}
Transitions:
	; -> 218


S182{
	Rpc : rpc rpcName ( messageType •) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType •) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType •) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType •) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType •) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType •) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType •) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( messageType •) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	) -> 219


S183{
	Rpc : rpc rpcName ( stream •messageType ) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream •messageType ) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream •messageType ) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream •messageType ) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream •messageType ) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream •messageType ) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream •messageType ) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( stream •messageType ) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 220


S184{
	Option : option OptionName = constant ;• «}»
}
Transitions:


S185{
	EnumValueOption : OptionName •= constant «]»
	EnumValueOption : OptionName •= constant «,»
}
Transitions:
	= -> 221


S186{
	EnumField : ident = intLit [ EnumValueOptions •] ; «}»
	EnumValueOptions : EnumValueOptions •, EnumValueOption «]»
	EnumValueOptions : EnumValueOptions •, EnumValueOption «,»
}
Transitions:
	] -> 222
	, -> 223


S187{
	EnumValueOptions : EnumValueOption• «]»
	EnumValueOptions : EnumValueOption• «,»
}
Transitions:


S188{
	Option : option OptionName = constant ;• «}»
	Option : option OptionName = constant ;• «bool»
	Option : option OptionName = constant ;• «bytes»
	Option : option OptionName = constant ;• «double»
	Option : option OptionName = constant ;• «emptyStatement»
	Option : option OptionName = constant ;• «enum»
	Option : option OptionName = constant ;• «enumType»
	Option : option OptionName = constant ;• «fixed32»
	Option : option OptionName = constant ;• «fixed64»
	Option : option OptionName = constant ;• «float»
	Option : option OptionName = constant ;• «int32»
	Option : option OptionName = constant ;• «int64»
	Option : option OptionName = constant ;• «map»
	Option : option OptionName = constant ;• «message»
	Option : option OptionName = constant ;• «messageType»
	Option : option OptionName = constant ;• «oneof»
	Option : option OptionName = constant ;• «option»
	Option : option OptionName = constant ;• «repeated»
	Option : option OptionName = constant ;• «reserved»
	Option : option OptionName = constant ;• «sfixed32»
	Option : option OptionName = constant ;• «sfixed64»
	Option : option OptionName = constant ;• «sint32»
	Option : option OptionName = constant ;• «sint64»
	Option : option OptionName = constant ;• «string»
	Option : option OptionName = constant ;• «uint32»
	Option : option OptionName = constant ;• «uint64»
}
Transitions:


S189{
	Field : Type fieldName = FieldNumber ;• «}»
	Field : Type fieldName = FieldNumber ;• «bool»
	Field : Type fieldName = FieldNumber ;• «bytes»
	Field : Type fieldName = FieldNumber ;• «double»
	Field : Type fieldName = FieldNumber ;• «emptyStatement»
	Field : Type fieldName = FieldNumber ;• «enum»
	Field : Type fieldName = FieldNumber ;• «enumType»
	Field : Type fieldName = FieldNumber ;• «fixed32»
	Field : Type fieldName = FieldNumber ;• «fixed64»
	Field : Type fieldName = FieldNumber ;• «float»
	Field : Type fieldName = FieldNumber ;• «int32»
	Field : Type fieldName = FieldNumber ;• «int64»
	Field : Type fieldName = FieldNumber ;• «map»
	Field : Type fieldName = FieldNumber ;• «message»
	Field : Type fieldName = FieldNumber ;• «messageType»
	Field : Type fieldName = FieldNumber ;• «oneof»
	Field : Type fieldName = FieldNumber ;• «option»
	Field : Type fieldName = FieldNumber ;• «repeated»
	Field : Type fieldName = FieldNumber ;• «reserved»
	Field : Type fieldName = FieldNumber ;• «sfixed32»
	Field : Type fieldName = FieldNumber ;• «sfixed64»
	Field : Type fieldName = FieldNumber ;• «sint32»
	Field : Type fieldName = FieldNumber ;• «sint64»
	Field : Type fieldName = FieldNumber ;• «string»
	Field : Type fieldName = FieldNumber ;• «uint32»
	Field : Type fieldName = FieldNumber ;• «uint64»
}
Transitions:


S190{
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «}»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «bool»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «double»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «enum»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «enumType»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «float»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «int32»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «int64»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «map»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «message»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «messageType»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «oneof»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «option»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «repeated»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «reserved»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «string»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	Field : Type fieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = constant «,»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 224
	FieldOptions -> 225
	FieldOption -> 226


S191{
	Field : repeated Type fieldName = FieldNumber •; «}»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «}»
	Field : repeated Type fieldName = FieldNumber •; «bool»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «bool»
	Field : repeated Type fieldName = FieldNumber •; «bytes»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	Field : repeated Type fieldName = FieldNumber •; «double»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «double»
	Field : repeated Type fieldName = FieldNumber •; «emptyStatement»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	Field : repeated Type fieldName = FieldNumber •; «enum»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «enum»
	Field : repeated Type fieldName = FieldNumber •; «enumType»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «enumType»
	Field : repeated Type fieldName = FieldNumber •; «fixed32»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	Field : repeated Type fieldName = FieldNumber •; «fixed64»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	Field : repeated Type fieldName = FieldNumber •; «float»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «float»
	Field : repeated Type fieldName = FieldNumber •; «int32»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «int32»
	Field : repeated Type fieldName = FieldNumber •; «int64»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «int64»
	Field : repeated Type fieldName = FieldNumber •; «map»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «map»
	Field : repeated Type fieldName = FieldNumber •; «message»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «message»
	Field : repeated Type fieldName = FieldNumber •; «messageType»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «messageType»
	Field : repeated Type fieldName = FieldNumber •; «oneof»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «oneof»
	Field : repeated Type fieldName = FieldNumber •; «option»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «option»
	Field : repeated Type fieldName = FieldNumber •; «repeated»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «repeated»
	Field : repeated Type fieldName = FieldNumber •; «reserved»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «reserved»
	Field : repeated Type fieldName = FieldNumber •; «sfixed32»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	Field : repeated Type fieldName = FieldNumber •; «sfixed64»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	Field : repeated Type fieldName = FieldNumber •; «sint32»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	Field : repeated Type fieldName = FieldNumber •; «sint64»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	Field : repeated Type fieldName = FieldNumber •; «string»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «string»
	Field : repeated Type fieldName = FieldNumber •; «uint32»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	Field : repeated Type fieldName = FieldNumber •; «uint64»
	Field : repeated Type fieldName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 227
	[ -> 228


S192{
	OneofField : Type fieldName •= FieldNumber ; «}»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type fieldName •= FieldNumber ; «bool»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type fieldName •= FieldNumber ; «bytes»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type fieldName •= FieldNumber ; «double»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type fieldName •= FieldNumber ; «enumType»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «enumType»
	OneofField : Type fieldName •= FieldNumber ; «fixed32»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type fieldName •= FieldNumber ; «fixed64»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type fieldName •= FieldNumber ; «float»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type fieldName •= FieldNumber ; «int32»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type fieldName •= FieldNumber ; «int64»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type fieldName •= FieldNumber ; «messageType»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «messageType»
	OneofField : Type fieldName •= FieldNumber ; «sfixed32»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type fieldName •= FieldNumber ; «sfixed64»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type fieldName •= FieldNumber ; «sint32»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type fieldName •= FieldNumber ; «sint64»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type fieldName •= FieldNumber ; «string»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type fieldName •= FieldNumber ; «uint32»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type fieldName •= FieldNumber ; «uint64»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type fieldName •= FieldNumber ; «emptyStatement»
	OneofField : Type fieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
}
Transitions:
	= -> 229


S193{
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «enumType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «messageType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «emptyStatement»
}
Transitions:


S194{
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «}»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «bool»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «bytes»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «double»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «emptyStatement»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «enum»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «enumType»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «fixed32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «fixed64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «float»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «int32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «int64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «map»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «message»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «messageType»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «oneof»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «option»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «repeated»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «reserved»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «sfixed32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «sfixed64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «sint32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «sint64»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «string»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «uint32»
	Oneof : oneof oneofName { RepeatedOneOfFieldOrEmpty }• «uint64»
}
Transitions:


S195{
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «enumType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «messageType»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «emptyStatement»
}
Transitions:


S196{
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «}»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «bool»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «bytes»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «double»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «enum»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «enumType»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «float»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «int32»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «int64»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «map»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «message»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «messageType»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «oneof»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «option»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «repeated»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «reserved»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «sint32»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «sint64»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «string»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «uint32»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type •> mapName = FieldNumber ; «uint64»
	MapField : map < KeyType , Type •> mapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	> -> 230


S197{
	Type : double• «>»
}
Transitions:


S198{
	Type : float• «>»
}
Transitions:


S199{
	Type : int32• «>»
}
Transitions:


S200{
	Type : int64• «>»
}
Transitions:


S201{
	Type : uint32• «>»
}
Transitions:


S202{
	Type : uint64• «>»
}
Transitions:


S203{
	Type : sint32• «>»
}
Transitions:


S204{
	Type : sint64• «>»
}
Transitions:


S205{
	Type : fixed32• «>»
}
Transitions:


S206{
	Type : fixed64• «>»
}
Transitions:


S207{
	Type : sfixed32• «>»
}
Transitions:


S208{
	Type : sfixed64• «>»
}
Transitions:


S209{
	Type : bool• «>»
}
Transitions:


S210{
	Type : string• «>»
}
Transitions:


S211{
	Type : bytes• «>»
}
Transitions:


S212{
	Type : messageType• «>»
}
Transitions:


S213{
	Type : enumType• «>»
}
Transitions:


S214{
	EnumBody : { Option }• «}»
	EnumBody : { Option }• «bool»
	EnumBody : { Option }• «bytes»
	EnumBody : { Option }• «double»
	EnumBody : { Option }• «emptyStatement»
	EnumBody : { Option }• «enum»
	EnumBody : { Option }• «enumType»
	EnumBody : { Option }• «fixed32»
	EnumBody : { Option }• «fixed64»
	EnumBody : { Option }• «float»
	EnumBody : { Option }• «int32»
	EnumBody : { Option }• «int64»
	EnumBody : { Option }• «map»
	EnumBody : { Option }• «message»
	EnumBody : { Option }• «messageType»
	EnumBody : { Option }• «oneof»
	EnumBody : { Option }• «option»
	EnumBody : { Option }• «repeated»
	EnumBody : { Option }• «reserved»
	EnumBody : { Option }• «sfixed32»
	EnumBody : { Option }• «sfixed64»
	EnumBody : { Option }• «sint32»
	EnumBody : { Option }• «sint64»
	EnumBody : { Option }• «string»
	EnumBody : { Option }• «uint32»
	EnumBody : { Option }• «uint64»
}
Transitions:


S215{
	EnumBody : { emptyStatement }• «}»
	EnumBody : { emptyStatement }• «bool»
	EnumBody : { emptyStatement }• «bytes»
	EnumBody : { emptyStatement }• «double»
	EnumBody : { emptyStatement }• «emptyStatement»
	EnumBody : { emptyStatement }• «enum»
	EnumBody : { emptyStatement }• «enumType»
	EnumBody : { emptyStatement }• «fixed32»
	EnumBody : { emptyStatement }• «fixed64»
	EnumBody : { emptyStatement }• «float»
	EnumBody : { emptyStatement }• «int32»
	EnumBody : { emptyStatement }• «int64»
	EnumBody : { emptyStatement }• «map»
	EnumBody : { emptyStatement }• «message»
	EnumBody : { emptyStatement }• «messageType»
	EnumBody : { emptyStatement }• «oneof»
	EnumBody : { emptyStatement }• «option»
	EnumBody : { emptyStatement }• «repeated»
	EnumBody : { emptyStatement }• «reserved»
	EnumBody : { emptyStatement }• «sfixed32»
	EnumBody : { emptyStatement }• «sfixed64»
	EnumBody : { emptyStatement }• «sint32»
	EnumBody : { emptyStatement }• «sint64»
	EnumBody : { emptyStatement }• «string»
	EnumBody : { emptyStatement }• «uint32»
	EnumBody : { emptyStatement }• «uint64»
}
Transitions:


S216{
	EnumBody : { EnumField }• «}»
	EnumBody : { EnumField }• «bool»
	EnumBody : { EnumField }• «bytes»
	EnumBody : { EnumField }• «double»
	EnumBody : { EnumField }• «emptyStatement»
	EnumBody : { EnumField }• «enum»
	EnumBody : { EnumField }• «enumType»
	EnumBody : { EnumField }• «fixed32»
	EnumBody : { EnumField }• «fixed64»
	EnumBody : { EnumField }• «float»
	EnumBody : { EnumField }• «int32»
	EnumBody : { EnumField }• «int64»
	EnumBody : { EnumField }• «map»
	EnumBody : { EnumField }• «message»
	EnumBody : { EnumField }• «messageType»
	EnumBody : { EnumField }• «oneof»
	EnumBody : { EnumField }• «option»
	EnumBody : { EnumField }• «repeated»
	EnumBody : { EnumField }• «reserved»
	EnumBody : { EnumField }• «sfixed32»
	EnumBody : { EnumField }• «sfixed64»
	EnumBody : { EnumField }• «sint32»
	EnumBody : { EnumField }• «sint64»
	EnumBody : { EnumField }• «string»
	EnumBody : { EnumField }• «uint32»
	EnumBody : { EnumField }• «uint64»
}
Transitions:


S217{
	Message : message messageName { MessageBody }• «}»
	Message : message messageName { MessageBody }• «bool»
	Message : message messageName { MessageBody }• «bytes»
	Message : message messageName { MessageBody }• «double»
	Message : message messageName { MessageBody }• «emptyStatement»
	Message : message messageName { MessageBody }• «enum»
	Message : message messageName { MessageBody }• «enumType»
	Message : message messageName { MessageBody }• «fixed32»
	Message : message messageName { MessageBody }• «fixed64»
	Message : message messageName { MessageBody }• «float»
	Message : message messageName { MessageBody }• «int32»
	Message : message messageName { MessageBody }• «int64»
	Message : message messageName { MessageBody }• «map»
	Message : message messageName { MessageBody }• «message»
	Message : message messageName { MessageBody }• «messageType»
	Message : message messageName { MessageBody }• «oneof»
	Message : message messageName { MessageBody }• «option»
	Message : message messageName { MessageBody }• «repeated»
	Message : message messageName { MessageBody }• «reserved»
	Message : message messageName { MessageBody }• «sfixed32»
	Message : message messageName { MessageBody }• «sfixed64»
	Message : message messageName { MessageBody }• «sint32»
	Message : message messageName { MessageBody }• «sint64»
	Message : message messageName { MessageBody }• «string»
	Message : message messageName { MessageBody }• «uint32»
	Message : message messageName { MessageBody }• «uint64»
}
Transitions:


S218{
	Option : option OptionName = constant ;• «}»
	Option : option OptionName = constant ;• «emptyStatement»
	Option : option OptionName = constant ;• «option»
	Option : option OptionName = constant ;• «rpc»
}
Transitions:


S219{
	Rpc : rpc rpcName ( messageType ) •returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) •returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) •returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) •returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) •returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) •returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) •returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( messageType ) •returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	returns -> 231


S220{
	Rpc : rpc rpcName ( stream messageType •) returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType •) returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType •) returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType •) returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType •) returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType •) returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType •) returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( stream messageType •) returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	) -> 232


S221{
	EnumValueOption : OptionName = •constant «]»
	EnumValueOption : OptionName = •constant «,»
}
Transitions:
	constant -> 233


S222{
	EnumField : ident = intLit [ EnumValueOptions ] •; «}»
}
Transitions:
	; -> 234


S223{
	EnumValueOptions : EnumValueOptions , •EnumValueOption «]»
	EnumValueOptions : EnumValueOptions , •EnumValueOption «,»
	EnumValueOption : •OptionName = constant «]»
	EnumValueOption : •OptionName = constant «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 185
	EnumValueOption -> 235


S224{
	FieldOption : OptionName •= constant «]»
	FieldOption : OptionName •= constant «,»
}
Transitions:
	= -> 236


S225{
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «}»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «bool»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «bytes»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «double»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «enum»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «enumType»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «float»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «int32»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «int64»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «map»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «message»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «messageType»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «oneof»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «option»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «repeated»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «reserved»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «sint32»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «sint64»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «string»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «uint32»
	Field : Type fieldName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	] -> 237
	, -> 238


S226{
	FieldOptions : FieldOption• «]»
	FieldOptions : FieldOption• «,»
}
Transitions:


S227{
	Field : repeated Type fieldName = FieldNumber ;• «}»
	Field : repeated Type fieldName = FieldNumber ;• «bool»
	Field : repeated Type fieldName = FieldNumber ;• «bytes»
	Field : repeated Type fieldName = FieldNumber ;• «double»
	Field : repeated Type fieldName = FieldNumber ;• «emptyStatement»
	Field : repeated Type fieldName = FieldNumber ;• «enum»
	Field : repeated Type fieldName = FieldNumber ;• «enumType»
	Field : repeated Type fieldName = FieldNumber ;• «fixed32»
	Field : repeated Type fieldName = FieldNumber ;• «fixed64»
	Field : repeated Type fieldName = FieldNumber ;• «float»
	Field : repeated Type fieldName = FieldNumber ;• «int32»
	Field : repeated Type fieldName = FieldNumber ;• «int64»
	Field : repeated Type fieldName = FieldNumber ;• «map»
	Field : repeated Type fieldName = FieldNumber ;• «message»
	Field : repeated Type fieldName = FieldNumber ;• «messageType»
	Field : repeated Type fieldName = FieldNumber ;• «oneof»
	Field : repeated Type fieldName = FieldNumber ;• «option»
	Field : repeated Type fieldName = FieldNumber ;• «repeated»
	Field : repeated Type fieldName = FieldNumber ;• «reserved»
	Field : repeated Type fieldName = FieldNumber ;• «sfixed32»
	Field : repeated Type fieldName = FieldNumber ;• «sfixed64»
	Field : repeated Type fieldName = FieldNumber ;• «sint32»
	Field : repeated Type fieldName = FieldNumber ;• «sint64»
	Field : repeated Type fieldName = FieldNumber ;• «string»
	Field : repeated Type fieldName = FieldNumber ;• «uint32»
	Field : repeated Type fieldName = FieldNumber ;• «uint64»
}
Transitions:


S228{
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «}»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «bool»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «double»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «enum»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «enumType»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «float»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «int32»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «int64»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «map»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «message»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «messageType»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «oneof»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «option»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «repeated»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «reserved»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «string»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	Field : repeated Type fieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = constant «,»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 224
	FieldOption -> 226
	FieldOptions -> 239


S229{
	OneofField : Type fieldName = •FieldNumber ; «}»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type fieldName = •FieldNumber ; «bool»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type fieldName = •FieldNumber ; «bytes»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type fieldName = •FieldNumber ; «double»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type fieldName = •FieldNumber ; «enumType»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «enumType»
	OneofField : Type fieldName = •FieldNumber ; «fixed32»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type fieldName = •FieldNumber ; «fixed64»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type fieldName = •FieldNumber ; «float»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type fieldName = •FieldNumber ; «int32»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type fieldName = •FieldNumber ; «int64»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type fieldName = •FieldNumber ; «messageType»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «messageType»
	OneofField : Type fieldName = •FieldNumber ; «sfixed32»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type fieldName = •FieldNumber ; «sfixed64»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type fieldName = •FieldNumber ; «sint32»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type fieldName = •FieldNumber ; «sint64»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type fieldName = •FieldNumber ; «string»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type fieldName = •FieldNumber ; «uint32»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type fieldName = •FieldNumber ; «uint64»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type fieldName = •FieldNumber ; «emptyStatement»
	OneofField : Type fieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 163
	FieldNumber -> 240


S230{
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «}»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «bool»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «bytes»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «double»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «enum»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «enumType»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «float»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «int32»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «int64»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «map»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «message»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «messageType»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «oneof»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «option»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «repeated»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «reserved»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «sint32»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «sint64»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «string»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «uint32»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > •mapName = FieldNumber ; «uint64»
	MapField : map < KeyType , Type > •mapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	mapName -> 241


S231{
	Rpc : rpc rpcName ( messageType ) returns •( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns •( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns •( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns •( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns •( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns •( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns •( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( messageType ) returns •( stream messageType ) RpcBodies «rpc»
}
Transitions:
	( -> 242


S232{
	Rpc : rpc rpcName ( stream messageType ) •returns ( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) •returns ( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) •returns ( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) •returns ( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) •returns ( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) •returns ( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) •returns ( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( stream messageType ) •returns ( stream messageType ) RpcBodies «rpc»
}
Transitions:
	returns -> 243


S233{
	EnumValueOption : OptionName = constant• «]»
	EnumValueOption : OptionName = constant• «,»
}
Transitions:


S234{
	EnumField : ident = intLit [ EnumValueOptions ] ;• «}»
}
Transitions:


S235{
	EnumValueOptions : EnumValueOptions , EnumValueOption• «]»
	EnumValueOptions : EnumValueOptions , EnumValueOption• «,»
}
Transitions:


S236{
	FieldOption : OptionName = •constant «]»
	FieldOption : OptionName = •constant «,»
}
Transitions:
	constant -> 244


S237{
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «}»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «bool»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «bytes»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «double»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «enum»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «enumType»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «float»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «int32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «int64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «map»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «message»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «messageType»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «oneof»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «option»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «repeated»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «reserved»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «sint32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «sint64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «string»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «uint32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 245


S238{
	FieldOptions : FieldOptions , •FieldOption «]»
	FieldOptions : FieldOptions , •FieldOption «,»
	FieldOption : •OptionName = constant «]»
	FieldOption : •OptionName = constant «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 224
	FieldOption -> 246


S239{
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «}»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «bool»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «bytes»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «double»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «enum»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «enumType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «float»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «int32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «int64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «map»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «message»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «messageType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «oneof»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «option»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «repeated»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «reserved»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «sint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «sint64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «string»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «uint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 238
	] -> 247


S240{
	OneofField : Type fieldName = FieldNumber •; «}»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «}»
	OneofField : Type fieldName = FieldNumber •; «bool»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «bool»
	OneofField : Type fieldName = FieldNumber •; «bytes»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	OneofField : Type fieldName = FieldNumber •; «double»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «double»
	OneofField : Type fieldName = FieldNumber •; «enumType»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «enumType»
	OneofField : Type fieldName = FieldNumber •; «fixed32»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	OneofField : Type fieldName = FieldNumber •; «fixed64»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	OneofField : Type fieldName = FieldNumber •; «float»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «float»
	OneofField : Type fieldName = FieldNumber •; «int32»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «int32»
	OneofField : Type fieldName = FieldNumber •; «int64»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «int64»
	OneofField : Type fieldName = FieldNumber •; «messageType»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «messageType»
	OneofField : Type fieldName = FieldNumber •; «sfixed32»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	OneofField : Type fieldName = FieldNumber •; «sfixed64»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	OneofField : Type fieldName = FieldNumber •; «sint32»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	OneofField : Type fieldName = FieldNumber •; «sint64»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	OneofField : Type fieldName = FieldNumber •; «string»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «string»
	OneofField : Type fieldName = FieldNumber •; «uint32»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	OneofField : Type fieldName = FieldNumber •; «uint64»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «uint64»
	OneofField : Type fieldName = FieldNumber •; «emptyStatement»
	OneofField : Type fieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
}
Transitions:
	; -> 248
	[ -> 249


S241{
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «}»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «bool»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «bytes»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «double»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «enum»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «enumType»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «float»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «int32»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «int64»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «map»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «message»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «messageType»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «oneof»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «option»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «repeated»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «reserved»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «sint32»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «sint64»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «string»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «uint32»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > mapName •= FieldNumber ; «uint64»
	MapField : map < KeyType , Type > mapName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 250


S242{
	Rpc : rpc rpcName ( messageType ) returns ( •messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( •stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( •messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( •stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( •messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( •stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( •messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( messageType ) returns ( •stream messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 251
	stream -> 252


S243{
	Rpc : rpc rpcName ( stream messageType ) returns •( messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns •( stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns •( messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns •( stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns •( messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns •( stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns •( messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( stream messageType ) returns •( stream messageType ) RpcBodies «rpc»
}
Transitions:
	( -> 253


S244{
	FieldOption : OptionName = constant• «]»
	FieldOption : OptionName = constant• «,»
}
Transitions:


S245{
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «}»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «bool»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «double»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «enum»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «enumType»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «float»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «int32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «int64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «map»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «message»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «messageType»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «oneof»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «option»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «repeated»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «reserved»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «string»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	Field : Type fieldName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S246{
	FieldOptions : FieldOptions , FieldOption• «]»
	FieldOptions : FieldOptions , FieldOption• «,»
}
Transitions:


S247{
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «}»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «bool»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «bytes»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «double»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «enum»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «enumType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «float»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «int32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «int64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «map»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «message»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «messageType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «oneof»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «option»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «repeated»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «reserved»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «sint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «sint64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «string»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «uint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 254


S248{
	OneofField : Type fieldName = FieldNumber ;• «}»
	OneofField : Type fieldName = FieldNumber ;• «bool»
	OneofField : Type fieldName = FieldNumber ;• «bytes»
	OneofField : Type fieldName = FieldNumber ;• «double»
	OneofField : Type fieldName = FieldNumber ;• «enumType»
	OneofField : Type fieldName = FieldNumber ;• «fixed32»
	OneofField : Type fieldName = FieldNumber ;• «fixed64»
	OneofField : Type fieldName = FieldNumber ;• «float»
	OneofField : Type fieldName = FieldNumber ;• «int32»
	OneofField : Type fieldName = FieldNumber ;• «int64»
	OneofField : Type fieldName = FieldNumber ;• «messageType»
	OneofField : Type fieldName = FieldNumber ;• «sfixed32»
	OneofField : Type fieldName = FieldNumber ;• «sfixed64»
	OneofField : Type fieldName = FieldNumber ;• «sint32»
	OneofField : Type fieldName = FieldNumber ;• «sint64»
	OneofField : Type fieldName = FieldNumber ;• «string»
	OneofField : Type fieldName = FieldNumber ;• «uint32»
	OneofField : Type fieldName = FieldNumber ;• «uint64»
	OneofField : Type fieldName = FieldNumber ;• «emptyStatement»
}
Transitions:


S249{
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «}»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «bool»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «double»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «enumType»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «float»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «int32»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «int64»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «messageType»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «string»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	OneofField : Type fieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = constant «,»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 224
	FieldOption -> 226
	FieldOptions -> 255


S250{
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «}»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «bool»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «bytes»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «double»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «enum»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «enumType»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «float»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «int32»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «int64»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «map»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «message»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «messageType»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «oneof»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «option»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «repeated»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «reserved»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «sint32»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «sint64»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «string»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «uint32»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > mapName = •FieldNumber ; «uint64»
	MapField : map < KeyType , Type > mapName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 163
	FieldNumber -> 256


S251{
	Rpc : rpc rpcName ( messageType ) returns ( messageType •) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( messageType •) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( messageType •) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( messageType •) RpcBodies «rpc»
}
Transitions:
	) -> 257


S252{
	Rpc : rpc rpcName ( messageType ) returns ( stream •messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( stream •messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( stream •messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( stream •messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 258


S253{
	Rpc : rpc rpcName ( stream messageType ) returns ( •messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( •stream messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( •messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( •stream messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( •messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( •stream messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( •messageType ) RpcBodies «rpc»
	Rpc : rpc rpcName ( stream messageType ) returns ( •stream messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 259
	stream -> 260


S254{
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «}»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «bool»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «double»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «enum»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «enumType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «float»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «int32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «int64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «map»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «message»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «messageType»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «oneof»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «option»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «repeated»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «reserved»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «string»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	Field : repeated Type fieldName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S255{
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «}»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «bool»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «bytes»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «double»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «enumType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «float»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «int32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «int64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «messageType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «sint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «sint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «string»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «uint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «uint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 238
	] -> 261


S256{
	MapField : map < KeyType , Type > mapName = FieldNumber •; «}»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «double»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «float»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «map»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «message»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «option»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «string»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber •; «uint64»
	MapField : map < KeyType , Type > mapName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 262
	[ -> 263


S257{
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) •RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) •RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) •RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 264
	{ -> 265
	RpcBodies -> 266


S258{
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType •) RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType •) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType •) RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType •) RpcBodies «rpc»
}
Transitions:
	) -> 267


S259{
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType •) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType •) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType •) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType •) RpcBodies «rpc»
}
Transitions:
	) -> 268


S260{
	Rpc : rpc rpcName ( stream messageType ) returns ( stream •messageType ) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream •messageType ) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream •messageType ) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream •messageType ) RpcBodies «rpc»
}
Transitions:
	messageType -> 269


S261{
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «}»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «bool»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «bytes»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «double»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «enumType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «float»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «int32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «int64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «messageType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «sint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «sint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «string»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «uint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «uint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
}
Transitions:
	; -> 270


S262{
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «}»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «double»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «float»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «map»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «message»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «option»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «string»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber ;• «uint64»
}
Transitions:


S263{
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «}»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «double»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «float»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «map»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «message»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «option»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «string»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = constant «,»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 224
	FieldOption -> 226
	FieldOptions -> 271


S264{
	RpcBodies : ;• «}»
	RpcBodies : ;• «emptyStatement»
	RpcBodies : ;• «option»
	RpcBodies : ;• «rpc»
}
Transitions:


S265{
	RpcBodies : { •} «}»
	RpcBodies : { •RpcBody } «}»
	RpcBodies : { •} «emptyStatement»
	RpcBodies : { •RpcBody } «emptyStatement»
	RpcBodies : { •} «option»
	RpcBodies : { •RpcBody } «option»
	RpcBodies : { •} «rpc»
	RpcBodies : { •RpcBody } «rpc»
	RpcBody : •Option «}»
	RpcBody : •emptyStatement «}»
	RpcBody : •RpcBody Option «}»
	RpcBody : •RpcBody emptyStatement «}»
	Option : •option OptionName = constant ; «}»
	RpcBody : •Option «option»
	RpcBody : •emptyStatement «option»
	RpcBody : •RpcBody Option «option»
	RpcBody : •RpcBody emptyStatement «option»
	RpcBody : •Option «emptyStatement»
	RpcBody : •emptyStatement «emptyStatement»
	RpcBody : •RpcBody Option «emptyStatement»
	RpcBody : •RpcBody emptyStatement «emptyStatement»
	Option : •option OptionName = constant ; «option»
	Option : •option OptionName = constant ; «emptyStatement»
}
Transitions:
	Option -> 272
	emptyStatement -> 273
	option -> 274
	} -> 275
	RpcBody -> 276


S266{
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) RpcBodies• «}»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) RpcBodies• «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) RpcBodies• «option»
	Rpc : rpc rpcName ( messageType ) returns ( messageType ) RpcBodies• «rpc»
}
Transitions:


S267{
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) •RpcBodies «}»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) •RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) •RpcBodies «option»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 264
	{ -> 265
	RpcBodies -> 277


S268{
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) •RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) •RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) •RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 264
	{ -> 265
	RpcBodies -> 278


S269{
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType •) RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType •) RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType •) RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType •) RpcBodies «rpc»
}
Transitions:
	) -> 279


S270{
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «}»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «bool»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «double»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «enumType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «float»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «int32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «int64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «messageType»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «string»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «uint64»
	OneofField : Type fieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
}
Transitions:


S271{
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «}»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «double»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «float»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «map»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «message»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «option»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «string»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 238
	] -> 280


S272{
	RpcBody : Option• «}»
	RpcBody : Option• «option»
	RpcBody : Option• «emptyStatement»
}
Transitions:


S273{
	RpcBody : emptyStatement• «}»
	RpcBody : emptyStatement• «option»
	RpcBody : emptyStatement• «emptyStatement»
}
Transitions:


S274{
	Option : option •OptionName = constant ; «}»
	Option : option •OptionName = constant ; «option»
	Option : option •OptionName = constant ; «emptyStatement»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( fullIdent ) «=»
	OptionName : •( fullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 26
	( -> 27
	OptionName -> 281


S275{
	RpcBodies : { }• «}»
	RpcBodies : { }• «emptyStatement»
	RpcBodies : { }• «option»
	RpcBodies : { }• «rpc»
}
Transitions:


S276{
	RpcBodies : { RpcBody •} «}»
	RpcBodies : { RpcBody •} «emptyStatement»
	RpcBodies : { RpcBody •} «option»
	RpcBodies : { RpcBody •} «rpc»
	RpcBody : RpcBody •Option «}»
	RpcBody : RpcBody •emptyStatement «}»
	RpcBody : RpcBody •Option «option»
	RpcBody : RpcBody •emptyStatement «option»
	RpcBody : RpcBody •Option «emptyStatement»
	RpcBody : RpcBody •emptyStatement «emptyStatement»
	Option : •option OptionName = constant ; «}»
	Option : •option OptionName = constant ; «option»
	Option : •option OptionName = constant ; «emptyStatement»
}
Transitions:
	option -> 274
	Option -> 282
	emptyStatement -> 283
	} -> 284


S277{
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies• «}»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies• «emptyStatement»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies• «option»
	Rpc : rpc rpcName ( messageType ) returns ( stream messageType ) RpcBodies• «rpc»
}
Transitions:


S278{
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies• «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies• «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies• «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( messageType ) RpcBodies• «rpc»
}
Transitions:


S279{
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) •RpcBodies «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) •RpcBodies «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) •RpcBodies «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 264
	{ -> 265
	RpcBodies -> 285


S280{
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «}»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «double»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «float»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «map»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «message»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «option»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «string»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 286


S281{
	Option : option OptionName •= constant ; «}»
	Option : option OptionName •= constant ; «option»
	Option : option OptionName •= constant ; «emptyStatement»
}
Transitions:
	= -> 287


S282{
	RpcBody : RpcBody Option• «}»
	RpcBody : RpcBody Option• «option»
	RpcBody : RpcBody Option• «emptyStatement»
}
Transitions:


S283{
	RpcBody : RpcBody emptyStatement• «}»
	RpcBody : RpcBody emptyStatement• «option»
	RpcBody : RpcBody emptyStatement• «emptyStatement»
}
Transitions:


S284{
	RpcBodies : { RpcBody }• «}»
	RpcBodies : { RpcBody }• «emptyStatement»
	RpcBodies : { RpcBody }• «option»
	RpcBodies : { RpcBody }• «rpc»
}
Transitions:


S285{
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies• «}»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies• «emptyStatement»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies• «option»
	Rpc : rpc rpcName ( stream messageType ) returns ( stream messageType ) RpcBodies• «rpc»
}
Transitions:


S286{
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «}»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «bool»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «bytes»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «double»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «enum»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «enumType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «fixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «fixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «float»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «int32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «int64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «map»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «message»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «messageType»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «oneof»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «option»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «repeated»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «reserved»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «sint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «sint64»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «string»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «uint32»
	MapField : map < KeyType , Type > mapName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S287{
	Option : option OptionName = •constant ; «}»
	Option : option OptionName = •constant ; «option»
	Option : option OptionName = •constant ; «emptyStatement»
}
Transitions:
	constant -> 288


S288{
	Option : option OptionName = constant •; «}»
	Option : option OptionName = constant •; «option»
	Option : option OptionName = constant •; «emptyStatement»
}
Transitions:
	; -> 289


S289{
	Option : option OptionName = constant ;• «}»
	Option : option OptionName = constant ;• «option»
	Option : option OptionName = constant ;• «emptyStatement»
}
Transitions:


