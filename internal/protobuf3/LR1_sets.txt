S0{
	S' : •Proto «$»
	Proto : •Syntax «$»
	Proto : •Syntax ProtoContents «$»
	Syntax : •syntax = quote proto3 quote ; «$»
	Syntax : •syntax = quote proto3 quote ; «emptyStatement»
	Syntax : •syntax = quote proto3 quote ; «enum»
	Syntax : •syntax = quote proto3 quote ; «import»
	Syntax : •syntax = quote proto3 quote ; «message»
	Syntax : •syntax = quote proto3 quote ; «option»
	Syntax : •syntax = quote proto3 quote ; «package»
	Syntax : •syntax = quote proto3 quote ; «service»
}
Transitions:
	Proto -> 1
	Syntax -> 2
	syntax -> 3


S1{
	S' : Proto• «$»
}
Transitions:


S2{
	Proto : Syntax• «$»
	Proto : Syntax •ProtoContents «$»
	ProtoContents : •ProtoContent «$»
	ProtoContents : •ProtoContents ProtoContent «$»
	ProtoContent : •Import «$»
	ProtoContent : •Package «$»
	ProtoContent : •Option «$»
	ProtoContent : •TopLevelDef «$»
	ProtoContent : •emptyStatement «$»
	ProtoContents : •ProtoContent «emptyStatement»
	ProtoContents : •ProtoContent «enum»
	ProtoContents : •ProtoContent «import»
	ProtoContents : •ProtoContent «message»
	ProtoContents : •ProtoContent «option»
	ProtoContents : •ProtoContent «package»
	ProtoContents : •ProtoContent «service»
	ProtoContents : •ProtoContents ProtoContent «emptyStatement»
	ProtoContents : •ProtoContents ProtoContent «enum»
	ProtoContents : •ProtoContents ProtoContent «import»
	ProtoContents : •ProtoContents ProtoContent «message»
	ProtoContents : •ProtoContents ProtoContent «option»
	ProtoContents : •ProtoContents ProtoContent «package»
	ProtoContents : •ProtoContents ProtoContent «service»
	Import : •import ImportState strLit ; «$»
	Package : •package FullIdent ; «$»
	Option : •option OptionName = Constant ; «$»
	TopLevelDef : •Message «$»
	TopLevelDef : •Enum «$»
	TopLevelDef : •Service «$»
	ProtoContent : •Import «emptyStatement»
	ProtoContent : •Package «emptyStatement»
	ProtoContent : •Option «emptyStatement»
	ProtoContent : •TopLevelDef «emptyStatement»
	ProtoContent : •emptyStatement «emptyStatement»
	ProtoContent : •Import «enum»
	ProtoContent : •Package «enum»
	ProtoContent : •Option «enum»
	ProtoContent : •TopLevelDef «enum»
	ProtoContent : •emptyStatement «enum»
	ProtoContent : •Import «import»
	ProtoContent : •Package «import»
	ProtoContent : •Option «import»
	ProtoContent : •TopLevelDef «import»
	ProtoContent : •emptyStatement «import»
	ProtoContent : •Import «message»
	ProtoContent : •Package «message»
	ProtoContent : •Option «message»
	ProtoContent : •TopLevelDef «message»
	ProtoContent : •emptyStatement «message»
	ProtoContent : •Import «option»
	ProtoContent : •Package «option»
	ProtoContent : •Option «option»
	ProtoContent : •TopLevelDef «option»
	ProtoContent : •emptyStatement «option»
	ProtoContent : •Import «package»
	ProtoContent : •Package «package»
	ProtoContent : •Option «package»
	ProtoContent : •TopLevelDef «package»
	ProtoContent : •emptyStatement «package»
	ProtoContent : •Import «service»
	ProtoContent : •Package «service»
	ProtoContent : •Option «service»
	ProtoContent : •TopLevelDef «service»
	ProtoContent : •emptyStatement «service»
	Message : •message MessageName { } «$»
	Message : •message MessageName { MessageBody } «$»
	Enum : •enum EnumName EnumBody «$»
	Service : •service ServiceName { } «$»
	Service : •service ServiceName { ServiceBodies } «$»
	Import : •import ImportState strLit ; «emptyStatement»
	Package : •package FullIdent ; «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	TopLevelDef : •Message «emptyStatement»
	TopLevelDef : •Enum «emptyStatement»
	TopLevelDef : •Service «emptyStatement»
	Import : •import ImportState strLit ; «enum»
	Package : •package FullIdent ; «enum»
	Option : •option OptionName = Constant ; «enum»
	TopLevelDef : •Message «enum»
	TopLevelDef : •Enum «enum»
	TopLevelDef : •Service «enum»
	Import : •import ImportState strLit ; «import»
	Package : •package FullIdent ; «import»
	Option : •option OptionName = Constant ; «import»
	TopLevelDef : •Message «import»
	TopLevelDef : •Enum «import»
	TopLevelDef : •Service «import»
	Import : •import ImportState strLit ; «message»
	Package : •package FullIdent ; «message»
	Option : •option OptionName = Constant ; «message»
	TopLevelDef : •Message «message»
	TopLevelDef : •Enum «message»
	TopLevelDef : •Service «message»
	Import : •import ImportState strLit ; «option»
	Package : •package FullIdent ; «option»
	Option : •option OptionName = Constant ; «option»
	TopLevelDef : •Message «option»
	TopLevelDef : •Enum «option»
	TopLevelDef : •Service «option»
	Import : •import ImportState strLit ; «package»
	Package : •package FullIdent ; «package»
	Option : •option OptionName = Constant ; «package»
	TopLevelDef : •Message «package»
	TopLevelDef : •Enum «package»
	TopLevelDef : •Service «package»
	Import : •import ImportState strLit ; «service»
	Package : •package FullIdent ; «service»
	Option : •option OptionName = Constant ; «service»
	TopLevelDef : •Message «service»
	TopLevelDef : •Enum «service»
	TopLevelDef : •Service «service»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Service : •service ServiceName { } «emptyStatement»
	Service : •service ServiceName { ServiceBodies } «emptyStatement»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Enum : •enum EnumName EnumBody «enum»
	Service : •service ServiceName { } «enum»
	Service : •service ServiceName { ServiceBodies } «enum»
	Message : •message MessageName { } «import»
	Message : •message MessageName { MessageBody } «import»
	Enum : •enum EnumName EnumBody «import»
	Service : •service ServiceName { } «import»
	Service : •service ServiceName { ServiceBodies } «import»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Enum : •enum EnumName EnumBody «message»
	Service : •service ServiceName { } «message»
	Service : •service ServiceName { ServiceBodies } «message»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Enum : •enum EnumName EnumBody «option»
	Service : •service ServiceName { } «option»
	Service : •service ServiceName { ServiceBodies } «option»
	Message : •message MessageName { } «package»
	Message : •message MessageName { MessageBody } «package»
	Enum : •enum EnumName EnumBody «package»
	Service : •service ServiceName { } «package»
	Service : •service ServiceName { ServiceBodies } «package»
	Message : •message MessageName { } «service»
	Message : •message MessageName { MessageBody } «service»
	Enum : •enum EnumName EnumBody «service»
	Service : •service ServiceName { } «service»
	Service : •service ServiceName { ServiceBodies } «service»
}
Transitions:
	ProtoContents -> 4
	ProtoContent -> 5
	Import -> 6
	Package -> 7
	Option -> 8
	TopLevelDef -> 9
	emptyStatement -> 10
	import -> 11
	package -> 12
	option -> 13
	Message -> 14
	Enum -> 15
	Service -> 16
	enum -> 17
	message -> 18
	service -> 19


S3{
	Syntax : syntax •= quote proto3 quote ; «$»
	Syntax : syntax •= quote proto3 quote ; «emptyStatement»
	Syntax : syntax •= quote proto3 quote ; «enum»
	Syntax : syntax •= quote proto3 quote ; «import»
	Syntax : syntax •= quote proto3 quote ; «message»
	Syntax : syntax •= quote proto3 quote ; «option»
	Syntax : syntax •= quote proto3 quote ; «package»
	Syntax : syntax •= quote proto3 quote ; «service»
}
Transitions:
	= -> 20


S4{
	Proto : Syntax ProtoContents• «$»
	ProtoContents : ProtoContents •ProtoContent «$»
	ProtoContents : ProtoContents •ProtoContent «emptyStatement»
	ProtoContents : ProtoContents •ProtoContent «enum»
	ProtoContents : ProtoContents •ProtoContent «import»
	ProtoContents : ProtoContents •ProtoContent «message»
	ProtoContents : ProtoContents •ProtoContent «option»
	ProtoContents : ProtoContents •ProtoContent «package»
	ProtoContents : ProtoContents •ProtoContent «service»
	ProtoContent : •Import «$»
	ProtoContent : •Package «$»
	ProtoContent : •Option «$»
	ProtoContent : •TopLevelDef «$»
	ProtoContent : •emptyStatement «$»
	ProtoContent : •Import «emptyStatement»
	ProtoContent : •Package «emptyStatement»
	ProtoContent : •Option «emptyStatement»
	ProtoContent : •TopLevelDef «emptyStatement»
	ProtoContent : •emptyStatement «emptyStatement»
	ProtoContent : •Import «enum»
	ProtoContent : •Package «enum»
	ProtoContent : •Option «enum»
	ProtoContent : •TopLevelDef «enum»
	ProtoContent : •emptyStatement «enum»
	ProtoContent : •Import «import»
	ProtoContent : •Package «import»
	ProtoContent : •Option «import»
	ProtoContent : •TopLevelDef «import»
	ProtoContent : •emptyStatement «import»
	ProtoContent : •Import «message»
	ProtoContent : •Package «message»
	ProtoContent : •Option «message»
	ProtoContent : •TopLevelDef «message»
	ProtoContent : •emptyStatement «message»
	ProtoContent : •Import «option»
	ProtoContent : •Package «option»
	ProtoContent : •Option «option»
	ProtoContent : •TopLevelDef «option»
	ProtoContent : •emptyStatement «option»
	ProtoContent : •Import «package»
	ProtoContent : •Package «package»
	ProtoContent : •Option «package»
	ProtoContent : •TopLevelDef «package»
	ProtoContent : •emptyStatement «package»
	ProtoContent : •Import «service»
	ProtoContent : •Package «service»
	ProtoContent : •Option «service»
	ProtoContent : •TopLevelDef «service»
	ProtoContent : •emptyStatement «service»
	Import : •import ImportState strLit ; «$»
	Package : •package FullIdent ; «$»
	Option : •option OptionName = Constant ; «$»
	TopLevelDef : •Message «$»
	TopLevelDef : •Enum «$»
	TopLevelDef : •Service «$»
	Import : •import ImportState strLit ; «emptyStatement»
	Package : •package FullIdent ; «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	TopLevelDef : •Message «emptyStatement»
	TopLevelDef : •Enum «emptyStatement»
	TopLevelDef : •Service «emptyStatement»
	Import : •import ImportState strLit ; «enum»
	Package : •package FullIdent ; «enum»
	Option : •option OptionName = Constant ; «enum»
	TopLevelDef : •Message «enum»
	TopLevelDef : •Enum «enum»
	TopLevelDef : •Service «enum»
	Import : •import ImportState strLit ; «import»
	Package : •package FullIdent ; «import»
	Option : •option OptionName = Constant ; «import»
	TopLevelDef : •Message «import»
	TopLevelDef : •Enum «import»
	TopLevelDef : •Service «import»
	Import : •import ImportState strLit ; «message»
	Package : •package FullIdent ; «message»
	Option : •option OptionName = Constant ; «message»
	TopLevelDef : •Message «message»
	TopLevelDef : •Enum «message»
	TopLevelDef : •Service «message»
	Import : •import ImportState strLit ; «option»
	Package : •package FullIdent ; «option»
	Option : •option OptionName = Constant ; «option»
	TopLevelDef : •Message «option»
	TopLevelDef : •Enum «option»
	TopLevelDef : •Service «option»
	Import : •import ImportState strLit ; «package»
	Package : •package FullIdent ; «package»
	Option : •option OptionName = Constant ; «package»
	TopLevelDef : •Message «package»
	TopLevelDef : •Enum «package»
	TopLevelDef : •Service «package»
	Import : •import ImportState strLit ; «service»
	Package : •package FullIdent ; «service»
	Option : •option OptionName = Constant ; «service»
	TopLevelDef : •Message «service»
	TopLevelDef : •Enum «service»
	TopLevelDef : •Service «service»
	Message : •message MessageName { } «$»
	Message : •message MessageName { MessageBody } «$»
	Enum : •enum EnumName EnumBody «$»
	Service : •service ServiceName { } «$»
	Service : •service ServiceName { ServiceBodies } «$»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Service : •service ServiceName { } «emptyStatement»
	Service : •service ServiceName { ServiceBodies } «emptyStatement»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Enum : •enum EnumName EnumBody «enum»
	Service : •service ServiceName { } «enum»
	Service : •service ServiceName { ServiceBodies } «enum»
	Message : •message MessageName { } «import»
	Message : •message MessageName { MessageBody } «import»
	Enum : •enum EnumName EnumBody «import»
	Service : •service ServiceName { } «import»
	Service : •service ServiceName { ServiceBodies } «import»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Enum : •enum EnumName EnumBody «message»
	Service : •service ServiceName { } «message»
	Service : •service ServiceName { ServiceBodies } «message»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Enum : •enum EnumName EnumBody «option»
	Service : •service ServiceName { } «option»
	Service : •service ServiceName { ServiceBodies } «option»
	Message : •message MessageName { } «package»
	Message : •message MessageName { MessageBody } «package»
	Enum : •enum EnumName EnumBody «package»
	Service : •service ServiceName { } «package»
	Service : •service ServiceName { ServiceBodies } «package»
	Message : •message MessageName { } «service»
	Message : •message MessageName { MessageBody } «service»
	Enum : •enum EnumName EnumBody «service»
	Service : •service ServiceName { } «service»
	Service : •service ServiceName { ServiceBodies } «service»
}
Transitions:
	Import -> 6
	Package -> 7
	Option -> 8
	TopLevelDef -> 9
	emptyStatement -> 10
	import -> 11
	package -> 12
	option -> 13
	Message -> 14
	Enum -> 15
	Service -> 16
	enum -> 17
	message -> 18
	service -> 19
	ProtoContent -> 21


S5{
	ProtoContents : ProtoContent• «$»
	ProtoContents : ProtoContent• «emptyStatement»
	ProtoContents : ProtoContent• «enum»
	ProtoContents : ProtoContent• «import»
	ProtoContents : ProtoContent• «message»
	ProtoContents : ProtoContent• «option»
	ProtoContents : ProtoContent• «package»
	ProtoContents : ProtoContent• «service»
}
Transitions:


S6{
	ProtoContent : Import• «$»
	ProtoContent : Import• «emptyStatement»
	ProtoContent : Import• «enum»
	ProtoContent : Import• «import»
	ProtoContent : Import• «message»
	ProtoContent : Import• «option»
	ProtoContent : Import• «package»
	ProtoContent : Import• «service»
}
Transitions:


S7{
	ProtoContent : Package• «$»
	ProtoContent : Package• «emptyStatement»
	ProtoContent : Package• «enum»
	ProtoContent : Package• «import»
	ProtoContent : Package• «message»
	ProtoContent : Package• «option»
	ProtoContent : Package• «package»
	ProtoContent : Package• «service»
}
Transitions:


S8{
	ProtoContent : Option• «$»
	ProtoContent : Option• «emptyStatement»
	ProtoContent : Option• «enum»
	ProtoContent : Option• «import»
	ProtoContent : Option• «message»
	ProtoContent : Option• «option»
	ProtoContent : Option• «package»
	ProtoContent : Option• «service»
}
Transitions:


S9{
	ProtoContent : TopLevelDef• «$»
	ProtoContent : TopLevelDef• «emptyStatement»
	ProtoContent : TopLevelDef• «enum»
	ProtoContent : TopLevelDef• «import»
	ProtoContent : TopLevelDef• «message»
	ProtoContent : TopLevelDef• «option»
	ProtoContent : TopLevelDef• «package»
	ProtoContent : TopLevelDef• «service»
}
Transitions:


S10{
	ProtoContent : emptyStatement• «$»
	ProtoContent : emptyStatement• «emptyStatement»
	ProtoContent : emptyStatement• «enum»
	ProtoContent : emptyStatement• «import»
	ProtoContent : emptyStatement• «message»
	ProtoContent : emptyStatement• «option»
	ProtoContent : emptyStatement• «package»
	ProtoContent : emptyStatement• «service»
}
Transitions:


S11{
	Import : import •ImportState strLit ; «$»
	Import : import •ImportState strLit ; «emptyStatement»
	Import : import •ImportState strLit ; «enum»
	Import : import •ImportState strLit ; «import»
	Import : import •ImportState strLit ; «message»
	Import : import •ImportState strLit ; «option»
	Import : import •ImportState strLit ; «package»
	Import : import •ImportState strLit ; «service»
	ImportState : •weak «strLit»
	ImportState : •public «strLit»
}
Transitions:
	ImportState -> 22
	weak -> 23
	public -> 24


S12{
	Package : package •FullIdent ; «$»
	Package : package •FullIdent ; «emptyStatement»
	Package : package •FullIdent ; «enum»
	Package : package •FullIdent ; «import»
	Package : package •FullIdent ; «message»
	Package : package •FullIdent ; «option»
	Package : package •FullIdent ; «package»
	Package : package •FullIdent ; «service»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	FullIdent -> 25
	ident -> 26


S13{
	Option : option •OptionName = Constant ; «$»
	Option : option •OptionName = Constant ; «emptyStatement»
	Option : option •OptionName = Constant ; «enum»
	Option : option •OptionName = Constant ; «import»
	Option : option •OptionName = Constant ; «message»
	Option : option •OptionName = Constant ; «option»
	Option : option •OptionName = Constant ; «package»
	Option : option •OptionName = Constant ; «service»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	OptionName -> 27
	ident -> 28
	( -> 29


S14{
	TopLevelDef : Message• «$»
	TopLevelDef : Message• «emptyStatement»
	TopLevelDef : Message• «enum»
	TopLevelDef : Message• «import»
	TopLevelDef : Message• «message»
	TopLevelDef : Message• «option»
	TopLevelDef : Message• «package»
	TopLevelDef : Message• «service»
}
Transitions:


S15{
	TopLevelDef : Enum• «$»
	TopLevelDef : Enum• «emptyStatement»
	TopLevelDef : Enum• «enum»
	TopLevelDef : Enum• «import»
	TopLevelDef : Enum• «message»
	TopLevelDef : Enum• «option»
	TopLevelDef : Enum• «package»
	TopLevelDef : Enum• «service»
}
Transitions:


S16{
	TopLevelDef : Service• «$»
	TopLevelDef : Service• «emptyStatement»
	TopLevelDef : Service• «enum»
	TopLevelDef : Service• «import»
	TopLevelDef : Service• «message»
	TopLevelDef : Service• «option»
	TopLevelDef : Service• «package»
	TopLevelDef : Service• «service»
}
Transitions:


S17{
	Enum : enum •EnumName EnumBody «$»
	Enum : enum •EnumName EnumBody «emptyStatement»
	Enum : enum •EnumName EnumBody «enum»
	Enum : enum •EnumName EnumBody «import»
	Enum : enum •EnumName EnumBody «message»
	Enum : enum •EnumName EnumBody «option»
	Enum : enum •EnumName EnumBody «package»
	Enum : enum •EnumName EnumBody «service»
	EnumName : •ident «{»
}
Transitions:
	ident -> 30
	EnumName -> 31


S18{
	Message : message •MessageName { } «$»
	Message : message •MessageName { MessageBody } «$»
	Message : message •MessageName { } «emptyStatement»
	Message : message •MessageName { MessageBody } «emptyStatement»
	Message : message •MessageName { } «enum»
	Message : message •MessageName { MessageBody } «enum»
	Message : message •MessageName { } «import»
	Message : message •MessageName { MessageBody } «import»
	Message : message •MessageName { } «message»
	Message : message •MessageName { MessageBody } «message»
	Message : message •MessageName { } «option»
	Message : message •MessageName { MessageBody } «option»
	Message : message •MessageName { } «package»
	Message : message •MessageName { MessageBody } «package»
	Message : message •MessageName { } «service»
	Message : message •MessageName { MessageBody } «service»
	MessageName : •ident «{»
}
Transitions:
	ident -> 32
	MessageName -> 33


S19{
	Service : service •ServiceName { } «$»
	Service : service •ServiceName { ServiceBodies } «$»
	Service : service •ServiceName { } «emptyStatement»
	Service : service •ServiceName { ServiceBodies } «emptyStatement»
	Service : service •ServiceName { } «enum»
	Service : service •ServiceName { ServiceBodies } «enum»
	Service : service •ServiceName { } «import»
	Service : service •ServiceName { ServiceBodies } «import»
	Service : service •ServiceName { } «message»
	Service : service •ServiceName { ServiceBodies } «message»
	Service : service •ServiceName { } «option»
	Service : service •ServiceName { ServiceBodies } «option»
	Service : service •ServiceName { } «package»
	Service : service •ServiceName { ServiceBodies } «package»
	Service : service •ServiceName { } «service»
	Service : service •ServiceName { ServiceBodies } «service»
	ServiceName : •ident «{»
}
Transitions:
	ident -> 34
	ServiceName -> 35


S20{
	Syntax : syntax = •quote proto3 quote ; «$»
	Syntax : syntax = •quote proto3 quote ; «emptyStatement»
	Syntax : syntax = •quote proto3 quote ; «enum»
	Syntax : syntax = •quote proto3 quote ; «import»
	Syntax : syntax = •quote proto3 quote ; «message»
	Syntax : syntax = •quote proto3 quote ; «option»
	Syntax : syntax = •quote proto3 quote ; «package»
	Syntax : syntax = •quote proto3 quote ; «service»
}
Transitions:
	quote -> 36


S21{
	ProtoContents : ProtoContents ProtoContent• «$»
	ProtoContents : ProtoContents ProtoContent• «emptyStatement»
	ProtoContents : ProtoContents ProtoContent• «enum»
	ProtoContents : ProtoContents ProtoContent• «import»
	ProtoContents : ProtoContents ProtoContent• «message»
	ProtoContents : ProtoContents ProtoContent• «option»
	ProtoContents : ProtoContents ProtoContent• «package»
	ProtoContents : ProtoContents ProtoContent• «service»
}
Transitions:


S22{
	Import : import ImportState •strLit ; «$»
	Import : import ImportState •strLit ; «emptyStatement»
	Import : import ImportState •strLit ; «enum»
	Import : import ImportState •strLit ; «import»
	Import : import ImportState •strLit ; «message»
	Import : import ImportState •strLit ; «option»
	Import : import ImportState •strLit ; «package»
	Import : import ImportState •strLit ; «service»
}
Transitions:
	strLit -> 37


S23{
	ImportState : weak• «strLit»
}
Transitions:


S24{
	ImportState : public• «strLit»
}
Transitions:


S25{
	Package : package FullIdent •; «$»
	Package : package FullIdent •; «emptyStatement»
	Package : package FullIdent •; «enum»
	Package : package FullIdent •; «import»
	Package : package FullIdent •; «message»
	Package : package FullIdent •; «option»
	Package : package FullIdent •; «package»
	Package : package FullIdent •; «service»
	FullIdent : FullIdent •. ident «;»
	FullIdent : FullIdent •. ident «.»
}
Transitions:
	; -> 38
	. -> 39


S26{
	FullIdent : ident• «;»
	FullIdent : ident• «.»
}
Transitions:


S27{
	Option : option OptionName •= Constant ; «$»
	Option : option OptionName •= Constant ; «emptyStatement»
	Option : option OptionName •= Constant ; «enum»
	Option : option OptionName •= Constant ; «import»
	Option : option OptionName •= Constant ; «message»
	Option : option OptionName •= Constant ; «option»
	Option : option OptionName •= Constant ; «package»
	Option : option OptionName •= Constant ; «service»
}
Transitions:
	= -> 40


S28{
	OptionName : ident• «=»
	OptionName : ident •DotRepeatedIdents «=»
	DotRepeatedIdents : •. ident «=»
	DotRepeatedIdents : •DotRepeatedIdents . ident «=»
	DotRepeatedIdents : •. ident «.»
	DotRepeatedIdents : •DotRepeatedIdents . ident «.»
}
Transitions:
	DotRepeatedIdents -> 41
	. -> 42


S29{
	OptionName : ( •FullIdent ) «=»
	OptionName : ( •FullIdent ) DotRepeatedIdents «=»
	FullIdent : •ident «)»
	FullIdent : •FullIdent . ident «)»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	FullIdent -> 43
	ident -> 44


S30{
	EnumName : ident• «{»
}
Transitions:


S31{
	Enum : enum EnumName •EnumBody «$»
	Enum : enum EnumName •EnumBody «emptyStatement»
	Enum : enum EnumName •EnumBody «enum»
	Enum : enum EnumName •EnumBody «import»
	Enum : enum EnumName •EnumBody «message»
	Enum : enum EnumName •EnumBody «option»
	Enum : enum EnumName •EnumBody «package»
	Enum : enum EnumName •EnumBody «service»
	EnumBody : •{ } «$»
	EnumBody : •{ Option } «$»
	EnumBody : •{ EnumField } «$»
	EnumBody : •{ emptyStatement } «$»
	EnumBody : •{ } «emptyStatement»
	EnumBody : •{ Option } «emptyStatement»
	EnumBody : •{ EnumField } «emptyStatement»
	EnumBody : •{ emptyStatement } «emptyStatement»
	EnumBody : •{ } «enum»
	EnumBody : •{ Option } «enum»
	EnumBody : •{ EnumField } «enum»
	EnumBody : •{ emptyStatement } «enum»
	EnumBody : •{ } «import»
	EnumBody : •{ Option } «import»
	EnumBody : •{ EnumField } «import»
	EnumBody : •{ emptyStatement } «import»
	EnumBody : •{ } «message»
	EnumBody : •{ Option } «message»
	EnumBody : •{ EnumField } «message»
	EnumBody : •{ emptyStatement } «message»
	EnumBody : •{ } «option»
	EnumBody : •{ Option } «option»
	EnumBody : •{ EnumField } «option»
	EnumBody : •{ emptyStatement } «option»
	EnumBody : •{ } «package»
	EnumBody : •{ Option } «package»
	EnumBody : •{ EnumField } «package»
	EnumBody : •{ emptyStatement } «package»
	EnumBody : •{ } «service»
	EnumBody : •{ Option } «service»
	EnumBody : •{ EnumField } «service»
	EnumBody : •{ emptyStatement } «service»
}
Transitions:
	{ -> 45
	EnumBody -> 46


S32{
	MessageName : ident• «{»
}
Transitions:


S33{
	Message : message MessageName •{ } «$»
	Message : message MessageName •{ MessageBody } «$»
	Message : message MessageName •{ } «emptyStatement»
	Message : message MessageName •{ MessageBody } «emptyStatement»
	Message : message MessageName •{ } «enum»
	Message : message MessageName •{ MessageBody } «enum»
	Message : message MessageName •{ } «import»
	Message : message MessageName •{ MessageBody } «import»
	Message : message MessageName •{ } «message»
	Message : message MessageName •{ MessageBody } «message»
	Message : message MessageName •{ } «option»
	Message : message MessageName •{ MessageBody } «option»
	Message : message MessageName •{ } «package»
	Message : message MessageName •{ MessageBody } «package»
	Message : message MessageName •{ } «service»
	Message : message MessageName •{ MessageBody } «service»
}
Transitions:
	{ -> 47


S34{
	ServiceName : ident• «{»
}
Transitions:


S35{
	Service : service ServiceName •{ } «$»
	Service : service ServiceName •{ ServiceBodies } «$»
	Service : service ServiceName •{ } «emptyStatement»
	Service : service ServiceName •{ ServiceBodies } «emptyStatement»
	Service : service ServiceName •{ } «enum»
	Service : service ServiceName •{ ServiceBodies } «enum»
	Service : service ServiceName •{ } «import»
	Service : service ServiceName •{ ServiceBodies } «import»
	Service : service ServiceName •{ } «message»
	Service : service ServiceName •{ ServiceBodies } «message»
	Service : service ServiceName •{ } «option»
	Service : service ServiceName •{ ServiceBodies } «option»
	Service : service ServiceName •{ } «package»
	Service : service ServiceName •{ ServiceBodies } «package»
	Service : service ServiceName •{ } «service»
	Service : service ServiceName •{ ServiceBodies } «service»
}
Transitions:
	{ -> 48


S36{
	Syntax : syntax = quote •proto3 quote ; «$»
	Syntax : syntax = quote •proto3 quote ; «emptyStatement»
	Syntax : syntax = quote •proto3 quote ; «enum»
	Syntax : syntax = quote •proto3 quote ; «import»
	Syntax : syntax = quote •proto3 quote ; «message»
	Syntax : syntax = quote •proto3 quote ; «option»
	Syntax : syntax = quote •proto3 quote ; «package»
	Syntax : syntax = quote •proto3 quote ; «service»
}
Transitions:
	proto3 -> 49


S37{
	Import : import ImportState strLit •; «$»
	Import : import ImportState strLit •; «emptyStatement»
	Import : import ImportState strLit •; «enum»
	Import : import ImportState strLit •; «import»
	Import : import ImportState strLit •; «message»
	Import : import ImportState strLit •; «option»
	Import : import ImportState strLit •; «package»
	Import : import ImportState strLit •; «service»
}
Transitions:
	; -> 50


S38{
	Package : package FullIdent ;• «$»
	Package : package FullIdent ;• «emptyStatement»
	Package : package FullIdent ;• «enum»
	Package : package FullIdent ;• «import»
	Package : package FullIdent ;• «message»
	Package : package FullIdent ;• «option»
	Package : package FullIdent ;• «package»
	Package : package FullIdent ;• «service»
}
Transitions:


S39{
	FullIdent : FullIdent . •ident «;»
	FullIdent : FullIdent . •ident «.»
}
Transitions:
	ident -> 51


S40{
	Option : option OptionName = •Constant ; «$»
	Option : option OptionName = •Constant ; «emptyStatement»
	Option : option OptionName = •Constant ; «enum»
	Option : option OptionName = •Constant ; «import»
	Option : option OptionName = •Constant ; «message»
	Option : option OptionName = •Constant ; «option»
	Option : option OptionName = •Constant ; «package»
	Option : option OptionName = •Constant ; «service»
	Constant : •FullIdent «;»
	Constant : •- intLit «;»
	Constant : •+ intLit «;»
	Constant : •- floatLit «;»
	Constant : •+ floatLit «;»
	Constant : •strLit «;»
	Constant : •boolLit «;»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	ident -> 26
	strLit -> 52
	FullIdent -> 53
	Constant -> 54
	- -> 55
	+ -> 56
	boolLit -> 57


S41{
	OptionName : ident DotRepeatedIdents• «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «.»
}
Transitions:
	. -> 58


S42{
	DotRepeatedIdents : . •ident «=»
	DotRepeatedIdents : . •ident «.»
}
Transitions:
	ident -> 59


S43{
	OptionName : ( FullIdent •) «=»
	OptionName : ( FullIdent •) DotRepeatedIdents «=»
	FullIdent : FullIdent •. ident «)»
	FullIdent : FullIdent •. ident «.»
}
Transitions:
	) -> 60
	. -> 61


S44{
	FullIdent : ident• «)»
	FullIdent : ident• «.»
}
Transitions:


S45{
	EnumBody : { •} «$»
	EnumBody : { •Option } «$»
	EnumBody : { •EnumField } «$»
	EnumBody : { •emptyStatement } «$»
	EnumBody : { •} «emptyStatement»
	EnumBody : { •Option } «emptyStatement»
	EnumBody : { •EnumField } «emptyStatement»
	EnumBody : { •emptyStatement } «emptyStatement»
	EnumBody : { •} «enum»
	EnumBody : { •Option } «enum»
	EnumBody : { •EnumField } «enum»
	EnumBody : { •emptyStatement } «enum»
	EnumBody : { •} «import»
	EnumBody : { •Option } «import»
	EnumBody : { •EnumField } «import»
	EnumBody : { •emptyStatement } «import»
	EnumBody : { •} «message»
	EnumBody : { •Option } «message»
	EnumBody : { •EnumField } «message»
	EnumBody : { •emptyStatement } «message»
	EnumBody : { •} «option»
	EnumBody : { •Option } «option»
	EnumBody : { •EnumField } «option»
	EnumBody : { •emptyStatement } «option»
	EnumBody : { •} «package»
	EnumBody : { •Option } «package»
	EnumBody : { •EnumField } «package»
	EnumBody : { •emptyStatement } «package»
	EnumBody : { •} «service»
	EnumBody : { •Option } «service»
	EnumBody : { •EnumField } «service»
	EnumBody : { •emptyStatement } «service»
	Option : •option OptionName = Constant ; «}»
	EnumField : •ident = intLit ; «}»
	EnumField : •ident = intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	Option -> 62
	emptyStatement -> 63
	option -> 64
	ident -> 65
	} -> 66
	EnumField -> 67


S46{
	Enum : enum EnumName EnumBody• «$»
	Enum : enum EnumName EnumBody• «emptyStatement»
	Enum : enum EnumName EnumBody• «enum»
	Enum : enum EnumName EnumBody• «import»
	Enum : enum EnumName EnumBody• «message»
	Enum : enum EnumName EnumBody• «option»
	Enum : enum EnumName EnumBody• «package»
	Enum : enum EnumName EnumBody• «service»
}
Transitions:


S47{
	Message : message MessageName { •} «$»
	Message : message MessageName { •MessageBody } «$»
	Message : message MessageName { •} «emptyStatement»
	Message : message MessageName { •MessageBody } «emptyStatement»
	Message : message MessageName { •} «enum»
	Message : message MessageName { •MessageBody } «enum»
	Message : message MessageName { •} «import»
	Message : message MessageName { •MessageBody } «import»
	Message : message MessageName { •} «message»
	Message : message MessageName { •MessageBody } «message»
	Message : message MessageName { •} «option»
	Message : message MessageName { •MessageBody } «option»
	Message : message MessageName { •} «package»
	Message : message MessageName { •MessageBody } «package»
	Message : message MessageName { •} «service»
	Message : message MessageName { •MessageBody } «service»
	MessageBody : •MessageContent «}»
	MessageBody : •MessageBody MessageContent «}»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageBody : •MessageContent «.»
	MessageBody : •MessageContent «bool»
	MessageBody : •MessageContent «bytes»
	MessageBody : •MessageContent «double»
	MessageBody : •MessageContent «emptyStatement»
	MessageBody : •MessageContent «enum»
	MessageBody : •MessageContent «fixed32»
	MessageBody : •MessageContent «fixed64»
	MessageBody : •MessageContent «float»
	MessageBody : •MessageContent «ident»
	MessageBody : •MessageContent «int32»
	MessageBody : •MessageContent «int64»
	MessageBody : •MessageContent «map»
	MessageBody : •MessageContent «message»
	MessageBody : •MessageContent «oneof»
	MessageBody : •MessageContent «option»
	MessageBody : •MessageContent «repeated»
	MessageBody : •MessageContent «reserved»
	MessageBody : •MessageContent «sfixed32»
	MessageBody : •MessageContent «sfixed64»
	MessageBody : •MessageContent «sint32»
	MessageBody : •MessageContent «sint64»
	MessageBody : •MessageContent «string»
	MessageBody : •MessageContent «uint32»
	MessageBody : •MessageContent «uint64»
	MessageBody : •MessageBody MessageContent «.»
	MessageBody : •MessageBody MessageContent «bool»
	MessageBody : •MessageBody MessageContent «bytes»
	MessageBody : •MessageBody MessageContent «double»
	MessageBody : •MessageBody MessageContent «emptyStatement»
	MessageBody : •MessageBody MessageContent «enum»
	MessageBody : •MessageBody MessageContent «fixed32»
	MessageBody : •MessageBody MessageContent «fixed64»
	MessageBody : •MessageBody MessageContent «float»
	MessageBody : •MessageBody MessageContent «ident»
	MessageBody : •MessageBody MessageContent «int32»
	MessageBody : •MessageBody MessageContent «int64»
	MessageBody : •MessageBody MessageContent «map»
	MessageBody : •MessageBody MessageContent «message»
	MessageBody : •MessageBody MessageContent «oneof»
	MessageBody : •MessageBody MessageContent «option»
	MessageBody : •MessageBody MessageContent «repeated»
	MessageBody : •MessageBody MessageContent «reserved»
	MessageBody : •MessageBody MessageContent «sfixed32»
	MessageBody : •MessageBody MessageContent «sfixed64»
	MessageBody : •MessageBody MessageContent «sint32»
	MessageBody : •MessageBody MessageContent «sint64»
	MessageBody : •MessageBody MessageContent «string»
	MessageBody : •MessageBody MessageContent «uint32»
	MessageBody : •MessageBody MessageContent «uint64»
	Field : •Type FieldName = FieldNumber ; «}»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type FieldName = FieldNumber ; «}»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum EnumName EnumBody «}»
	Message : •message MessageName { } «}»
	Message : •message MessageName { MessageBody } «}»
	Option : •option OptionName = Constant ; «}»
	Oneof : •oneof OneofName { } «}»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	MessageContent : •Field «.»
	MessageContent : •Enum «.»
	MessageContent : •Message «.»
	MessageContent : •Option «.»
	MessageContent : •Oneof «.»
	MessageContent : •MapField «.»
	MessageContent : •Reserved «.»
	MessageContent : •emptyStatement «.»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «ident»
	MessageContent : •Enum «ident»
	MessageContent : •Message «ident»
	MessageContent : •Option «ident»
	MessageContent : •Oneof «ident»
	MessageContent : •MapField «ident»
	MessageContent : •Reserved «ident»
	MessageContent : •emptyStatement «ident»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	Field : •Type FieldName = FieldNumber ; «.»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : •repeated Type FieldName = FieldNumber ; «.»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Enum : •enum EnumName EnumBody «.»
	Message : •message MessageName { } «.»
	Message : •message MessageName { MessageBody } «.»
	Option : •option OptionName = Constant ; «.»
	Oneof : •oneof OneofName { } «.»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	Reserved : •reserved Ranges ; «.»
	Reserved : •reserved FieldNames ; «.»
	Field : •Type FieldName = FieldNumber ; «bool»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type FieldName = FieldNumber ; «bool»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum EnumName EnumBody «bool»
	Message : •message MessageName { } «bool»
	Message : •message MessageName { MessageBody } «bool»
	Option : •option OptionName = Constant ; «bool»
	Oneof : •oneof OneofName { } «bool»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type FieldName = FieldNumber ; «bytes»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type FieldName = FieldNumber ; «bytes»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum EnumName EnumBody «bytes»
	Message : •message MessageName { } «bytes»
	Message : •message MessageName { MessageBody } «bytes»
	Option : •option OptionName = Constant ; «bytes»
	Oneof : •oneof OneofName { } «bytes»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type FieldName = FieldNumber ; «double»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type FieldName = FieldNumber ; «double»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum EnumName EnumBody «double»
	Message : •message MessageName { } «double»
	Message : •message MessageName { MessageBody } «double»
	Option : •option OptionName = Constant ; «double»
	Oneof : •oneof OneofName { } «double»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type FieldName = FieldNumber ; «emptyStatement»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	Oneof : •oneof OneofName { } «emptyStatement»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type FieldName = FieldNumber ; «enum»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type FieldName = FieldNumber ; «enum»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum EnumName EnumBody «enum»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Option : •option OptionName = Constant ; «enum»
	Oneof : •oneof OneofName { } «enum»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type FieldName = FieldNumber ; «fixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum EnumName EnumBody «fixed32»
	Message : •message MessageName { } «fixed32»
	Message : •message MessageName { MessageBody } «fixed32»
	Option : •option OptionName = Constant ; «fixed32»
	Oneof : •oneof OneofName { } «fixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type FieldName = FieldNumber ; «fixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum EnumName EnumBody «fixed64»
	Message : •message MessageName { } «fixed64»
	Message : •message MessageName { MessageBody } «fixed64»
	Option : •option OptionName = Constant ; «fixed64»
	Oneof : •oneof OneofName { } «fixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type FieldName = FieldNumber ; «float»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type FieldName = FieldNumber ; «float»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum EnumName EnumBody «float»
	Message : •message MessageName { } «float»
	Message : •message MessageName { MessageBody } «float»
	Option : •option OptionName = Constant ; «float»
	Oneof : •oneof OneofName { } «float»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type FieldName = FieldNumber ; «ident»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : •repeated Type FieldName = FieldNumber ; «ident»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Enum : •enum EnumName EnumBody «ident»
	Message : •message MessageName { } «ident»
	Message : •message MessageName { MessageBody } «ident»
	Option : •option OptionName = Constant ; «ident»
	Oneof : •oneof OneofName { } «ident»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	Reserved : •reserved Ranges ; «ident»
	Reserved : •reserved FieldNames ; «ident»
	Field : •Type FieldName = FieldNumber ; «int32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type FieldName = FieldNumber ; «int32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum EnumName EnumBody «int32»
	Message : •message MessageName { } «int32»
	Message : •message MessageName { MessageBody } «int32»
	Option : •option OptionName = Constant ; «int32»
	Oneof : •oneof OneofName { } «int32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type FieldName = FieldNumber ; «int64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type FieldName = FieldNumber ; «int64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum EnumName EnumBody «int64»
	Message : •message MessageName { } «int64»
	Message : •message MessageName { MessageBody } «int64»
	Option : •option OptionName = Constant ; «int64»
	Oneof : •oneof OneofName { } «int64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type FieldName = FieldNumber ; «map»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type FieldName = FieldNumber ; «map»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum EnumName EnumBody «map»
	Message : •message MessageName { } «map»
	Message : •message MessageName { MessageBody } «map»
	Option : •option OptionName = Constant ; «map»
	Oneof : •oneof OneofName { } «map»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type FieldName = FieldNumber ; «message»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type FieldName = FieldNumber ; «message»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum EnumName EnumBody «message»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Option : •option OptionName = Constant ; «message»
	Oneof : •oneof OneofName { } «message»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type FieldName = FieldNumber ; «oneof»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type FieldName = FieldNumber ; «oneof»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum EnumName EnumBody «oneof»
	Message : •message MessageName { } «oneof»
	Message : •message MessageName { MessageBody } «oneof»
	Option : •option OptionName = Constant ; «oneof»
	Oneof : •oneof OneofName { } «oneof»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type FieldName = FieldNumber ; «option»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type FieldName = FieldNumber ; «option»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum EnumName EnumBody «option»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Option : •option OptionName = Constant ; «option»
	Oneof : •oneof OneofName { } «option»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type FieldName = FieldNumber ; «repeated»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type FieldName = FieldNumber ; «repeated»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum EnumName EnumBody «repeated»
	Message : •message MessageName { } «repeated»
	Message : •message MessageName { MessageBody } «repeated»
	Option : •option OptionName = Constant ; «repeated»
	Oneof : •oneof OneofName { } «repeated»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type FieldName = FieldNumber ; «reserved»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type FieldName = FieldNumber ; «reserved»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum EnumName EnumBody «reserved»
	Message : •message MessageName { } «reserved»
	Message : •message MessageName { MessageBody } «reserved»
	Option : •option OptionName = Constant ; «reserved»
	Oneof : •oneof OneofName { } «reserved»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type FieldName = FieldNumber ; «sfixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum EnumName EnumBody «sfixed32»
	Message : •message MessageName { } «sfixed32»
	Message : •message MessageName { MessageBody } «sfixed32»
	Option : •option OptionName = Constant ; «sfixed32»
	Oneof : •oneof OneofName { } «sfixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type FieldName = FieldNumber ; «sfixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum EnumName EnumBody «sfixed64»
	Message : •message MessageName { } «sfixed64»
	Message : •message MessageName { MessageBody } «sfixed64»
	Option : •option OptionName = Constant ; «sfixed64»
	Oneof : •oneof OneofName { } «sfixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type FieldName = FieldNumber ; «sint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type FieldName = FieldNumber ; «sint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum EnumName EnumBody «sint32»
	Message : •message MessageName { } «sint32»
	Message : •message MessageName { MessageBody } «sint32»
	Option : •option OptionName = Constant ; «sint32»
	Oneof : •oneof OneofName { } «sint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type FieldName = FieldNumber ; «sint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type FieldName = FieldNumber ; «sint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum EnumName EnumBody «sint64»
	Message : •message MessageName { } «sint64»
	Message : •message MessageName { MessageBody } «sint64»
	Option : •option OptionName = Constant ; «sint64»
	Oneof : •oneof OneofName { } «sint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type FieldName = FieldNumber ; «string»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type FieldName = FieldNumber ; «string»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum EnumName EnumBody «string»
	Message : •message MessageName { } «string»
	Message : •message MessageName { MessageBody } «string»
	Option : •option OptionName = Constant ; «string»
	Oneof : •oneof OneofName { } «string»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type FieldName = FieldNumber ; «uint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type FieldName = FieldNumber ; «uint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum EnumName EnumBody «uint32»
	Message : •message MessageName { } «uint32»
	Message : •message MessageName { MessageBody } «uint32»
	Option : •option OptionName = Constant ; «uint32»
	Oneof : •oneof OneofName { } «uint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type FieldName = FieldNumber ; «uint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type FieldName = FieldNumber ; «uint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum EnumName EnumBody «uint64»
	Message : •message MessageName { } «uint64»
	Message : •message MessageName { MessageBody } «uint64»
	Option : •option OptionName = Constant ; «uint64»
	Oneof : •oneof OneofName { } «uint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	Option -> 68
	emptyStatement -> 69
	option -> 70
	ident -> 71
	. -> 72
	Message -> 73
	Enum -> 74
	Type -> 75
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	Field -> 93
	repeated -> 94
	Oneof -> 95
	oneof -> 96
	} -> 97
	MapField -> 98
	map -> 99
	Reserved -> 100
	reserved -> 101
	enum -> 102
	EnumName -> 103
	message -> 104
	MessageName -> 105
	MessageBody -> 106
	MessageContent -> 107
	Idents -> 108


S48{
	Service : service ServiceName { •} «$»
	Service : service ServiceName { •ServiceBodies } «$»
	Service : service ServiceName { •} «emptyStatement»
	Service : service ServiceName { •ServiceBodies } «emptyStatement»
	Service : service ServiceName { •} «enum»
	Service : service ServiceName { •ServiceBodies } «enum»
	Service : service ServiceName { •} «import»
	Service : service ServiceName { •ServiceBodies } «import»
	Service : service ServiceName { •} «message»
	Service : service ServiceName { •ServiceBodies } «message»
	Service : service ServiceName { •} «option»
	Service : service ServiceName { •ServiceBodies } «option»
	Service : service ServiceName { •} «package»
	Service : service ServiceName { •ServiceBodies } «package»
	Service : service ServiceName { •} «service»
	Service : service ServiceName { •ServiceBodies } «service»
	ServiceBodies : •ServiceBody «}»
	ServiceBodies : •ServiceBodies ServiceBody «}»
	ServiceBody : •Option «}»
	ServiceBody : •Rpc «}»
	ServiceBody : •emptyStatement «}»
	ServiceBodies : •ServiceBody «emptyStatement»
	ServiceBodies : •ServiceBody «option»
	ServiceBodies : •ServiceBody «rpc»
	ServiceBodies : •ServiceBodies ServiceBody «emptyStatement»
	ServiceBodies : •ServiceBodies ServiceBody «option»
	ServiceBodies : •ServiceBodies ServiceBody «rpc»
	Option : •option OptionName = Constant ; «}»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «}»
	ServiceBody : •Option «emptyStatement»
	ServiceBody : •Rpc «emptyStatement»
	ServiceBody : •emptyStatement «emptyStatement»
	ServiceBody : •Option «option»
	ServiceBody : •Rpc «option»
	ServiceBody : •emptyStatement «option»
	ServiceBody : •Option «rpc»
	ServiceBody : •Rpc «rpc»
	ServiceBody : •emptyStatement «rpc»
	Option : •option OptionName = Constant ; «emptyStatement»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Option : •option OptionName = Constant ; «option»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Option : •option OptionName = Constant ; «rpc»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	Option -> 109
	emptyStatement -> 110
	option -> 111
	} -> 112
	ServiceBodies -> 113
	ServiceBody -> 114
	Rpc -> 115
	rpc -> 116


S49{
	Syntax : syntax = quote proto3 •quote ; «$»
	Syntax : syntax = quote proto3 •quote ; «emptyStatement»
	Syntax : syntax = quote proto3 •quote ; «enum»
	Syntax : syntax = quote proto3 •quote ; «import»
	Syntax : syntax = quote proto3 •quote ; «message»
	Syntax : syntax = quote proto3 •quote ; «option»
	Syntax : syntax = quote proto3 •quote ; «package»
	Syntax : syntax = quote proto3 •quote ; «service»
}
Transitions:
	quote -> 117


S50{
	Import : import ImportState strLit ;• «$»
	Import : import ImportState strLit ;• «emptyStatement»
	Import : import ImportState strLit ;• «enum»
	Import : import ImportState strLit ;• «import»
	Import : import ImportState strLit ;• «message»
	Import : import ImportState strLit ;• «option»
	Import : import ImportState strLit ;• «package»
	Import : import ImportState strLit ;• «service»
}
Transitions:


S51{
	FullIdent : FullIdent . ident• «;»
	FullIdent : FullIdent . ident• «.»
}
Transitions:


S52{
	Constant : strLit• «;»
}
Transitions:


S53{
	Constant : FullIdent• «;»
	FullIdent : FullIdent •. ident «;»
	FullIdent : FullIdent •. ident «.»
}
Transitions:
	. -> 39


S54{
	Option : option OptionName = Constant •; «$»
	Option : option OptionName = Constant •; «emptyStatement»
	Option : option OptionName = Constant •; «enum»
	Option : option OptionName = Constant •; «import»
	Option : option OptionName = Constant •; «message»
	Option : option OptionName = Constant •; «option»
	Option : option OptionName = Constant •; «package»
	Option : option OptionName = Constant •; «service»
}
Transitions:
	; -> 118


S55{
	Constant : - •intLit «;»
	Constant : - •floatLit «;»
}
Transitions:
	intLit -> 119
	floatLit -> 120


S56{
	Constant : + •intLit «;»
	Constant : + •floatLit «;»
}
Transitions:
	intLit -> 121
	floatLit -> 122


S57{
	Constant : boolLit• «;»
}
Transitions:


S58{
	DotRepeatedIdents : DotRepeatedIdents . •ident «=»
	DotRepeatedIdents : DotRepeatedIdents . •ident «.»
}
Transitions:
	ident -> 123


S59{
	DotRepeatedIdents : . ident• «=»
	DotRepeatedIdents : . ident• «.»
}
Transitions:


S60{
	OptionName : ( FullIdent )• «=»
	OptionName : ( FullIdent ) •DotRepeatedIdents «=»
	DotRepeatedIdents : •. ident «=»
	DotRepeatedIdents : •DotRepeatedIdents . ident «=»
	DotRepeatedIdents : •. ident «.»
	DotRepeatedIdents : •DotRepeatedIdents . ident «.»
}
Transitions:
	. -> 42
	DotRepeatedIdents -> 124


S61{
	FullIdent : FullIdent . •ident «)»
	FullIdent : FullIdent . •ident «.»
}
Transitions:
	ident -> 125


S62{
	EnumBody : { Option •} «$»
	EnumBody : { Option •} «emptyStatement»
	EnumBody : { Option •} «enum»
	EnumBody : { Option •} «import»
	EnumBody : { Option •} «message»
	EnumBody : { Option •} «option»
	EnumBody : { Option •} «package»
	EnumBody : { Option •} «service»
}
Transitions:
	} -> 126


S63{
	EnumBody : { emptyStatement •} «$»
	EnumBody : { emptyStatement •} «emptyStatement»
	EnumBody : { emptyStatement •} «enum»
	EnumBody : { emptyStatement •} «import»
	EnumBody : { emptyStatement •} «message»
	EnumBody : { emptyStatement •} «option»
	EnumBody : { emptyStatement •} «package»
	EnumBody : { emptyStatement •} «service»
}
Transitions:
	} -> 127


S64{
	Option : option •OptionName = Constant ; «}»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 128


S65{
	EnumField : ident •= intLit ; «}»
	EnumField : ident •= intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	= -> 129


S66{
	EnumBody : { }• «$»
	EnumBody : { }• «emptyStatement»
	EnumBody : { }• «enum»
	EnumBody : { }• «import»
	EnumBody : { }• «message»
	EnumBody : { }• «option»
	EnumBody : { }• «package»
	EnumBody : { }• «service»
}
Transitions:


S67{
	EnumBody : { EnumField •} «$»
	EnumBody : { EnumField •} «emptyStatement»
	EnumBody : { EnumField •} «enum»
	EnumBody : { EnumField •} «import»
	EnumBody : { EnumField •} «message»
	EnumBody : { EnumField •} «option»
	EnumBody : { EnumField •} «package»
	EnumBody : { EnumField •} «service»
}
Transitions:
	} -> 130


S68{
	MessageContent : Option• «}»
	MessageContent : Option• «.»
	MessageContent : Option• «bool»
	MessageContent : Option• «bytes»
	MessageContent : Option• «double»
	MessageContent : Option• «emptyStatement»
	MessageContent : Option• «enum»
	MessageContent : Option• «fixed32»
	MessageContent : Option• «fixed64»
	MessageContent : Option• «float»
	MessageContent : Option• «ident»
	MessageContent : Option• «int32»
	MessageContent : Option• «int64»
	MessageContent : Option• «map»
	MessageContent : Option• «message»
	MessageContent : Option• «oneof»
	MessageContent : Option• «option»
	MessageContent : Option• «repeated»
	MessageContent : Option• «reserved»
	MessageContent : Option• «sfixed32»
	MessageContent : Option• «sfixed64»
	MessageContent : Option• «sint32»
	MessageContent : Option• «sint64»
	MessageContent : Option• «string»
	MessageContent : Option• «uint32»
	MessageContent : Option• «uint64»
}
Transitions:


S69{
	MessageContent : emptyStatement• «}»
	MessageContent : emptyStatement• «.»
	MessageContent : emptyStatement• «bool»
	MessageContent : emptyStatement• «bytes»
	MessageContent : emptyStatement• «double»
	MessageContent : emptyStatement• «emptyStatement»
	MessageContent : emptyStatement• «enum»
	MessageContent : emptyStatement• «fixed32»
	MessageContent : emptyStatement• «fixed64»
	MessageContent : emptyStatement• «float»
	MessageContent : emptyStatement• «ident»
	MessageContent : emptyStatement• «int32»
	MessageContent : emptyStatement• «int64»
	MessageContent : emptyStatement• «map»
	MessageContent : emptyStatement• «message»
	MessageContent : emptyStatement• «oneof»
	MessageContent : emptyStatement• «option»
	MessageContent : emptyStatement• «repeated»
	MessageContent : emptyStatement• «reserved»
	MessageContent : emptyStatement• «sfixed32»
	MessageContent : emptyStatement• «sfixed64»
	MessageContent : emptyStatement• «sint32»
	MessageContent : emptyStatement• «sint64»
	MessageContent : emptyStatement• «string»
	MessageContent : emptyStatement• «uint32»
	MessageContent : emptyStatement• «uint64»
}
Transitions:


S70{
	Option : option •OptionName = Constant ; «}»
	Option : option •OptionName = Constant ; «.»
	Option : option •OptionName = Constant ; «bool»
	Option : option •OptionName = Constant ; «bytes»
	Option : option •OptionName = Constant ; «double»
	Option : option •OptionName = Constant ; «emptyStatement»
	Option : option •OptionName = Constant ; «enum»
	Option : option •OptionName = Constant ; «fixed32»
	Option : option •OptionName = Constant ; «fixed64»
	Option : option •OptionName = Constant ; «float»
	Option : option •OptionName = Constant ; «ident»
	Option : option •OptionName = Constant ; «int32»
	Option : option •OptionName = Constant ; «int64»
	Option : option •OptionName = Constant ; «map»
	Option : option •OptionName = Constant ; «message»
	Option : option •OptionName = Constant ; «oneof»
	Option : option •OptionName = Constant ; «option»
	Option : option •OptionName = Constant ; «repeated»
	Option : option •OptionName = Constant ; «reserved»
	Option : option •OptionName = Constant ; «sfixed32»
	Option : option •OptionName = Constant ; «sfixed64»
	Option : option •OptionName = Constant ; «sint32»
	Option : option •OptionName = Constant ; «sint64»
	Option : option •OptionName = Constant ; «string»
	Option : option •OptionName = Constant ; «uint32»
	Option : option •OptionName = Constant ; «uint64»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 131


S71{
	MessageName : ident• «ident»
	Idents : ident •. «ident»
	EnumName : ident• «ident»
}
Transitions:
	. -> 132


S72{
	MessageType : . •MessageName «ident»
	MessageType : . •Idents MessageName «ident»
	EnumType : . •EnumName «ident»
	EnumType : . •Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	ident -> 71
	EnumName -> 133
	MessageName -> 134
	Idents -> 135


S73{
	MessageContent : Message• «}»
	MessageContent : Message• «.»
	MessageContent : Message• «bool»
	MessageContent : Message• «bytes»
	MessageContent : Message• «double»
	MessageContent : Message• «emptyStatement»
	MessageContent : Message• «enum»
	MessageContent : Message• «fixed32»
	MessageContent : Message• «fixed64»
	MessageContent : Message• «float»
	MessageContent : Message• «ident»
	MessageContent : Message• «int32»
	MessageContent : Message• «int64»
	MessageContent : Message• «map»
	MessageContent : Message• «message»
	MessageContent : Message• «oneof»
	MessageContent : Message• «option»
	MessageContent : Message• «repeated»
	MessageContent : Message• «reserved»
	MessageContent : Message• «sfixed32»
	MessageContent : Message• «sfixed64»
	MessageContent : Message• «sint32»
	MessageContent : Message• «sint64»
	MessageContent : Message• «string»
	MessageContent : Message• «uint32»
	MessageContent : Message• «uint64»
}
Transitions:


S74{
	MessageContent : Enum• «}»
	MessageContent : Enum• «.»
	MessageContent : Enum• «bool»
	MessageContent : Enum• «bytes»
	MessageContent : Enum• «double»
	MessageContent : Enum• «emptyStatement»
	MessageContent : Enum• «enum»
	MessageContent : Enum• «fixed32»
	MessageContent : Enum• «fixed64»
	MessageContent : Enum• «float»
	MessageContent : Enum• «ident»
	MessageContent : Enum• «int32»
	MessageContent : Enum• «int64»
	MessageContent : Enum• «map»
	MessageContent : Enum• «message»
	MessageContent : Enum• «oneof»
	MessageContent : Enum• «option»
	MessageContent : Enum• «repeated»
	MessageContent : Enum• «reserved»
	MessageContent : Enum• «sfixed32»
	MessageContent : Enum• «sfixed64»
	MessageContent : Enum• «sint32»
	MessageContent : Enum• «sint64»
	MessageContent : Enum• «string»
	MessageContent : Enum• «uint32»
	MessageContent : Enum• «uint64»
}
Transitions:


S75{
	Field : Type •FieldName = FieldNumber ; «}»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : Type •FieldName = FieldNumber ; «.»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : Type •FieldName = FieldNumber ; «bool»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : Type •FieldName = FieldNumber ; «bytes»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type •FieldName = FieldNumber ; «double»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : Type •FieldName = FieldNumber ; «emptyStatement»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type •FieldName = FieldNumber ; «enum»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : Type •FieldName = FieldNumber ; «fixed32»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type •FieldName = FieldNumber ; «fixed64»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type •FieldName = FieldNumber ; «float»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : Type •FieldName = FieldNumber ; «ident»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : Type •FieldName = FieldNumber ; «int32»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : Type •FieldName = FieldNumber ; «int64»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : Type •FieldName = FieldNumber ; «map»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : Type •FieldName = FieldNumber ; «message»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : Type •FieldName = FieldNumber ; «oneof»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type •FieldName = FieldNumber ; «option»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : Type •FieldName = FieldNumber ; «repeated»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type •FieldName = FieldNumber ; «reserved»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type •FieldName = FieldNumber ; «sfixed32»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type •FieldName = FieldNumber ; «sfixed64»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type •FieldName = FieldNumber ; «sint32»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type •FieldName = FieldNumber ; «sint64»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type •FieldName = FieldNumber ; «string»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : Type •FieldName = FieldNumber ; «uint32»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type •FieldName = FieldNumber ; «uint64»
	Field : Type •FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	FieldName : •ident «=»
}
Transitions:
	ident -> 136
	FieldName -> 137


S76{
	Type : double• «ident»
}
Transitions:


S77{
	Type : float• «ident»
}
Transitions:


S78{
	Type : int32• «ident»
}
Transitions:


S79{
	Type : int64• «ident»
}
Transitions:


S80{
	Type : uint32• «ident»
}
Transitions:


S81{
	Type : uint64• «ident»
}
Transitions:


S82{
	Type : sint32• «ident»
}
Transitions:


S83{
	Type : sint64• «ident»
}
Transitions:


S84{
	Type : fixed32• «ident»
}
Transitions:


S85{
	Type : fixed64• «ident»
}
Transitions:


S86{
	Type : sfixed32• «ident»
}
Transitions:


S87{
	Type : sfixed64• «ident»
}
Transitions:


S88{
	Type : bool• «ident»
}
Transitions:


S89{
	Type : string• «ident»
}
Transitions:


S90{
	Type : bytes• «ident»
}
Transitions:


S91{
	Type : MessageType• «ident»
}
Transitions:


S92{
	Type : EnumType• «ident»
}
Transitions:


S93{
	MessageContent : Field• «}»
	MessageContent : Field• «.»
	MessageContent : Field• «bool»
	MessageContent : Field• «bytes»
	MessageContent : Field• «double»
	MessageContent : Field• «emptyStatement»
	MessageContent : Field• «enum»
	MessageContent : Field• «fixed32»
	MessageContent : Field• «fixed64»
	MessageContent : Field• «float»
	MessageContent : Field• «ident»
	MessageContent : Field• «int32»
	MessageContent : Field• «int64»
	MessageContent : Field• «map»
	MessageContent : Field• «message»
	MessageContent : Field• «oneof»
	MessageContent : Field• «option»
	MessageContent : Field• «repeated»
	MessageContent : Field• «reserved»
	MessageContent : Field• «sfixed32»
	MessageContent : Field• «sfixed64»
	MessageContent : Field• «sint32»
	MessageContent : Field• «sint64»
	MessageContent : Field• «string»
	MessageContent : Field• «uint32»
	MessageContent : Field• «uint64»
}
Transitions:


S94{
	Field : repeated •Type FieldName = FieldNumber ; «}»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : repeated •Type FieldName = FieldNumber ; «.»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : repeated •Type FieldName = FieldNumber ; «bool»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated •Type FieldName = FieldNumber ; «bytes»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated •Type FieldName = FieldNumber ; «double»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : repeated •Type FieldName = FieldNumber ; «emptyStatement»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated •Type FieldName = FieldNumber ; «enum»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated •Type FieldName = FieldNumber ; «fixed32»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated •Type FieldName = FieldNumber ; «fixed64»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated •Type FieldName = FieldNumber ; «float»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : repeated •Type FieldName = FieldNumber ; «ident»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : repeated •Type FieldName = FieldNumber ; «int32»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated •Type FieldName = FieldNumber ; «int64»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated •Type FieldName = FieldNumber ; «map»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : repeated •Type FieldName = FieldNumber ; «message»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : repeated •Type FieldName = FieldNumber ; «oneof»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated •Type FieldName = FieldNumber ; «option»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : repeated •Type FieldName = FieldNumber ; «repeated»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated •Type FieldName = FieldNumber ; «reserved»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated •Type FieldName = FieldNumber ; «sfixed32»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated •Type FieldName = FieldNumber ; «sfixed64»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated •Type FieldName = FieldNumber ; «sint32»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated •Type FieldName = FieldNumber ; «sint64»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated •Type FieldName = FieldNumber ; «string»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : repeated •Type FieldName = FieldNumber ; «uint32»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated •Type FieldName = FieldNumber ; «uint64»
	Field : repeated •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	ident -> 71
	. -> 72
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	EnumName -> 103
	MessageName -> 105
	Idents -> 108
	Type -> 138


S95{
	MessageContent : Oneof• «}»
	MessageContent : Oneof• «.»
	MessageContent : Oneof• «bool»
	MessageContent : Oneof• «bytes»
	MessageContent : Oneof• «double»
	MessageContent : Oneof• «emptyStatement»
	MessageContent : Oneof• «enum»
	MessageContent : Oneof• «fixed32»
	MessageContent : Oneof• «fixed64»
	MessageContent : Oneof• «float»
	MessageContent : Oneof• «ident»
	MessageContent : Oneof• «int32»
	MessageContent : Oneof• «int64»
	MessageContent : Oneof• «map»
	MessageContent : Oneof• «message»
	MessageContent : Oneof• «oneof»
	MessageContent : Oneof• «option»
	MessageContent : Oneof• «repeated»
	MessageContent : Oneof• «reserved»
	MessageContent : Oneof• «sfixed32»
	MessageContent : Oneof• «sfixed64»
	MessageContent : Oneof• «sint32»
	MessageContent : Oneof• «sint64»
	MessageContent : Oneof• «string»
	MessageContent : Oneof• «uint32»
	MessageContent : Oneof• «uint64»
}
Transitions:


S96{
	Oneof : oneof •OneofName { } «}»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof •OneofName { } «.»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «.»
	Oneof : oneof •OneofName { } «bool»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof •OneofName { } «bytes»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof •OneofName { } «double»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof •OneofName { } «emptyStatement»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof •OneofName { } «enum»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof •OneofName { } «fixed32»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof •OneofName { } «fixed64»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof •OneofName { } «float»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof •OneofName { } «ident»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «ident»
	Oneof : oneof •OneofName { } «int32»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof •OneofName { } «int64»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof •OneofName { } «map»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof •OneofName { } «message»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof •OneofName { } «oneof»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof •OneofName { } «option»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof •OneofName { } «repeated»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof •OneofName { } «reserved»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof •OneofName { } «sfixed32»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof •OneofName { } «sfixed64»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof •OneofName { } «sint32»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof •OneofName { } «sint64»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof •OneofName { } «string»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof •OneofName { } «uint32»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof •OneofName { } «uint64»
	Oneof : oneof •OneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	OneofName : •ident «{»
}
Transitions:
	ident -> 139
	OneofName -> 140


S97{
	Message : message MessageName { }• «$»
	Message : message MessageName { }• «emptyStatement»
	Message : message MessageName { }• «enum»
	Message : message MessageName { }• «import»
	Message : message MessageName { }• «message»
	Message : message MessageName { }• «option»
	Message : message MessageName { }• «package»
	Message : message MessageName { }• «service»
}
Transitions:


S98{
	MessageContent : MapField• «}»
	MessageContent : MapField• «.»
	MessageContent : MapField• «bool»
	MessageContent : MapField• «bytes»
	MessageContent : MapField• «double»
	MessageContent : MapField• «emptyStatement»
	MessageContent : MapField• «enum»
	MessageContent : MapField• «fixed32»
	MessageContent : MapField• «fixed64»
	MessageContent : MapField• «float»
	MessageContent : MapField• «ident»
	MessageContent : MapField• «int32»
	MessageContent : MapField• «int64»
	MessageContent : MapField• «map»
	MessageContent : MapField• «message»
	MessageContent : MapField• «oneof»
	MessageContent : MapField• «option»
	MessageContent : MapField• «repeated»
	MessageContent : MapField• «reserved»
	MessageContent : MapField• «sfixed32»
	MessageContent : MapField• «sfixed64»
	MessageContent : MapField• «sint32»
	MessageContent : MapField• «sint64»
	MessageContent : MapField• «string»
	MessageContent : MapField• «uint32»
	MessageContent : MapField• «uint64»
}
Transitions:


S99{
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «}»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «.»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «double»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «float»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «map»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «message»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «option»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «string»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map •< KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : map •< KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	< -> 141


S100{
	MessageContent : Reserved• «}»
	MessageContent : Reserved• «.»
	MessageContent : Reserved• «bool»
	MessageContent : Reserved• «bytes»
	MessageContent : Reserved• «double»
	MessageContent : Reserved• «emptyStatement»
	MessageContent : Reserved• «enum»
	MessageContent : Reserved• «fixed32»
	MessageContent : Reserved• «fixed64»
	MessageContent : Reserved• «float»
	MessageContent : Reserved• «ident»
	MessageContent : Reserved• «int32»
	MessageContent : Reserved• «int64»
	MessageContent : Reserved• «map»
	MessageContent : Reserved• «message»
	MessageContent : Reserved• «oneof»
	MessageContent : Reserved• «option»
	MessageContent : Reserved• «repeated»
	MessageContent : Reserved• «reserved»
	MessageContent : Reserved• «sfixed32»
	MessageContent : Reserved• «sfixed64»
	MessageContent : Reserved• «sint32»
	MessageContent : Reserved• «sint64»
	MessageContent : Reserved• «string»
	MessageContent : Reserved• «uint32»
	MessageContent : Reserved• «uint64»
}
Transitions:


S101{
	Reserved : reserved •Ranges ; «}»
	Reserved : reserved •FieldNames ; «}»
	Reserved : reserved •Ranges ; «.»
	Reserved : reserved •FieldNames ; «.»
	Reserved : reserved •Ranges ; «bool»
	Reserved : reserved •FieldNames ; «bool»
	Reserved : reserved •Ranges ; «bytes»
	Reserved : reserved •FieldNames ; «bytes»
	Reserved : reserved •Ranges ; «double»
	Reserved : reserved •FieldNames ; «double»
	Reserved : reserved •Ranges ; «emptyStatement»
	Reserved : reserved •FieldNames ; «emptyStatement»
	Reserved : reserved •Ranges ; «enum»
	Reserved : reserved •FieldNames ; «enum»
	Reserved : reserved •Ranges ; «fixed32»
	Reserved : reserved •FieldNames ; «fixed32»
	Reserved : reserved •Ranges ; «fixed64»
	Reserved : reserved •FieldNames ; «fixed64»
	Reserved : reserved •Ranges ; «float»
	Reserved : reserved •FieldNames ; «float»
	Reserved : reserved •Ranges ; «ident»
	Reserved : reserved •FieldNames ; «ident»
	Reserved : reserved •Ranges ; «int32»
	Reserved : reserved •FieldNames ; «int32»
	Reserved : reserved •Ranges ; «int64»
	Reserved : reserved •FieldNames ; «int64»
	Reserved : reserved •Ranges ; «map»
	Reserved : reserved •FieldNames ; «map»
	Reserved : reserved •Ranges ; «message»
	Reserved : reserved •FieldNames ; «message»
	Reserved : reserved •Ranges ; «oneof»
	Reserved : reserved •FieldNames ; «oneof»
	Reserved : reserved •Ranges ; «option»
	Reserved : reserved •FieldNames ; «option»
	Reserved : reserved •Ranges ; «repeated»
	Reserved : reserved •FieldNames ; «repeated»
	Reserved : reserved •Ranges ; «reserved»
	Reserved : reserved •FieldNames ; «reserved»
	Reserved : reserved •Ranges ; «sfixed32»
	Reserved : reserved •FieldNames ; «sfixed32»
	Reserved : reserved •Ranges ; «sfixed64»
	Reserved : reserved •FieldNames ; «sfixed64»
	Reserved : reserved •Ranges ; «sint32»
	Reserved : reserved •FieldNames ; «sint32»
	Reserved : reserved •Ranges ; «sint64»
	Reserved : reserved •FieldNames ; «sint64»
	Reserved : reserved •Ranges ; «string»
	Reserved : reserved •FieldNames ; «string»
	Reserved : reserved •Ranges ; «uint32»
	Reserved : reserved •FieldNames ; «uint32»
	Reserved : reserved •Ranges ; «uint64»
	Reserved : reserved •FieldNames ; «uint64»
	Ranges : •Range «;»
	Ranges : •Ranges , Range «;»
	FieldNames : •FieldName «;»
	FieldNames : •FieldNames , FieldName «;»
	Range : •intLit «;»
	Range : •intLit to intLit «;»
	Range : •intLit to max «;»
	Ranges : •Range «,»
	Ranges : •Ranges , Range «,»
	FieldName : •ident «;»
	FieldNames : •FieldName «,»
	FieldNames : •FieldNames , FieldName «,»
	Range : •intLit «,»
	Range : •intLit to intLit «,»
	Range : •intLit to max «,»
	FieldName : •ident «,»
}
Transitions:
	ident -> 142
	intLit -> 143
	FieldName -> 144
	Ranges -> 145
	FieldNames -> 146
	Range -> 147


S102{
	Enum : enum •EnumName EnumBody «}»
	Enum : enum •EnumName EnumBody «.»
	Enum : enum •EnumName EnumBody «bool»
	Enum : enum •EnumName EnumBody «bytes»
	Enum : enum •EnumName EnumBody «double»
	Enum : enum •EnumName EnumBody «emptyStatement»
	Enum : enum •EnumName EnumBody «enum»
	Enum : enum •EnumName EnumBody «fixed32»
	Enum : enum •EnumName EnumBody «fixed64»
	Enum : enum •EnumName EnumBody «float»
	Enum : enum •EnumName EnumBody «ident»
	Enum : enum •EnumName EnumBody «int32»
	Enum : enum •EnumName EnumBody «int64»
	Enum : enum •EnumName EnumBody «map»
	Enum : enum •EnumName EnumBody «message»
	Enum : enum •EnumName EnumBody «oneof»
	Enum : enum •EnumName EnumBody «option»
	Enum : enum •EnumName EnumBody «repeated»
	Enum : enum •EnumName EnumBody «reserved»
	Enum : enum •EnumName EnumBody «sfixed32»
	Enum : enum •EnumName EnumBody «sfixed64»
	Enum : enum •EnumName EnumBody «sint32»
	Enum : enum •EnumName EnumBody «sint64»
	Enum : enum •EnumName EnumBody «string»
	Enum : enum •EnumName EnumBody «uint32»
	Enum : enum •EnumName EnumBody «uint64»
	EnumName : •ident «{»
}
Transitions:
	ident -> 30
	EnumName -> 148


S103{
	EnumType : EnumName• «ident»
}
Transitions:


S104{
	Message : message •MessageName { } «}»
	Message : message •MessageName { MessageBody } «}»
	Message : message •MessageName { } «.»
	Message : message •MessageName { MessageBody } «.»
	Message : message •MessageName { } «bool»
	Message : message •MessageName { MessageBody } «bool»
	Message : message •MessageName { } «bytes»
	Message : message •MessageName { MessageBody } «bytes»
	Message : message •MessageName { } «double»
	Message : message •MessageName { MessageBody } «double»
	Message : message •MessageName { } «emptyStatement»
	Message : message •MessageName { MessageBody } «emptyStatement»
	Message : message •MessageName { } «enum»
	Message : message •MessageName { MessageBody } «enum»
	Message : message •MessageName { } «fixed32»
	Message : message •MessageName { MessageBody } «fixed32»
	Message : message •MessageName { } «fixed64»
	Message : message •MessageName { MessageBody } «fixed64»
	Message : message •MessageName { } «float»
	Message : message •MessageName { MessageBody } «float»
	Message : message •MessageName { } «ident»
	Message : message •MessageName { MessageBody } «ident»
	Message : message •MessageName { } «int32»
	Message : message •MessageName { MessageBody } «int32»
	Message : message •MessageName { } «int64»
	Message : message •MessageName { MessageBody } «int64»
	Message : message •MessageName { } «map»
	Message : message •MessageName { MessageBody } «map»
	Message : message •MessageName { } «message»
	Message : message •MessageName { MessageBody } «message»
	Message : message •MessageName { } «oneof»
	Message : message •MessageName { MessageBody } «oneof»
	Message : message •MessageName { } «option»
	Message : message •MessageName { MessageBody } «option»
	Message : message •MessageName { } «repeated»
	Message : message •MessageName { MessageBody } «repeated»
	Message : message •MessageName { } «reserved»
	Message : message •MessageName { MessageBody } «reserved»
	Message : message •MessageName { } «sfixed32»
	Message : message •MessageName { MessageBody } «sfixed32»
	Message : message •MessageName { } «sfixed64»
	Message : message •MessageName { MessageBody } «sfixed64»
	Message : message •MessageName { } «sint32»
	Message : message •MessageName { MessageBody } «sint32»
	Message : message •MessageName { } «sint64»
	Message : message •MessageName { MessageBody } «sint64»
	Message : message •MessageName { } «string»
	Message : message •MessageName { MessageBody } «string»
	Message : message •MessageName { } «uint32»
	Message : message •MessageName { MessageBody } «uint32»
	Message : message •MessageName { } «uint64»
	Message : message •MessageName { MessageBody } «uint64»
	MessageName : •ident «{»
}
Transitions:
	ident -> 32
	MessageName -> 149


S105{
	MessageType : MessageName• «ident»
}
Transitions:


S106{
	Message : message MessageName { MessageBody •} «$»
	Message : message MessageName { MessageBody •} «emptyStatement»
	Message : message MessageName { MessageBody •} «enum»
	Message : message MessageName { MessageBody •} «import»
	Message : message MessageName { MessageBody •} «message»
	Message : message MessageName { MessageBody •} «option»
	Message : message MessageName { MessageBody •} «package»
	Message : message MessageName { MessageBody •} «service»
	MessageBody : MessageBody •MessageContent «}»
	MessageBody : MessageBody •MessageContent «.»
	MessageBody : MessageBody •MessageContent «bool»
	MessageBody : MessageBody •MessageContent «bytes»
	MessageBody : MessageBody •MessageContent «double»
	MessageBody : MessageBody •MessageContent «emptyStatement»
	MessageBody : MessageBody •MessageContent «enum»
	MessageBody : MessageBody •MessageContent «fixed32»
	MessageBody : MessageBody •MessageContent «fixed64»
	MessageBody : MessageBody •MessageContent «float»
	MessageBody : MessageBody •MessageContent «ident»
	MessageBody : MessageBody •MessageContent «int32»
	MessageBody : MessageBody •MessageContent «int64»
	MessageBody : MessageBody •MessageContent «map»
	MessageBody : MessageBody •MessageContent «message»
	MessageBody : MessageBody •MessageContent «oneof»
	MessageBody : MessageBody •MessageContent «option»
	MessageBody : MessageBody •MessageContent «repeated»
	MessageBody : MessageBody •MessageContent «reserved»
	MessageBody : MessageBody •MessageContent «sfixed32»
	MessageBody : MessageBody •MessageContent «sfixed64»
	MessageBody : MessageBody •MessageContent «sint32»
	MessageBody : MessageBody •MessageContent «sint64»
	MessageBody : MessageBody •MessageContent «string»
	MessageBody : MessageBody •MessageContent «uint32»
	MessageBody : MessageBody •MessageContent «uint64»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageContent : •Field «.»
	MessageContent : •Enum «.»
	MessageContent : •Message «.»
	MessageContent : •Option «.»
	MessageContent : •Oneof «.»
	MessageContent : •MapField «.»
	MessageContent : •Reserved «.»
	MessageContent : •emptyStatement «.»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «ident»
	MessageContent : •Enum «ident»
	MessageContent : •Message «ident»
	MessageContent : •Option «ident»
	MessageContent : •Oneof «ident»
	MessageContent : •MapField «ident»
	MessageContent : •Reserved «ident»
	MessageContent : •emptyStatement «ident»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Field : •Type FieldName = FieldNumber ; «}»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type FieldName = FieldNumber ; «}»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum EnumName EnumBody «}»
	Message : •message MessageName { } «}»
	Message : •message MessageName { MessageBody } «}»
	Option : •option OptionName = Constant ; «}»
	Oneof : •oneof OneofName { } «}»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	Field : •Type FieldName = FieldNumber ; «.»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : •repeated Type FieldName = FieldNumber ; «.»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Enum : •enum EnumName EnumBody «.»
	Message : •message MessageName { } «.»
	Message : •message MessageName { MessageBody } «.»
	Option : •option OptionName = Constant ; «.»
	Oneof : •oneof OneofName { } «.»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	Reserved : •reserved Ranges ; «.»
	Reserved : •reserved FieldNames ; «.»
	Field : •Type FieldName = FieldNumber ; «bool»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type FieldName = FieldNumber ; «bool»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum EnumName EnumBody «bool»
	Message : •message MessageName { } «bool»
	Message : •message MessageName { MessageBody } «bool»
	Option : •option OptionName = Constant ; «bool»
	Oneof : •oneof OneofName { } «bool»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type FieldName = FieldNumber ; «bytes»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type FieldName = FieldNumber ; «bytes»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum EnumName EnumBody «bytes»
	Message : •message MessageName { } «bytes»
	Message : •message MessageName { MessageBody } «bytes»
	Option : •option OptionName = Constant ; «bytes»
	Oneof : •oneof OneofName { } «bytes»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type FieldName = FieldNumber ; «double»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type FieldName = FieldNumber ; «double»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum EnumName EnumBody «double»
	Message : •message MessageName { } «double»
	Message : •message MessageName { MessageBody } «double»
	Option : •option OptionName = Constant ; «double»
	Oneof : •oneof OneofName { } «double»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type FieldName = FieldNumber ; «emptyStatement»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	Oneof : •oneof OneofName { } «emptyStatement»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type FieldName = FieldNumber ; «enum»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type FieldName = FieldNumber ; «enum»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum EnumName EnumBody «enum»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Option : •option OptionName = Constant ; «enum»
	Oneof : •oneof OneofName { } «enum»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type FieldName = FieldNumber ; «fixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum EnumName EnumBody «fixed32»
	Message : •message MessageName { } «fixed32»
	Message : •message MessageName { MessageBody } «fixed32»
	Option : •option OptionName = Constant ; «fixed32»
	Oneof : •oneof OneofName { } «fixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type FieldName = FieldNumber ; «fixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum EnumName EnumBody «fixed64»
	Message : •message MessageName { } «fixed64»
	Message : •message MessageName { MessageBody } «fixed64»
	Option : •option OptionName = Constant ; «fixed64»
	Oneof : •oneof OneofName { } «fixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type FieldName = FieldNumber ; «float»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type FieldName = FieldNumber ; «float»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum EnumName EnumBody «float»
	Message : •message MessageName { } «float»
	Message : •message MessageName { MessageBody } «float»
	Option : •option OptionName = Constant ; «float»
	Oneof : •oneof OneofName { } «float»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type FieldName = FieldNumber ; «ident»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : •repeated Type FieldName = FieldNumber ; «ident»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Enum : •enum EnumName EnumBody «ident»
	Message : •message MessageName { } «ident»
	Message : •message MessageName { MessageBody } «ident»
	Option : •option OptionName = Constant ; «ident»
	Oneof : •oneof OneofName { } «ident»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	Reserved : •reserved Ranges ; «ident»
	Reserved : •reserved FieldNames ; «ident»
	Field : •Type FieldName = FieldNumber ; «int32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type FieldName = FieldNumber ; «int32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum EnumName EnumBody «int32»
	Message : •message MessageName { } «int32»
	Message : •message MessageName { MessageBody } «int32»
	Option : •option OptionName = Constant ; «int32»
	Oneof : •oneof OneofName { } «int32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type FieldName = FieldNumber ; «int64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type FieldName = FieldNumber ; «int64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum EnumName EnumBody «int64»
	Message : •message MessageName { } «int64»
	Message : •message MessageName { MessageBody } «int64»
	Option : •option OptionName = Constant ; «int64»
	Oneof : •oneof OneofName { } «int64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type FieldName = FieldNumber ; «map»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type FieldName = FieldNumber ; «map»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum EnumName EnumBody «map»
	Message : •message MessageName { } «map»
	Message : •message MessageName { MessageBody } «map»
	Option : •option OptionName = Constant ; «map»
	Oneof : •oneof OneofName { } «map»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type FieldName = FieldNumber ; «message»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type FieldName = FieldNumber ; «message»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum EnumName EnumBody «message»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Option : •option OptionName = Constant ; «message»
	Oneof : •oneof OneofName { } «message»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type FieldName = FieldNumber ; «oneof»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type FieldName = FieldNumber ; «oneof»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum EnumName EnumBody «oneof»
	Message : •message MessageName { } «oneof»
	Message : •message MessageName { MessageBody } «oneof»
	Option : •option OptionName = Constant ; «oneof»
	Oneof : •oneof OneofName { } «oneof»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type FieldName = FieldNumber ; «option»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type FieldName = FieldNumber ; «option»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum EnumName EnumBody «option»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Option : •option OptionName = Constant ; «option»
	Oneof : •oneof OneofName { } «option»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type FieldName = FieldNumber ; «repeated»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type FieldName = FieldNumber ; «repeated»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum EnumName EnumBody «repeated»
	Message : •message MessageName { } «repeated»
	Message : •message MessageName { MessageBody } «repeated»
	Option : •option OptionName = Constant ; «repeated»
	Oneof : •oneof OneofName { } «repeated»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type FieldName = FieldNumber ; «reserved»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type FieldName = FieldNumber ; «reserved»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum EnumName EnumBody «reserved»
	Message : •message MessageName { } «reserved»
	Message : •message MessageName { MessageBody } «reserved»
	Option : •option OptionName = Constant ; «reserved»
	Oneof : •oneof OneofName { } «reserved»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type FieldName = FieldNumber ; «sfixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum EnumName EnumBody «sfixed32»
	Message : •message MessageName { } «sfixed32»
	Message : •message MessageName { MessageBody } «sfixed32»
	Option : •option OptionName = Constant ; «sfixed32»
	Oneof : •oneof OneofName { } «sfixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type FieldName = FieldNumber ; «sfixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum EnumName EnumBody «sfixed64»
	Message : •message MessageName { } «sfixed64»
	Message : •message MessageName { MessageBody } «sfixed64»
	Option : •option OptionName = Constant ; «sfixed64»
	Oneof : •oneof OneofName { } «sfixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type FieldName = FieldNumber ; «sint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type FieldName = FieldNumber ; «sint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum EnumName EnumBody «sint32»
	Message : •message MessageName { } «sint32»
	Message : •message MessageName { MessageBody } «sint32»
	Option : •option OptionName = Constant ; «sint32»
	Oneof : •oneof OneofName { } «sint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type FieldName = FieldNumber ; «sint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type FieldName = FieldNumber ; «sint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum EnumName EnumBody «sint64»
	Message : •message MessageName { } «sint64»
	Message : •message MessageName { MessageBody } «sint64»
	Option : •option OptionName = Constant ; «sint64»
	Oneof : •oneof OneofName { } «sint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type FieldName = FieldNumber ; «string»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type FieldName = FieldNumber ; «string»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum EnumName EnumBody «string»
	Message : •message MessageName { } «string»
	Message : •message MessageName { MessageBody } «string»
	Option : •option OptionName = Constant ; «string»
	Oneof : •oneof OneofName { } «string»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type FieldName = FieldNumber ; «uint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type FieldName = FieldNumber ; «uint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum EnumName EnumBody «uint32»
	Message : •message MessageName { } «uint32»
	Message : •message MessageName { MessageBody } «uint32»
	Option : •option OptionName = Constant ; «uint32»
	Oneof : •oneof OneofName { } «uint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type FieldName = FieldNumber ; «uint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type FieldName = FieldNumber ; «uint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum EnumName EnumBody «uint64»
	Message : •message MessageName { } «uint64»
	Message : •message MessageName { MessageBody } «uint64»
	Option : •option OptionName = Constant ; «uint64»
	Oneof : •oneof OneofName { } «uint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	Option -> 68
	emptyStatement -> 69
	option -> 70
	ident -> 71
	. -> 72
	Message -> 73
	Enum -> 74
	Type -> 75
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	Field -> 93
	repeated -> 94
	Oneof -> 95
	oneof -> 96
	MapField -> 98
	map -> 99
	Reserved -> 100
	reserved -> 101
	enum -> 102
	EnumName -> 103
	message -> 104
	MessageName -> 105
	Idents -> 108
	} -> 150
	MessageContent -> 151


S107{
	MessageBody : MessageContent• «}»
	MessageBody : MessageContent• «.»
	MessageBody : MessageContent• «bool»
	MessageBody : MessageContent• «bytes»
	MessageBody : MessageContent• «double»
	MessageBody : MessageContent• «emptyStatement»
	MessageBody : MessageContent• «enum»
	MessageBody : MessageContent• «fixed32»
	MessageBody : MessageContent• «fixed64»
	MessageBody : MessageContent• «float»
	MessageBody : MessageContent• «ident»
	MessageBody : MessageContent• «int32»
	MessageBody : MessageContent• «int64»
	MessageBody : MessageContent• «map»
	MessageBody : MessageContent• «message»
	MessageBody : MessageContent• «oneof»
	MessageBody : MessageContent• «option»
	MessageBody : MessageContent• «repeated»
	MessageBody : MessageContent• «reserved»
	MessageBody : MessageContent• «sfixed32»
	MessageBody : MessageContent• «sfixed64»
	MessageBody : MessageContent• «sint32»
	MessageBody : MessageContent• «sint64»
	MessageBody : MessageContent• «string»
	MessageBody : MessageContent• «uint32»
	MessageBody : MessageContent• «uint64»
}
Transitions:


S108{
	MessageType : Idents •MessageName «ident»
	Idents : Idents •ident . «ident»
	MessageName : •ident «ident»
}
Transitions:
	ident -> 152
	MessageName -> 153


S109{
	ServiceBody : Option• «}»
	ServiceBody : Option• «emptyStatement»
	ServiceBody : Option• «option»
	ServiceBody : Option• «rpc»
}
Transitions:


S110{
	ServiceBody : emptyStatement• «}»
	ServiceBody : emptyStatement• «emptyStatement»
	ServiceBody : emptyStatement• «option»
	ServiceBody : emptyStatement• «rpc»
}
Transitions:


S111{
	Option : option •OptionName = Constant ; «}»
	Option : option •OptionName = Constant ; «emptyStatement»
	Option : option •OptionName = Constant ; «option»
	Option : option •OptionName = Constant ; «rpc»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 154


S112{
	Service : service ServiceName { }• «$»
	Service : service ServiceName { }• «emptyStatement»
	Service : service ServiceName { }• «enum»
	Service : service ServiceName { }• «import»
	Service : service ServiceName { }• «message»
	Service : service ServiceName { }• «option»
	Service : service ServiceName { }• «package»
	Service : service ServiceName { }• «service»
}
Transitions:


S113{
	Service : service ServiceName { ServiceBodies •} «$»
	Service : service ServiceName { ServiceBodies •} «emptyStatement»
	Service : service ServiceName { ServiceBodies •} «enum»
	Service : service ServiceName { ServiceBodies •} «import»
	Service : service ServiceName { ServiceBodies •} «message»
	Service : service ServiceName { ServiceBodies •} «option»
	Service : service ServiceName { ServiceBodies •} «package»
	Service : service ServiceName { ServiceBodies •} «service»
	ServiceBodies : ServiceBodies •ServiceBody «}»
	ServiceBodies : ServiceBodies •ServiceBody «emptyStatement»
	ServiceBodies : ServiceBodies •ServiceBody «option»
	ServiceBodies : ServiceBodies •ServiceBody «rpc»
	ServiceBody : •Option «}»
	ServiceBody : •Rpc «}»
	ServiceBody : •emptyStatement «}»
	ServiceBody : •Option «emptyStatement»
	ServiceBody : •Rpc «emptyStatement»
	ServiceBody : •emptyStatement «emptyStatement»
	ServiceBody : •Option «option»
	ServiceBody : •Rpc «option»
	ServiceBody : •emptyStatement «option»
	ServiceBody : •Option «rpc»
	ServiceBody : •Rpc «rpc»
	ServiceBody : •emptyStatement «rpc»
	Option : •option OptionName = Constant ; «}»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Option : •option OptionName = Constant ; «emptyStatement»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Option : •option OptionName = Constant ; «option»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Option : •option OptionName = Constant ; «rpc»
	Rpc : •rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	Rpc : •rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	Option -> 109
	emptyStatement -> 110
	option -> 111
	Rpc -> 115
	rpc -> 116
	} -> 155
	ServiceBody -> 156


S114{
	ServiceBodies : ServiceBody• «}»
	ServiceBodies : ServiceBody• «emptyStatement»
	ServiceBodies : ServiceBody• «option»
	ServiceBodies : ServiceBody• «rpc»
}
Transitions:


S115{
	ServiceBody : Rpc• «}»
	ServiceBody : Rpc• «emptyStatement»
	ServiceBody : Rpc• «option»
	ServiceBody : Rpc• «rpc»
}
Transitions:


S116{
	Rpc : rpc •RpcName ( MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc •RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc •RpcName ( MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc •RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc •RpcName ( MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc •RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc •RpcName ( MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc •RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	Rpc : rpc •RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	RpcName : •ident «(»
}
Transitions:
	ident -> 157
	RpcName -> 158


S117{
	Syntax : syntax = quote proto3 quote •; «$»
	Syntax : syntax = quote proto3 quote •; «emptyStatement»
	Syntax : syntax = quote proto3 quote •; «enum»
	Syntax : syntax = quote proto3 quote •; «import»
	Syntax : syntax = quote proto3 quote •; «message»
	Syntax : syntax = quote proto3 quote •; «option»
	Syntax : syntax = quote proto3 quote •; «package»
	Syntax : syntax = quote proto3 quote •; «service»
}
Transitions:
	; -> 159


S118{
	Option : option OptionName = Constant ;• «$»
	Option : option OptionName = Constant ;• «emptyStatement»
	Option : option OptionName = Constant ;• «enum»
	Option : option OptionName = Constant ;• «import»
	Option : option OptionName = Constant ;• «message»
	Option : option OptionName = Constant ;• «option»
	Option : option OptionName = Constant ;• «package»
	Option : option OptionName = Constant ;• «service»
}
Transitions:


S119{
	Constant : - intLit• «;»
}
Transitions:


S120{
	Constant : - floatLit• «;»
}
Transitions:


S121{
	Constant : + intLit• «;»
}
Transitions:


S122{
	Constant : + floatLit• «;»
}
Transitions:


S123{
	DotRepeatedIdents : DotRepeatedIdents . ident• «=»
	DotRepeatedIdents : DotRepeatedIdents . ident• «.»
}
Transitions:


S124{
	OptionName : ( FullIdent ) DotRepeatedIdents• «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «=»
	DotRepeatedIdents : DotRepeatedIdents •. ident «.»
}
Transitions:
	. -> 58


S125{
	FullIdent : FullIdent . ident• «)»
	FullIdent : FullIdent . ident• «.»
}
Transitions:


S126{
	EnumBody : { Option }• «$»
	EnumBody : { Option }• «emptyStatement»
	EnumBody : { Option }• «enum»
	EnumBody : { Option }• «import»
	EnumBody : { Option }• «message»
	EnumBody : { Option }• «option»
	EnumBody : { Option }• «package»
	EnumBody : { Option }• «service»
}
Transitions:


S127{
	EnumBody : { emptyStatement }• «$»
	EnumBody : { emptyStatement }• «emptyStatement»
	EnumBody : { emptyStatement }• «enum»
	EnumBody : { emptyStatement }• «import»
	EnumBody : { emptyStatement }• «message»
	EnumBody : { emptyStatement }• «option»
	EnumBody : { emptyStatement }• «package»
	EnumBody : { emptyStatement }• «service»
}
Transitions:


S128{
	Option : option OptionName •= Constant ; «}»
}
Transitions:
	= -> 160


S129{
	EnumField : ident = •intLit ; «}»
	EnumField : ident = •intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	intLit -> 161


S130{
	EnumBody : { EnumField }• «$»
	EnumBody : { EnumField }• «emptyStatement»
	EnumBody : { EnumField }• «enum»
	EnumBody : { EnumField }• «import»
	EnumBody : { EnumField }• «message»
	EnumBody : { EnumField }• «option»
	EnumBody : { EnumField }• «package»
	EnumBody : { EnumField }• «service»
}
Transitions:


S131{
	Option : option OptionName •= Constant ; «}»
	Option : option OptionName •= Constant ; «.»
	Option : option OptionName •= Constant ; «bool»
	Option : option OptionName •= Constant ; «bytes»
	Option : option OptionName •= Constant ; «double»
	Option : option OptionName •= Constant ; «emptyStatement»
	Option : option OptionName •= Constant ; «enum»
	Option : option OptionName •= Constant ; «fixed32»
	Option : option OptionName •= Constant ; «fixed64»
	Option : option OptionName •= Constant ; «float»
	Option : option OptionName •= Constant ; «ident»
	Option : option OptionName •= Constant ; «int32»
	Option : option OptionName •= Constant ; «int64»
	Option : option OptionName •= Constant ; «map»
	Option : option OptionName •= Constant ; «message»
	Option : option OptionName •= Constant ; «oneof»
	Option : option OptionName •= Constant ; «option»
	Option : option OptionName •= Constant ; «repeated»
	Option : option OptionName •= Constant ; «reserved»
	Option : option OptionName •= Constant ; «sfixed32»
	Option : option OptionName •= Constant ; «sfixed64»
	Option : option OptionName •= Constant ; «sint32»
	Option : option OptionName •= Constant ; «sint64»
	Option : option OptionName •= Constant ; «string»
	Option : option OptionName •= Constant ; «uint32»
	Option : option OptionName •= Constant ; «uint64»
}
Transitions:
	= -> 162


S132{
	Idents : ident .• «ident»
}
Transitions:


S133{
	EnumType : . EnumName• «ident»
}
Transitions:


S134{
	MessageType : . MessageName• «ident»
}
Transitions:


S135{
	MessageType : . Idents •MessageName «ident»
	EnumType : . Idents •EnumName «ident»
	Idents : Idents •ident . «ident»
	MessageName : •ident «ident»
	EnumName : •ident «ident»
}
Transitions:
	ident -> 163
	EnumName -> 164
	MessageName -> 165


S136{
	FieldName : ident• «=»
}
Transitions:


S137{
	Field : Type FieldName •= FieldNumber ; «}»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «}»
	Field : Type FieldName •= FieldNumber ; «.»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «.»
	Field : Type FieldName •= FieldNumber ; «bool»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «bool»
	Field : Type FieldName •= FieldNumber ; «bytes»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type FieldName •= FieldNumber ; «double»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «double»
	Field : Type FieldName •= FieldNumber ; «emptyStatement»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type FieldName •= FieldNumber ; «enum»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «enum»
	Field : Type FieldName •= FieldNumber ; «fixed32»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type FieldName •= FieldNumber ; «fixed64»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type FieldName •= FieldNumber ; «float»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «float»
	Field : Type FieldName •= FieldNumber ; «ident»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «ident»
	Field : Type FieldName •= FieldNumber ; «int32»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «int32»
	Field : Type FieldName •= FieldNumber ; «int64»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «int64»
	Field : Type FieldName •= FieldNumber ; «map»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «map»
	Field : Type FieldName •= FieldNumber ; «message»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «message»
	Field : Type FieldName •= FieldNumber ; «oneof»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type FieldName •= FieldNumber ; «option»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «option»
	Field : Type FieldName •= FieldNumber ; «repeated»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type FieldName •= FieldNumber ; «reserved»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type FieldName •= FieldNumber ; «sfixed32»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type FieldName •= FieldNumber ; «sfixed64»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type FieldName •= FieldNumber ; «sint32»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type FieldName •= FieldNumber ; «sint64»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type FieldName •= FieldNumber ; «string»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «string»
	Field : Type FieldName •= FieldNumber ; «uint32»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type FieldName •= FieldNumber ; «uint64»
	Field : Type FieldName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 166


S138{
	Field : repeated Type •FieldName = FieldNumber ; «}»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type •FieldName = FieldNumber ; «.»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : repeated Type •FieldName = FieldNumber ; «bool»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type •FieldName = FieldNumber ; «bytes»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type •FieldName = FieldNumber ; «double»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type •FieldName = FieldNumber ; «emptyStatement»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type •FieldName = FieldNumber ; «enum»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type •FieldName = FieldNumber ; «fixed32»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type •FieldName = FieldNumber ; «fixed64»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type •FieldName = FieldNumber ; «float»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type •FieldName = FieldNumber ; «ident»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : repeated Type •FieldName = FieldNumber ; «int32»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type •FieldName = FieldNumber ; «int64»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type •FieldName = FieldNumber ; «map»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type •FieldName = FieldNumber ; «message»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type •FieldName = FieldNumber ; «oneof»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type •FieldName = FieldNumber ; «option»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type •FieldName = FieldNumber ; «repeated»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type •FieldName = FieldNumber ; «reserved»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type •FieldName = FieldNumber ; «sfixed32»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type •FieldName = FieldNumber ; «sfixed64»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type •FieldName = FieldNumber ; «sint32»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type •FieldName = FieldNumber ; «sint64»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type •FieldName = FieldNumber ; «string»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type •FieldName = FieldNumber ; «uint32»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type •FieldName = FieldNumber ; «uint64»
	Field : repeated Type •FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	FieldName : •ident «=»
}
Transitions:
	ident -> 136
	FieldName -> 167


S139{
	OneofName : ident• «{»
}
Transitions:


S140{
	Oneof : oneof OneofName •{ } «}»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof OneofName •{ } «.»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «.»
	Oneof : oneof OneofName •{ } «bool»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof OneofName •{ } «bytes»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof OneofName •{ } «double»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof OneofName •{ } «emptyStatement»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof OneofName •{ } «enum»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof OneofName •{ } «fixed32»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof OneofName •{ } «fixed64»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof OneofName •{ } «float»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof OneofName •{ } «ident»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «ident»
	Oneof : oneof OneofName •{ } «int32»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof OneofName •{ } «int64»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof OneofName •{ } «map»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof OneofName •{ } «message»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof OneofName •{ } «oneof»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof OneofName •{ } «option»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof OneofName •{ } «repeated»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof OneofName •{ } «reserved»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof OneofName •{ } «sfixed32»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof OneofName •{ } «sfixed64»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof OneofName •{ } «sint32»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof OneofName •{ } «sint64»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof OneofName •{ } «string»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof OneofName •{ } «uint32»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof OneofName •{ } «uint64»
	Oneof : oneof OneofName •{ RepeatedOneOfFieldOrEmpty } «uint64»
}
Transitions:
	{ -> 168


S141{
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «}»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «.»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «double»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «float»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «map»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «message»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «option»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «string»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < •KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : map < •KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	KeyType : •int32 «,»
	KeyType : •int64 «,»
	KeyType : •uint32 «,»
	KeyType : •uint64 «,»
	KeyType : •sint32 «,»
	KeyType : •sint64 «,»
	KeyType : •fixed32 «,»
	KeyType : •fixed64 «,»
	KeyType : •sfixed32 «,»
	KeyType : •sfixed64 «,»
	KeyType : •bool «,»
	KeyType : •string «,»
}
Transitions:
	int32 -> 169
	int64 -> 170
	uint32 -> 171
	uint64 -> 172
	sint32 -> 173
	sint64 -> 174
	fixed32 -> 175
	fixed64 -> 176
	sfixed32 -> 177
	sfixed64 -> 178
	bool -> 179
	string -> 180
	KeyType -> 181


S142{
	FieldName : ident• «;»
	FieldName : ident• «,»
}
Transitions:


S143{
	Range : intLit• «;»
	Range : intLit •to intLit «;»
	Range : intLit •to max «;»
	Range : intLit• «,»
	Range : intLit •to intLit «,»
	Range : intLit •to max «,»
}
Transitions:
	to -> 182


S144{
	FieldNames : FieldName• «;»
	FieldNames : FieldName• «,»
}
Transitions:


S145{
	Reserved : reserved Ranges •; «}»
	Reserved : reserved Ranges •; «.»
	Reserved : reserved Ranges •; «bool»
	Reserved : reserved Ranges •; «bytes»
	Reserved : reserved Ranges •; «double»
	Reserved : reserved Ranges •; «emptyStatement»
	Reserved : reserved Ranges •; «enum»
	Reserved : reserved Ranges •; «fixed32»
	Reserved : reserved Ranges •; «fixed64»
	Reserved : reserved Ranges •; «float»
	Reserved : reserved Ranges •; «ident»
	Reserved : reserved Ranges •; «int32»
	Reserved : reserved Ranges •; «int64»
	Reserved : reserved Ranges •; «map»
	Reserved : reserved Ranges •; «message»
	Reserved : reserved Ranges •; «oneof»
	Reserved : reserved Ranges •; «option»
	Reserved : reserved Ranges •; «repeated»
	Reserved : reserved Ranges •; «reserved»
	Reserved : reserved Ranges •; «sfixed32»
	Reserved : reserved Ranges •; «sfixed64»
	Reserved : reserved Ranges •; «sint32»
	Reserved : reserved Ranges •; «sint64»
	Reserved : reserved Ranges •; «string»
	Reserved : reserved Ranges •; «uint32»
	Reserved : reserved Ranges •; «uint64»
	Ranges : Ranges •, Range «;»
	Ranges : Ranges •, Range «,»
}
Transitions:
	; -> 183
	, -> 184


S146{
	Reserved : reserved FieldNames •; «}»
	Reserved : reserved FieldNames •; «.»
	Reserved : reserved FieldNames •; «bool»
	Reserved : reserved FieldNames •; «bytes»
	Reserved : reserved FieldNames •; «double»
	Reserved : reserved FieldNames •; «emptyStatement»
	Reserved : reserved FieldNames •; «enum»
	Reserved : reserved FieldNames •; «fixed32»
	Reserved : reserved FieldNames •; «fixed64»
	Reserved : reserved FieldNames •; «float»
	Reserved : reserved FieldNames •; «ident»
	Reserved : reserved FieldNames •; «int32»
	Reserved : reserved FieldNames •; «int64»
	Reserved : reserved FieldNames •; «map»
	Reserved : reserved FieldNames •; «message»
	Reserved : reserved FieldNames •; «oneof»
	Reserved : reserved FieldNames •; «option»
	Reserved : reserved FieldNames •; «repeated»
	Reserved : reserved FieldNames •; «reserved»
	Reserved : reserved FieldNames •; «sfixed32»
	Reserved : reserved FieldNames •; «sfixed64»
	Reserved : reserved FieldNames •; «sint32»
	Reserved : reserved FieldNames •; «sint64»
	Reserved : reserved FieldNames •; «string»
	Reserved : reserved FieldNames •; «uint32»
	Reserved : reserved FieldNames •; «uint64»
	FieldNames : FieldNames •, FieldName «;»
	FieldNames : FieldNames •, FieldName «,»
}
Transitions:
	; -> 185
	, -> 186


S147{
	Ranges : Range• «;»
	Ranges : Range• «,»
}
Transitions:


S148{
	Enum : enum EnumName •EnumBody «}»
	Enum : enum EnumName •EnumBody «.»
	Enum : enum EnumName •EnumBody «bool»
	Enum : enum EnumName •EnumBody «bytes»
	Enum : enum EnumName •EnumBody «double»
	Enum : enum EnumName •EnumBody «emptyStatement»
	Enum : enum EnumName •EnumBody «enum»
	Enum : enum EnumName •EnumBody «fixed32»
	Enum : enum EnumName •EnumBody «fixed64»
	Enum : enum EnumName •EnumBody «float»
	Enum : enum EnumName •EnumBody «ident»
	Enum : enum EnumName •EnumBody «int32»
	Enum : enum EnumName •EnumBody «int64»
	Enum : enum EnumName •EnumBody «map»
	Enum : enum EnumName •EnumBody «message»
	Enum : enum EnumName •EnumBody «oneof»
	Enum : enum EnumName •EnumBody «option»
	Enum : enum EnumName •EnumBody «repeated»
	Enum : enum EnumName •EnumBody «reserved»
	Enum : enum EnumName •EnumBody «sfixed32»
	Enum : enum EnumName •EnumBody «sfixed64»
	Enum : enum EnumName •EnumBody «sint32»
	Enum : enum EnumName •EnumBody «sint64»
	Enum : enum EnumName •EnumBody «string»
	Enum : enum EnumName •EnumBody «uint32»
	Enum : enum EnumName •EnumBody «uint64»
	EnumBody : •{ } «}»
	EnumBody : •{ Option } «}»
	EnumBody : •{ EnumField } «}»
	EnumBody : •{ emptyStatement } «}»
	EnumBody : •{ } «.»
	EnumBody : •{ Option } «.»
	EnumBody : •{ EnumField } «.»
	EnumBody : •{ emptyStatement } «.»
	EnumBody : •{ } «bool»
	EnumBody : •{ Option } «bool»
	EnumBody : •{ EnumField } «bool»
	EnumBody : •{ emptyStatement } «bool»
	EnumBody : •{ } «bytes»
	EnumBody : •{ Option } «bytes»
	EnumBody : •{ EnumField } «bytes»
	EnumBody : •{ emptyStatement } «bytes»
	EnumBody : •{ } «double»
	EnumBody : •{ Option } «double»
	EnumBody : •{ EnumField } «double»
	EnumBody : •{ emptyStatement } «double»
	EnumBody : •{ } «emptyStatement»
	EnumBody : •{ Option } «emptyStatement»
	EnumBody : •{ EnumField } «emptyStatement»
	EnumBody : •{ emptyStatement } «emptyStatement»
	EnumBody : •{ } «enum»
	EnumBody : •{ Option } «enum»
	EnumBody : •{ EnumField } «enum»
	EnumBody : •{ emptyStatement } «enum»
	EnumBody : •{ } «fixed32»
	EnumBody : •{ Option } «fixed32»
	EnumBody : •{ EnumField } «fixed32»
	EnumBody : •{ emptyStatement } «fixed32»
	EnumBody : •{ } «fixed64»
	EnumBody : •{ Option } «fixed64»
	EnumBody : •{ EnumField } «fixed64»
	EnumBody : •{ emptyStatement } «fixed64»
	EnumBody : •{ } «float»
	EnumBody : •{ Option } «float»
	EnumBody : •{ EnumField } «float»
	EnumBody : •{ emptyStatement } «float»
	EnumBody : •{ } «ident»
	EnumBody : •{ Option } «ident»
	EnumBody : •{ EnumField } «ident»
	EnumBody : •{ emptyStatement } «ident»
	EnumBody : •{ } «int32»
	EnumBody : •{ Option } «int32»
	EnumBody : •{ EnumField } «int32»
	EnumBody : •{ emptyStatement } «int32»
	EnumBody : •{ } «int64»
	EnumBody : •{ Option } «int64»
	EnumBody : •{ EnumField } «int64»
	EnumBody : •{ emptyStatement } «int64»
	EnumBody : •{ } «map»
	EnumBody : •{ Option } «map»
	EnumBody : •{ EnumField } «map»
	EnumBody : •{ emptyStatement } «map»
	EnumBody : •{ } «message»
	EnumBody : •{ Option } «message»
	EnumBody : •{ EnumField } «message»
	EnumBody : •{ emptyStatement } «message»
	EnumBody : •{ } «oneof»
	EnumBody : •{ Option } «oneof»
	EnumBody : •{ EnumField } «oneof»
	EnumBody : •{ emptyStatement } «oneof»
	EnumBody : •{ } «option»
	EnumBody : •{ Option } «option»
	EnumBody : •{ EnumField } «option»
	EnumBody : •{ emptyStatement } «option»
	EnumBody : •{ } «repeated»
	EnumBody : •{ Option } «repeated»
	EnumBody : •{ EnumField } «repeated»
	EnumBody : •{ emptyStatement } «repeated»
	EnumBody : •{ } «reserved»
	EnumBody : •{ Option } «reserved»
	EnumBody : •{ EnumField } «reserved»
	EnumBody : •{ emptyStatement } «reserved»
	EnumBody : •{ } «sfixed32»
	EnumBody : •{ Option } «sfixed32»
	EnumBody : •{ EnumField } «sfixed32»
	EnumBody : •{ emptyStatement } «sfixed32»
	EnumBody : •{ } «sfixed64»
	EnumBody : •{ Option } «sfixed64»
	EnumBody : •{ EnumField } «sfixed64»
	EnumBody : •{ emptyStatement } «sfixed64»
	EnumBody : •{ } «sint32»
	EnumBody : •{ Option } «sint32»
	EnumBody : •{ EnumField } «sint32»
	EnumBody : •{ emptyStatement } «sint32»
	EnumBody : •{ } «sint64»
	EnumBody : •{ Option } «sint64»
	EnumBody : •{ EnumField } «sint64»
	EnumBody : •{ emptyStatement } «sint64»
	EnumBody : •{ } «string»
	EnumBody : •{ Option } «string»
	EnumBody : •{ EnumField } «string»
	EnumBody : •{ emptyStatement } «string»
	EnumBody : •{ } «uint32»
	EnumBody : •{ Option } «uint32»
	EnumBody : •{ EnumField } «uint32»
	EnumBody : •{ emptyStatement } «uint32»
	EnumBody : •{ } «uint64»
	EnumBody : •{ Option } «uint64»
	EnumBody : •{ EnumField } «uint64»
	EnumBody : •{ emptyStatement } «uint64»
}
Transitions:
	{ -> 187
	EnumBody -> 188


S149{
	Message : message MessageName •{ } «}»
	Message : message MessageName •{ MessageBody } «}»
	Message : message MessageName •{ } «.»
	Message : message MessageName •{ MessageBody } «.»
	Message : message MessageName •{ } «bool»
	Message : message MessageName •{ MessageBody } «bool»
	Message : message MessageName •{ } «bytes»
	Message : message MessageName •{ MessageBody } «bytes»
	Message : message MessageName •{ } «double»
	Message : message MessageName •{ MessageBody } «double»
	Message : message MessageName •{ } «emptyStatement»
	Message : message MessageName •{ MessageBody } «emptyStatement»
	Message : message MessageName •{ } «enum»
	Message : message MessageName •{ MessageBody } «enum»
	Message : message MessageName •{ } «fixed32»
	Message : message MessageName •{ MessageBody } «fixed32»
	Message : message MessageName •{ } «fixed64»
	Message : message MessageName •{ MessageBody } «fixed64»
	Message : message MessageName •{ } «float»
	Message : message MessageName •{ MessageBody } «float»
	Message : message MessageName •{ } «ident»
	Message : message MessageName •{ MessageBody } «ident»
	Message : message MessageName •{ } «int32»
	Message : message MessageName •{ MessageBody } «int32»
	Message : message MessageName •{ } «int64»
	Message : message MessageName •{ MessageBody } «int64»
	Message : message MessageName •{ } «map»
	Message : message MessageName •{ MessageBody } «map»
	Message : message MessageName •{ } «message»
	Message : message MessageName •{ MessageBody } «message»
	Message : message MessageName •{ } «oneof»
	Message : message MessageName •{ MessageBody } «oneof»
	Message : message MessageName •{ } «option»
	Message : message MessageName •{ MessageBody } «option»
	Message : message MessageName •{ } «repeated»
	Message : message MessageName •{ MessageBody } «repeated»
	Message : message MessageName •{ } «reserved»
	Message : message MessageName •{ MessageBody } «reserved»
	Message : message MessageName •{ } «sfixed32»
	Message : message MessageName •{ MessageBody } «sfixed32»
	Message : message MessageName •{ } «sfixed64»
	Message : message MessageName •{ MessageBody } «sfixed64»
	Message : message MessageName •{ } «sint32»
	Message : message MessageName •{ MessageBody } «sint32»
	Message : message MessageName •{ } «sint64»
	Message : message MessageName •{ MessageBody } «sint64»
	Message : message MessageName •{ } «string»
	Message : message MessageName •{ MessageBody } «string»
	Message : message MessageName •{ } «uint32»
	Message : message MessageName •{ MessageBody } «uint32»
	Message : message MessageName •{ } «uint64»
	Message : message MessageName •{ MessageBody } «uint64»
}
Transitions:
	{ -> 189


S150{
	Message : message MessageName { MessageBody }• «$»
	Message : message MessageName { MessageBody }• «emptyStatement»
	Message : message MessageName { MessageBody }• «enum»
	Message : message MessageName { MessageBody }• «import»
	Message : message MessageName { MessageBody }• «message»
	Message : message MessageName { MessageBody }• «option»
	Message : message MessageName { MessageBody }• «package»
	Message : message MessageName { MessageBody }• «service»
}
Transitions:


S151{
	MessageBody : MessageBody MessageContent• «}»
	MessageBody : MessageBody MessageContent• «.»
	MessageBody : MessageBody MessageContent• «bool»
	MessageBody : MessageBody MessageContent• «bytes»
	MessageBody : MessageBody MessageContent• «double»
	MessageBody : MessageBody MessageContent• «emptyStatement»
	MessageBody : MessageBody MessageContent• «enum»
	MessageBody : MessageBody MessageContent• «fixed32»
	MessageBody : MessageBody MessageContent• «fixed64»
	MessageBody : MessageBody MessageContent• «float»
	MessageBody : MessageBody MessageContent• «ident»
	MessageBody : MessageBody MessageContent• «int32»
	MessageBody : MessageBody MessageContent• «int64»
	MessageBody : MessageBody MessageContent• «map»
	MessageBody : MessageBody MessageContent• «message»
	MessageBody : MessageBody MessageContent• «oneof»
	MessageBody : MessageBody MessageContent• «option»
	MessageBody : MessageBody MessageContent• «repeated»
	MessageBody : MessageBody MessageContent• «reserved»
	MessageBody : MessageBody MessageContent• «sfixed32»
	MessageBody : MessageBody MessageContent• «sfixed64»
	MessageBody : MessageBody MessageContent• «sint32»
	MessageBody : MessageBody MessageContent• «sint64»
	MessageBody : MessageBody MessageContent• «string»
	MessageBody : MessageBody MessageContent• «uint32»
	MessageBody : MessageBody MessageContent• «uint64»
}
Transitions:


S152{
	Idents : Idents ident •. «ident»
	MessageName : ident• «ident»
}
Transitions:
	. -> 190


S153{
	MessageType : Idents MessageName• «ident»
}
Transitions:


S154{
	Option : option OptionName •= Constant ; «}»
	Option : option OptionName •= Constant ; «emptyStatement»
	Option : option OptionName •= Constant ; «option»
	Option : option OptionName •= Constant ; «rpc»
}
Transitions:
	= -> 191


S155{
	Service : service ServiceName { ServiceBodies }• «$»
	Service : service ServiceName { ServiceBodies }• «emptyStatement»
	Service : service ServiceName { ServiceBodies }• «enum»
	Service : service ServiceName { ServiceBodies }• «import»
	Service : service ServiceName { ServiceBodies }• «message»
	Service : service ServiceName { ServiceBodies }• «option»
	Service : service ServiceName { ServiceBodies }• «package»
	Service : service ServiceName { ServiceBodies }• «service»
}
Transitions:


S156{
	ServiceBodies : ServiceBodies ServiceBody• «}»
	ServiceBodies : ServiceBodies ServiceBody• «emptyStatement»
	ServiceBodies : ServiceBodies ServiceBody• «option»
	ServiceBodies : ServiceBodies ServiceBody• «rpc»
}
Transitions:


S157{
	RpcName : ident• «(»
}
Transitions:


S158{
	Rpc : rpc RpcName •( MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName •( stream MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName •( MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName •( stream MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName •( MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName •( stream MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName •( MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName •( stream MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName •( MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName •( stream MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName •( MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName •( stream MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName •( MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName •( stream MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName •( MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName •( stream MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	( -> 192


S159{
	Syntax : syntax = quote proto3 quote ;• «$»
	Syntax : syntax = quote proto3 quote ;• «emptyStatement»
	Syntax : syntax = quote proto3 quote ;• «enum»
	Syntax : syntax = quote proto3 quote ;• «import»
	Syntax : syntax = quote proto3 quote ;• «message»
	Syntax : syntax = quote proto3 quote ;• «option»
	Syntax : syntax = quote proto3 quote ;• «package»
	Syntax : syntax = quote proto3 quote ;• «service»
}
Transitions:


S160{
	Option : option OptionName = •Constant ; «}»
	Constant : •FullIdent «;»
	Constant : •- intLit «;»
	Constant : •+ intLit «;»
	Constant : •- floatLit «;»
	Constant : •+ floatLit «;»
	Constant : •strLit «;»
	Constant : •boolLit «;»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	ident -> 26
	strLit -> 52
	FullIdent -> 53
	- -> 55
	+ -> 56
	boolLit -> 57
	Constant -> 193


S161{
	EnumField : ident = intLit •; «}»
	EnumField : ident = intLit •[ EnumValueOptions ] ; «}»
}
Transitions:
	; -> 194
	[ -> 195


S162{
	Option : option OptionName = •Constant ; «}»
	Option : option OptionName = •Constant ; «.»
	Option : option OptionName = •Constant ; «bool»
	Option : option OptionName = •Constant ; «bytes»
	Option : option OptionName = •Constant ; «double»
	Option : option OptionName = •Constant ; «emptyStatement»
	Option : option OptionName = •Constant ; «enum»
	Option : option OptionName = •Constant ; «fixed32»
	Option : option OptionName = •Constant ; «fixed64»
	Option : option OptionName = •Constant ; «float»
	Option : option OptionName = •Constant ; «ident»
	Option : option OptionName = •Constant ; «int32»
	Option : option OptionName = •Constant ; «int64»
	Option : option OptionName = •Constant ; «map»
	Option : option OptionName = •Constant ; «message»
	Option : option OptionName = •Constant ; «oneof»
	Option : option OptionName = •Constant ; «option»
	Option : option OptionName = •Constant ; «repeated»
	Option : option OptionName = •Constant ; «reserved»
	Option : option OptionName = •Constant ; «sfixed32»
	Option : option OptionName = •Constant ; «sfixed64»
	Option : option OptionName = •Constant ; «sint32»
	Option : option OptionName = •Constant ; «sint64»
	Option : option OptionName = •Constant ; «string»
	Option : option OptionName = •Constant ; «uint32»
	Option : option OptionName = •Constant ; «uint64»
	Constant : •FullIdent «;»
	Constant : •- intLit «;»
	Constant : •+ intLit «;»
	Constant : •- floatLit «;»
	Constant : •+ floatLit «;»
	Constant : •strLit «;»
	Constant : •boolLit «;»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	ident -> 26
	strLit -> 52
	FullIdent -> 53
	- -> 55
	+ -> 56
	boolLit -> 57
	Constant -> 196


S163{
	Idents : Idents ident •. «ident»
	MessageName : ident• «ident»
	EnumName : ident• «ident»
}
Transitions:
	. -> 190


S164{
	EnumType : . Idents EnumName• «ident»
}
Transitions:


S165{
	MessageType : . Idents MessageName• «ident»
}
Transitions:


S166{
	Field : Type FieldName = •FieldNumber ; «}»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «}»
	Field : Type FieldName = •FieldNumber ; «.»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «.»
	Field : Type FieldName = •FieldNumber ; «bool»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «bool»
	Field : Type FieldName = •FieldNumber ; «bytes»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	Field : Type FieldName = •FieldNumber ; «double»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «double»
	Field : Type FieldName = •FieldNumber ; «emptyStatement»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : Type FieldName = •FieldNumber ; «enum»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «enum»
	Field : Type FieldName = •FieldNumber ; «fixed32»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	Field : Type FieldName = •FieldNumber ; «fixed64»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	Field : Type FieldName = •FieldNumber ; «float»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «float»
	Field : Type FieldName = •FieldNumber ; «ident»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «ident»
	Field : Type FieldName = •FieldNumber ; «int32»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «int32»
	Field : Type FieldName = •FieldNumber ; «int64»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «int64»
	Field : Type FieldName = •FieldNumber ; «map»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «map»
	Field : Type FieldName = •FieldNumber ; «message»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «message»
	Field : Type FieldName = •FieldNumber ; «oneof»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «oneof»
	Field : Type FieldName = •FieldNumber ; «option»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «option»
	Field : Type FieldName = •FieldNumber ; «repeated»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «repeated»
	Field : Type FieldName = •FieldNumber ; «reserved»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «reserved»
	Field : Type FieldName = •FieldNumber ; «sfixed32»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : Type FieldName = •FieldNumber ; «sfixed64»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : Type FieldName = •FieldNumber ; «sint32»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	Field : Type FieldName = •FieldNumber ; «sint64»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	Field : Type FieldName = •FieldNumber ; «string»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «string»
	Field : Type FieldName = •FieldNumber ; «uint32»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	Field : Type FieldName = •FieldNumber ; «uint64»
	Field : Type FieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	FieldNumber -> 197
	intLit -> 198


S167{
	Field : repeated Type FieldName •= FieldNumber ; «}»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type FieldName •= FieldNumber ; «.»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «.»
	Field : repeated Type FieldName •= FieldNumber ; «bool»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type FieldName •= FieldNumber ; «bytes»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type FieldName •= FieldNumber ; «double»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type FieldName •= FieldNumber ; «emptyStatement»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type FieldName •= FieldNumber ; «enum»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type FieldName •= FieldNumber ; «fixed32»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type FieldName •= FieldNumber ; «fixed64»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type FieldName •= FieldNumber ; «float»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type FieldName •= FieldNumber ; «ident»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «ident»
	Field : repeated Type FieldName •= FieldNumber ; «int32»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type FieldName •= FieldNumber ; «int64»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type FieldName •= FieldNumber ; «map»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type FieldName •= FieldNumber ; «message»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type FieldName •= FieldNumber ; «oneof»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type FieldName •= FieldNumber ; «option»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type FieldName •= FieldNumber ; «repeated»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type FieldName •= FieldNumber ; «reserved»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type FieldName •= FieldNumber ; «sfixed32»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type FieldName •= FieldNumber ; «sfixed64»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type FieldName •= FieldNumber ; «sint32»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type FieldName •= FieldNumber ; «sint64»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type FieldName •= FieldNumber ; «string»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type FieldName •= FieldNumber ; «uint32»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type FieldName •= FieldNumber ; «uint64»
	Field : repeated Type FieldName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 199


S168{
	Oneof : oneof OneofName { •} «}»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «}»
	Oneof : oneof OneofName { •} «.»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «.»
	Oneof : oneof OneofName { •} «bool»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «bool»
	Oneof : oneof OneofName { •} «bytes»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «bytes»
	Oneof : oneof OneofName { •} «double»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «double»
	Oneof : oneof OneofName { •} «emptyStatement»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «emptyStatement»
	Oneof : oneof OneofName { •} «enum»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «enum»
	Oneof : oneof OneofName { •} «fixed32»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «fixed32»
	Oneof : oneof OneofName { •} «fixed64»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «fixed64»
	Oneof : oneof OneofName { •} «float»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «float»
	Oneof : oneof OneofName { •} «ident»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «ident»
	Oneof : oneof OneofName { •} «int32»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «int32»
	Oneof : oneof OneofName { •} «int64»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «int64»
	Oneof : oneof OneofName { •} «map»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «map»
	Oneof : oneof OneofName { •} «message»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «message»
	Oneof : oneof OneofName { •} «oneof»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «oneof»
	Oneof : oneof OneofName { •} «option»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «option»
	Oneof : oneof OneofName { •} «repeated»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «repeated»
	Oneof : oneof OneofName { •} «reserved»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «reserved»
	Oneof : oneof OneofName { •} «sfixed32»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «sfixed32»
	Oneof : oneof OneofName { •} «sfixed64»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «sfixed64»
	Oneof : oneof OneofName { •} «sint32»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «sint32»
	Oneof : oneof OneofName { •} «sint64»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «sint64»
	Oneof : oneof OneofName { •} «string»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «string»
	Oneof : oneof OneofName { •} «uint32»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «uint32»
	Oneof : oneof OneofName { •} «uint64»
	Oneof : oneof OneofName { •RepeatedOneOfFieldOrEmpty } «uint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «}»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «}»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «}»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «}»
	OneofField : •Type FieldName = FieldNumber ; «}»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	RepeatedOneOfFieldOrEmpty : •OneofField «.»
	RepeatedOneOfFieldOrEmpty : •OneofField «bool»
	RepeatedOneOfFieldOrEmpty : •OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : •OneofField «double»
	RepeatedOneOfFieldOrEmpty : •OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : •OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : •OneofField «float»
	RepeatedOneOfFieldOrEmpty : •OneofField «ident»
	RepeatedOneOfFieldOrEmpty : •OneofField «int32»
	RepeatedOneOfFieldOrEmpty : •OneofField «int64»
	RepeatedOneOfFieldOrEmpty : •OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : •OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : •OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : •OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «string»
	RepeatedOneOfFieldOrEmpty : •OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : •OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «.»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «bool»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «double»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «float»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «ident»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «int32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «int64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «string»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «.»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «ident»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «.»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «ident»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : •OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •emptyStatement «emptyStatement»
	RepeatedOneOfFieldOrEmpty : •RepeatedOneOfFieldOrEmpty emptyStatement «emptyStatement»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	OneofField : •Type FieldName = FieldNumber ; «.»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	OneofField : •Type FieldName = FieldNumber ; «bool»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : •Type FieldName = FieldNumber ; «bytes»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : •Type FieldName = FieldNumber ; «double»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : •Type FieldName = FieldNumber ; «fixed32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : •Type FieldName = FieldNumber ; «fixed64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : •Type FieldName = FieldNumber ; «float»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : •Type FieldName = FieldNumber ; «ident»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	OneofField : •Type FieldName = FieldNumber ; «int32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : •Type FieldName = FieldNumber ; «int64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : •Type FieldName = FieldNumber ; «sfixed32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : •Type FieldName = FieldNumber ; «sfixed64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : •Type FieldName = FieldNumber ; «sint32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : •Type FieldName = FieldNumber ; «sint64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : •Type FieldName = FieldNumber ; «string»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : •Type FieldName = FieldNumber ; «uint32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : •Type FieldName = FieldNumber ; «uint64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : •Type FieldName = FieldNumber ; «emptyStatement»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	ident -> 71
	. -> 72
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	EnumName -> 103
	MessageName -> 105
	Idents -> 108
	emptyStatement -> 200
	Type -> 201
	} -> 202
	RepeatedOneOfFieldOrEmpty -> 203
	OneofField -> 204


S169{
	KeyType : int32• «,»
}
Transitions:


S170{
	KeyType : int64• «,»
}
Transitions:


S171{
	KeyType : uint32• «,»
}
Transitions:


S172{
	KeyType : uint64• «,»
}
Transitions:


S173{
	KeyType : sint32• «,»
}
Transitions:


S174{
	KeyType : sint64• «,»
}
Transitions:


S175{
	KeyType : fixed32• «,»
}
Transitions:


S176{
	KeyType : fixed64• «,»
}
Transitions:


S177{
	KeyType : sfixed32• «,»
}
Transitions:


S178{
	KeyType : sfixed64• «,»
}
Transitions:


S179{
	KeyType : bool• «,»
}
Transitions:


S180{
	KeyType : string• «,»
}
Transitions:


S181{
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «}»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «.»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «bool»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «bytes»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «double»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «enum»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «fixed32»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «fixed64»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «float»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «ident»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «int32»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «int64»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «map»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «message»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «oneof»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «option»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «repeated»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «reserved»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «sint32»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «sint64»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «string»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «uint32»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType •, Type > MapName = FieldNumber ; «uint64»
	MapField : map < KeyType •, Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	, -> 205


S182{
	Range : intLit to •intLit «;»
	Range : intLit to •max «;»
	Range : intLit to •intLit «,»
	Range : intLit to •max «,»
}
Transitions:
	intLit -> 206
	max -> 207


S183{
	Reserved : reserved Ranges ;• «}»
	Reserved : reserved Ranges ;• «.»
	Reserved : reserved Ranges ;• «bool»
	Reserved : reserved Ranges ;• «bytes»
	Reserved : reserved Ranges ;• «double»
	Reserved : reserved Ranges ;• «emptyStatement»
	Reserved : reserved Ranges ;• «enum»
	Reserved : reserved Ranges ;• «fixed32»
	Reserved : reserved Ranges ;• «fixed64»
	Reserved : reserved Ranges ;• «float»
	Reserved : reserved Ranges ;• «ident»
	Reserved : reserved Ranges ;• «int32»
	Reserved : reserved Ranges ;• «int64»
	Reserved : reserved Ranges ;• «map»
	Reserved : reserved Ranges ;• «message»
	Reserved : reserved Ranges ;• «oneof»
	Reserved : reserved Ranges ;• «option»
	Reserved : reserved Ranges ;• «repeated»
	Reserved : reserved Ranges ;• «reserved»
	Reserved : reserved Ranges ;• «sfixed32»
	Reserved : reserved Ranges ;• «sfixed64»
	Reserved : reserved Ranges ;• «sint32»
	Reserved : reserved Ranges ;• «sint64»
	Reserved : reserved Ranges ;• «string»
	Reserved : reserved Ranges ;• «uint32»
	Reserved : reserved Ranges ;• «uint64»
}
Transitions:


S184{
	Ranges : Ranges , •Range «;»
	Ranges : Ranges , •Range «,»
	Range : •intLit «;»
	Range : •intLit to intLit «;»
	Range : •intLit to max «;»
	Range : •intLit «,»
	Range : •intLit to intLit «,»
	Range : •intLit to max «,»
}
Transitions:
	intLit -> 143
	Range -> 208


S185{
	Reserved : reserved FieldNames ;• «}»
	Reserved : reserved FieldNames ;• «.»
	Reserved : reserved FieldNames ;• «bool»
	Reserved : reserved FieldNames ;• «bytes»
	Reserved : reserved FieldNames ;• «double»
	Reserved : reserved FieldNames ;• «emptyStatement»
	Reserved : reserved FieldNames ;• «enum»
	Reserved : reserved FieldNames ;• «fixed32»
	Reserved : reserved FieldNames ;• «fixed64»
	Reserved : reserved FieldNames ;• «float»
	Reserved : reserved FieldNames ;• «ident»
	Reserved : reserved FieldNames ;• «int32»
	Reserved : reserved FieldNames ;• «int64»
	Reserved : reserved FieldNames ;• «map»
	Reserved : reserved FieldNames ;• «message»
	Reserved : reserved FieldNames ;• «oneof»
	Reserved : reserved FieldNames ;• «option»
	Reserved : reserved FieldNames ;• «repeated»
	Reserved : reserved FieldNames ;• «reserved»
	Reserved : reserved FieldNames ;• «sfixed32»
	Reserved : reserved FieldNames ;• «sfixed64»
	Reserved : reserved FieldNames ;• «sint32»
	Reserved : reserved FieldNames ;• «sint64»
	Reserved : reserved FieldNames ;• «string»
	Reserved : reserved FieldNames ;• «uint32»
	Reserved : reserved FieldNames ;• «uint64»
}
Transitions:


S186{
	FieldNames : FieldNames , •FieldName «;»
	FieldNames : FieldNames , •FieldName «,»
	FieldName : •ident «;»
	FieldName : •ident «,»
}
Transitions:
	ident -> 142
	FieldName -> 209


S187{
	EnumBody : { •} «}»
	EnumBody : { •Option } «}»
	EnumBody : { •EnumField } «}»
	EnumBody : { •emptyStatement } «}»
	EnumBody : { •} «.»
	EnumBody : { •Option } «.»
	EnumBody : { •EnumField } «.»
	EnumBody : { •emptyStatement } «.»
	EnumBody : { •} «bool»
	EnumBody : { •Option } «bool»
	EnumBody : { •EnumField } «bool»
	EnumBody : { •emptyStatement } «bool»
	EnumBody : { •} «bytes»
	EnumBody : { •Option } «bytes»
	EnumBody : { •EnumField } «bytes»
	EnumBody : { •emptyStatement } «bytes»
	EnumBody : { •} «double»
	EnumBody : { •Option } «double»
	EnumBody : { •EnumField } «double»
	EnumBody : { •emptyStatement } «double»
	EnumBody : { •} «emptyStatement»
	EnumBody : { •Option } «emptyStatement»
	EnumBody : { •EnumField } «emptyStatement»
	EnumBody : { •emptyStatement } «emptyStatement»
	EnumBody : { •} «enum»
	EnumBody : { •Option } «enum»
	EnumBody : { •EnumField } «enum»
	EnumBody : { •emptyStatement } «enum»
	EnumBody : { •} «fixed32»
	EnumBody : { •Option } «fixed32»
	EnumBody : { •EnumField } «fixed32»
	EnumBody : { •emptyStatement } «fixed32»
	EnumBody : { •} «fixed64»
	EnumBody : { •Option } «fixed64»
	EnumBody : { •EnumField } «fixed64»
	EnumBody : { •emptyStatement } «fixed64»
	EnumBody : { •} «float»
	EnumBody : { •Option } «float»
	EnumBody : { •EnumField } «float»
	EnumBody : { •emptyStatement } «float»
	EnumBody : { •} «ident»
	EnumBody : { •Option } «ident»
	EnumBody : { •EnumField } «ident»
	EnumBody : { •emptyStatement } «ident»
	EnumBody : { •} «int32»
	EnumBody : { •Option } «int32»
	EnumBody : { •EnumField } «int32»
	EnumBody : { •emptyStatement } «int32»
	EnumBody : { •} «int64»
	EnumBody : { •Option } «int64»
	EnumBody : { •EnumField } «int64»
	EnumBody : { •emptyStatement } «int64»
	EnumBody : { •} «map»
	EnumBody : { •Option } «map»
	EnumBody : { •EnumField } «map»
	EnumBody : { •emptyStatement } «map»
	EnumBody : { •} «message»
	EnumBody : { •Option } «message»
	EnumBody : { •EnumField } «message»
	EnumBody : { •emptyStatement } «message»
	EnumBody : { •} «oneof»
	EnumBody : { •Option } «oneof»
	EnumBody : { •EnumField } «oneof»
	EnumBody : { •emptyStatement } «oneof»
	EnumBody : { •} «option»
	EnumBody : { •Option } «option»
	EnumBody : { •EnumField } «option»
	EnumBody : { •emptyStatement } «option»
	EnumBody : { •} «repeated»
	EnumBody : { •Option } «repeated»
	EnumBody : { •EnumField } «repeated»
	EnumBody : { •emptyStatement } «repeated»
	EnumBody : { •} «reserved»
	EnumBody : { •Option } «reserved»
	EnumBody : { •EnumField } «reserved»
	EnumBody : { •emptyStatement } «reserved»
	EnumBody : { •} «sfixed32»
	EnumBody : { •Option } «sfixed32»
	EnumBody : { •EnumField } «sfixed32»
	EnumBody : { •emptyStatement } «sfixed32»
	EnumBody : { •} «sfixed64»
	EnumBody : { •Option } «sfixed64»
	EnumBody : { •EnumField } «sfixed64»
	EnumBody : { •emptyStatement } «sfixed64»
	EnumBody : { •} «sint32»
	EnumBody : { •Option } «sint32»
	EnumBody : { •EnumField } «sint32»
	EnumBody : { •emptyStatement } «sint32»
	EnumBody : { •} «sint64»
	EnumBody : { •Option } «sint64»
	EnumBody : { •EnumField } «sint64»
	EnumBody : { •emptyStatement } «sint64»
	EnumBody : { •} «string»
	EnumBody : { •Option } «string»
	EnumBody : { •EnumField } «string»
	EnumBody : { •emptyStatement } «string»
	EnumBody : { •} «uint32»
	EnumBody : { •Option } «uint32»
	EnumBody : { •EnumField } «uint32»
	EnumBody : { •emptyStatement } «uint32»
	EnumBody : { •} «uint64»
	EnumBody : { •Option } «uint64»
	EnumBody : { •EnumField } «uint64»
	EnumBody : { •emptyStatement } «uint64»
	Option : •option OptionName = Constant ; «}»
	EnumField : •ident = intLit ; «}»
	EnumField : •ident = intLit [ EnumValueOptions ] ; «}»
}
Transitions:
	option -> 64
	ident -> 65
	Option -> 210
	emptyStatement -> 211
	} -> 212
	EnumField -> 213


S188{
	Enum : enum EnumName EnumBody• «}»
	Enum : enum EnumName EnumBody• «.»
	Enum : enum EnumName EnumBody• «bool»
	Enum : enum EnumName EnumBody• «bytes»
	Enum : enum EnumName EnumBody• «double»
	Enum : enum EnumName EnumBody• «emptyStatement»
	Enum : enum EnumName EnumBody• «enum»
	Enum : enum EnumName EnumBody• «fixed32»
	Enum : enum EnumName EnumBody• «fixed64»
	Enum : enum EnumName EnumBody• «float»
	Enum : enum EnumName EnumBody• «ident»
	Enum : enum EnumName EnumBody• «int32»
	Enum : enum EnumName EnumBody• «int64»
	Enum : enum EnumName EnumBody• «map»
	Enum : enum EnumName EnumBody• «message»
	Enum : enum EnumName EnumBody• «oneof»
	Enum : enum EnumName EnumBody• «option»
	Enum : enum EnumName EnumBody• «repeated»
	Enum : enum EnumName EnumBody• «reserved»
	Enum : enum EnumName EnumBody• «sfixed32»
	Enum : enum EnumName EnumBody• «sfixed64»
	Enum : enum EnumName EnumBody• «sint32»
	Enum : enum EnumName EnumBody• «sint64»
	Enum : enum EnumName EnumBody• «string»
	Enum : enum EnumName EnumBody• «uint32»
	Enum : enum EnumName EnumBody• «uint64»
}
Transitions:


S189{
	Message : message MessageName { •} «}»
	Message : message MessageName { •MessageBody } «}»
	Message : message MessageName { •} «.»
	Message : message MessageName { •MessageBody } «.»
	Message : message MessageName { •} «bool»
	Message : message MessageName { •MessageBody } «bool»
	Message : message MessageName { •} «bytes»
	Message : message MessageName { •MessageBody } «bytes»
	Message : message MessageName { •} «double»
	Message : message MessageName { •MessageBody } «double»
	Message : message MessageName { •} «emptyStatement»
	Message : message MessageName { •MessageBody } «emptyStatement»
	Message : message MessageName { •} «enum»
	Message : message MessageName { •MessageBody } «enum»
	Message : message MessageName { •} «fixed32»
	Message : message MessageName { •MessageBody } «fixed32»
	Message : message MessageName { •} «fixed64»
	Message : message MessageName { •MessageBody } «fixed64»
	Message : message MessageName { •} «float»
	Message : message MessageName { •MessageBody } «float»
	Message : message MessageName { •} «ident»
	Message : message MessageName { •MessageBody } «ident»
	Message : message MessageName { •} «int32»
	Message : message MessageName { •MessageBody } «int32»
	Message : message MessageName { •} «int64»
	Message : message MessageName { •MessageBody } «int64»
	Message : message MessageName { •} «map»
	Message : message MessageName { •MessageBody } «map»
	Message : message MessageName { •} «message»
	Message : message MessageName { •MessageBody } «message»
	Message : message MessageName { •} «oneof»
	Message : message MessageName { •MessageBody } «oneof»
	Message : message MessageName { •} «option»
	Message : message MessageName { •MessageBody } «option»
	Message : message MessageName { •} «repeated»
	Message : message MessageName { •MessageBody } «repeated»
	Message : message MessageName { •} «reserved»
	Message : message MessageName { •MessageBody } «reserved»
	Message : message MessageName { •} «sfixed32»
	Message : message MessageName { •MessageBody } «sfixed32»
	Message : message MessageName { •} «sfixed64»
	Message : message MessageName { •MessageBody } «sfixed64»
	Message : message MessageName { •} «sint32»
	Message : message MessageName { •MessageBody } «sint32»
	Message : message MessageName { •} «sint64»
	Message : message MessageName { •MessageBody } «sint64»
	Message : message MessageName { •} «string»
	Message : message MessageName { •MessageBody } «string»
	Message : message MessageName { •} «uint32»
	Message : message MessageName { •MessageBody } «uint32»
	Message : message MessageName { •} «uint64»
	Message : message MessageName { •MessageBody } «uint64»
	MessageBody : •MessageContent «}»
	MessageBody : •MessageBody MessageContent «}»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageBody : •MessageContent «.»
	MessageBody : •MessageContent «bool»
	MessageBody : •MessageContent «bytes»
	MessageBody : •MessageContent «double»
	MessageBody : •MessageContent «emptyStatement»
	MessageBody : •MessageContent «enum»
	MessageBody : •MessageContent «fixed32»
	MessageBody : •MessageContent «fixed64»
	MessageBody : •MessageContent «float»
	MessageBody : •MessageContent «ident»
	MessageBody : •MessageContent «int32»
	MessageBody : •MessageContent «int64»
	MessageBody : •MessageContent «map»
	MessageBody : •MessageContent «message»
	MessageBody : •MessageContent «oneof»
	MessageBody : •MessageContent «option»
	MessageBody : •MessageContent «repeated»
	MessageBody : •MessageContent «reserved»
	MessageBody : •MessageContent «sfixed32»
	MessageBody : •MessageContent «sfixed64»
	MessageBody : •MessageContent «sint32»
	MessageBody : •MessageContent «sint64»
	MessageBody : •MessageContent «string»
	MessageBody : •MessageContent «uint32»
	MessageBody : •MessageContent «uint64»
	MessageBody : •MessageBody MessageContent «.»
	MessageBody : •MessageBody MessageContent «bool»
	MessageBody : •MessageBody MessageContent «bytes»
	MessageBody : •MessageBody MessageContent «double»
	MessageBody : •MessageBody MessageContent «emptyStatement»
	MessageBody : •MessageBody MessageContent «enum»
	MessageBody : •MessageBody MessageContent «fixed32»
	MessageBody : •MessageBody MessageContent «fixed64»
	MessageBody : •MessageBody MessageContent «float»
	MessageBody : •MessageBody MessageContent «ident»
	MessageBody : •MessageBody MessageContent «int32»
	MessageBody : •MessageBody MessageContent «int64»
	MessageBody : •MessageBody MessageContent «map»
	MessageBody : •MessageBody MessageContent «message»
	MessageBody : •MessageBody MessageContent «oneof»
	MessageBody : •MessageBody MessageContent «option»
	MessageBody : •MessageBody MessageContent «repeated»
	MessageBody : •MessageBody MessageContent «reserved»
	MessageBody : •MessageBody MessageContent «sfixed32»
	MessageBody : •MessageBody MessageContent «sfixed64»
	MessageBody : •MessageBody MessageContent «sint32»
	MessageBody : •MessageBody MessageContent «sint64»
	MessageBody : •MessageBody MessageContent «string»
	MessageBody : •MessageBody MessageContent «uint32»
	MessageBody : •MessageBody MessageContent «uint64»
	Field : •Type FieldName = FieldNumber ; «}»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type FieldName = FieldNumber ; «}»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum EnumName EnumBody «}»
	Message : •message MessageName { } «}»
	Message : •message MessageName { MessageBody } «}»
	Option : •option OptionName = Constant ; «}»
	Oneof : •oneof OneofName { } «}»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	MessageContent : •Field «.»
	MessageContent : •Enum «.»
	MessageContent : •Message «.»
	MessageContent : •Option «.»
	MessageContent : •Oneof «.»
	MessageContent : •MapField «.»
	MessageContent : •Reserved «.»
	MessageContent : •emptyStatement «.»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «ident»
	MessageContent : •Enum «ident»
	MessageContent : •Message «ident»
	MessageContent : •Option «ident»
	MessageContent : •Oneof «ident»
	MessageContent : •MapField «ident»
	MessageContent : •Reserved «ident»
	MessageContent : •emptyStatement «ident»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	Field : •Type FieldName = FieldNumber ; «.»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : •repeated Type FieldName = FieldNumber ; «.»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Enum : •enum EnumName EnumBody «.»
	Message : •message MessageName { } «.»
	Message : •message MessageName { MessageBody } «.»
	Option : •option OptionName = Constant ; «.»
	Oneof : •oneof OneofName { } «.»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	Reserved : •reserved Ranges ; «.»
	Reserved : •reserved FieldNames ; «.»
	Field : •Type FieldName = FieldNumber ; «bool»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type FieldName = FieldNumber ; «bool»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum EnumName EnumBody «bool»
	Message : •message MessageName { } «bool»
	Message : •message MessageName { MessageBody } «bool»
	Option : •option OptionName = Constant ; «bool»
	Oneof : •oneof OneofName { } «bool»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type FieldName = FieldNumber ; «bytes»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type FieldName = FieldNumber ; «bytes»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum EnumName EnumBody «bytes»
	Message : •message MessageName { } «bytes»
	Message : •message MessageName { MessageBody } «bytes»
	Option : •option OptionName = Constant ; «bytes»
	Oneof : •oneof OneofName { } «bytes»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type FieldName = FieldNumber ; «double»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type FieldName = FieldNumber ; «double»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum EnumName EnumBody «double»
	Message : •message MessageName { } «double»
	Message : •message MessageName { MessageBody } «double»
	Option : •option OptionName = Constant ; «double»
	Oneof : •oneof OneofName { } «double»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type FieldName = FieldNumber ; «emptyStatement»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	Oneof : •oneof OneofName { } «emptyStatement»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type FieldName = FieldNumber ; «enum»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type FieldName = FieldNumber ; «enum»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum EnumName EnumBody «enum»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Option : •option OptionName = Constant ; «enum»
	Oneof : •oneof OneofName { } «enum»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type FieldName = FieldNumber ; «fixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum EnumName EnumBody «fixed32»
	Message : •message MessageName { } «fixed32»
	Message : •message MessageName { MessageBody } «fixed32»
	Option : •option OptionName = Constant ; «fixed32»
	Oneof : •oneof OneofName { } «fixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type FieldName = FieldNumber ; «fixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum EnumName EnumBody «fixed64»
	Message : •message MessageName { } «fixed64»
	Message : •message MessageName { MessageBody } «fixed64»
	Option : •option OptionName = Constant ; «fixed64»
	Oneof : •oneof OneofName { } «fixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type FieldName = FieldNumber ; «float»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type FieldName = FieldNumber ; «float»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum EnumName EnumBody «float»
	Message : •message MessageName { } «float»
	Message : •message MessageName { MessageBody } «float»
	Option : •option OptionName = Constant ; «float»
	Oneof : •oneof OneofName { } «float»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type FieldName = FieldNumber ; «ident»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : •repeated Type FieldName = FieldNumber ; «ident»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Enum : •enum EnumName EnumBody «ident»
	Message : •message MessageName { } «ident»
	Message : •message MessageName { MessageBody } «ident»
	Option : •option OptionName = Constant ; «ident»
	Oneof : •oneof OneofName { } «ident»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	Reserved : •reserved Ranges ; «ident»
	Reserved : •reserved FieldNames ; «ident»
	Field : •Type FieldName = FieldNumber ; «int32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type FieldName = FieldNumber ; «int32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum EnumName EnumBody «int32»
	Message : •message MessageName { } «int32»
	Message : •message MessageName { MessageBody } «int32»
	Option : •option OptionName = Constant ; «int32»
	Oneof : •oneof OneofName { } «int32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type FieldName = FieldNumber ; «int64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type FieldName = FieldNumber ; «int64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum EnumName EnumBody «int64»
	Message : •message MessageName { } «int64»
	Message : •message MessageName { MessageBody } «int64»
	Option : •option OptionName = Constant ; «int64»
	Oneof : •oneof OneofName { } «int64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type FieldName = FieldNumber ; «map»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type FieldName = FieldNumber ; «map»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum EnumName EnumBody «map»
	Message : •message MessageName { } «map»
	Message : •message MessageName { MessageBody } «map»
	Option : •option OptionName = Constant ; «map»
	Oneof : •oneof OneofName { } «map»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type FieldName = FieldNumber ; «message»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type FieldName = FieldNumber ; «message»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum EnumName EnumBody «message»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Option : •option OptionName = Constant ; «message»
	Oneof : •oneof OneofName { } «message»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type FieldName = FieldNumber ; «oneof»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type FieldName = FieldNumber ; «oneof»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum EnumName EnumBody «oneof»
	Message : •message MessageName { } «oneof»
	Message : •message MessageName { MessageBody } «oneof»
	Option : •option OptionName = Constant ; «oneof»
	Oneof : •oneof OneofName { } «oneof»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type FieldName = FieldNumber ; «option»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type FieldName = FieldNumber ; «option»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum EnumName EnumBody «option»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Option : •option OptionName = Constant ; «option»
	Oneof : •oneof OneofName { } «option»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type FieldName = FieldNumber ; «repeated»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type FieldName = FieldNumber ; «repeated»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum EnumName EnumBody «repeated»
	Message : •message MessageName { } «repeated»
	Message : •message MessageName { MessageBody } «repeated»
	Option : •option OptionName = Constant ; «repeated»
	Oneof : •oneof OneofName { } «repeated»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type FieldName = FieldNumber ; «reserved»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type FieldName = FieldNumber ; «reserved»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum EnumName EnumBody «reserved»
	Message : •message MessageName { } «reserved»
	Message : •message MessageName { MessageBody } «reserved»
	Option : •option OptionName = Constant ; «reserved»
	Oneof : •oneof OneofName { } «reserved»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type FieldName = FieldNumber ; «sfixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum EnumName EnumBody «sfixed32»
	Message : •message MessageName { } «sfixed32»
	Message : •message MessageName { MessageBody } «sfixed32»
	Option : •option OptionName = Constant ; «sfixed32»
	Oneof : •oneof OneofName { } «sfixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type FieldName = FieldNumber ; «sfixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum EnumName EnumBody «sfixed64»
	Message : •message MessageName { } «sfixed64»
	Message : •message MessageName { MessageBody } «sfixed64»
	Option : •option OptionName = Constant ; «sfixed64»
	Oneof : •oneof OneofName { } «sfixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type FieldName = FieldNumber ; «sint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type FieldName = FieldNumber ; «sint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum EnumName EnumBody «sint32»
	Message : •message MessageName { } «sint32»
	Message : •message MessageName { MessageBody } «sint32»
	Option : •option OptionName = Constant ; «sint32»
	Oneof : •oneof OneofName { } «sint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type FieldName = FieldNumber ; «sint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type FieldName = FieldNumber ; «sint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum EnumName EnumBody «sint64»
	Message : •message MessageName { } «sint64»
	Message : •message MessageName { MessageBody } «sint64»
	Option : •option OptionName = Constant ; «sint64»
	Oneof : •oneof OneofName { } «sint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type FieldName = FieldNumber ; «string»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type FieldName = FieldNumber ; «string»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum EnumName EnumBody «string»
	Message : •message MessageName { } «string»
	Message : •message MessageName { MessageBody } «string»
	Option : •option OptionName = Constant ; «string»
	Oneof : •oneof OneofName { } «string»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type FieldName = FieldNumber ; «uint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type FieldName = FieldNumber ; «uint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum EnumName EnumBody «uint32»
	Message : •message MessageName { } «uint32»
	Message : •message MessageName { MessageBody } «uint32»
	Option : •option OptionName = Constant ; «uint32»
	Oneof : •oneof OneofName { } «uint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type FieldName = FieldNumber ; «uint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type FieldName = FieldNumber ; «uint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum EnumName EnumBody «uint64»
	Message : •message MessageName { } «uint64»
	Message : •message MessageName { MessageBody } «uint64»
	Option : •option OptionName = Constant ; «uint64»
	Oneof : •oneof OneofName { } «uint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	Option -> 68
	emptyStatement -> 69
	option -> 70
	ident -> 71
	. -> 72
	Message -> 73
	Enum -> 74
	Type -> 75
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	Field -> 93
	repeated -> 94
	Oneof -> 95
	oneof -> 96
	MapField -> 98
	map -> 99
	Reserved -> 100
	reserved -> 101
	enum -> 102
	EnumName -> 103
	message -> 104
	MessageName -> 105
	MessageContent -> 107
	Idents -> 108
	} -> 214
	MessageBody -> 215


S190{
	Idents : Idents ident .• «ident»
}
Transitions:


S191{
	Option : option OptionName = •Constant ; «}»
	Option : option OptionName = •Constant ; «emptyStatement»
	Option : option OptionName = •Constant ; «option»
	Option : option OptionName = •Constant ; «rpc»
	Constant : •FullIdent «;»
	Constant : •- intLit «;»
	Constant : •+ intLit «;»
	Constant : •- floatLit «;»
	Constant : •+ floatLit «;»
	Constant : •strLit «;»
	Constant : •boolLit «;»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	ident -> 26
	strLit -> 52
	FullIdent -> 53
	- -> 55
	+ -> 56
	boolLit -> 57
	Constant -> 216


S192{
	Rpc : rpc RpcName ( •MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( •MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( •MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( •MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( •MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( •MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( •MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( •MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( •stream MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageType -> 219
	MessageName -> 220
	stream -> 221
	Idents -> 222


S193{
	Option : option OptionName = Constant •; «}»
}
Transitions:
	; -> 223


S194{
	EnumField : ident = intLit ;• «}»
}
Transitions:


S195{
	EnumField : ident = intLit [ •EnumValueOptions ] ; «}»
	EnumValueOptions : •EnumValueOption «]»
	EnumValueOptions : •EnumValueOptions , EnumValueOption «]»
	EnumValueOption : •OptionName = Constant «]»
	EnumValueOptions : •EnumValueOption «,»
	EnumValueOptions : •EnumValueOptions , EnumValueOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
	EnumValueOption : •OptionName = Constant «,»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 224
	EnumValueOptions -> 225
	EnumValueOption -> 226


S196{
	Option : option OptionName = Constant •; «}»
	Option : option OptionName = Constant •; «.»
	Option : option OptionName = Constant •; «bool»
	Option : option OptionName = Constant •; «bytes»
	Option : option OptionName = Constant •; «double»
	Option : option OptionName = Constant •; «emptyStatement»
	Option : option OptionName = Constant •; «enum»
	Option : option OptionName = Constant •; «fixed32»
	Option : option OptionName = Constant •; «fixed64»
	Option : option OptionName = Constant •; «float»
	Option : option OptionName = Constant •; «ident»
	Option : option OptionName = Constant •; «int32»
	Option : option OptionName = Constant •; «int64»
	Option : option OptionName = Constant •; «map»
	Option : option OptionName = Constant •; «message»
	Option : option OptionName = Constant •; «oneof»
	Option : option OptionName = Constant •; «option»
	Option : option OptionName = Constant •; «repeated»
	Option : option OptionName = Constant •; «reserved»
	Option : option OptionName = Constant •; «sfixed32»
	Option : option OptionName = Constant •; «sfixed64»
	Option : option OptionName = Constant •; «sint32»
	Option : option OptionName = Constant •; «sint64»
	Option : option OptionName = Constant •; «string»
	Option : option OptionName = Constant •; «uint32»
	Option : option OptionName = Constant •; «uint64»
}
Transitions:
	; -> 227


S197{
	Field : Type FieldName = FieldNumber •; «}»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «}»
	Field : Type FieldName = FieldNumber •; «.»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «.»
	Field : Type FieldName = FieldNumber •; «bool»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «bool»
	Field : Type FieldName = FieldNumber •; «bytes»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	Field : Type FieldName = FieldNumber •; «double»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «double»
	Field : Type FieldName = FieldNumber •; «emptyStatement»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	Field : Type FieldName = FieldNumber •; «enum»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «enum»
	Field : Type FieldName = FieldNumber •; «fixed32»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	Field : Type FieldName = FieldNumber •; «fixed64»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	Field : Type FieldName = FieldNumber •; «float»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «float»
	Field : Type FieldName = FieldNumber •; «ident»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «ident»
	Field : Type FieldName = FieldNumber •; «int32»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «int32»
	Field : Type FieldName = FieldNumber •; «int64»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «int64»
	Field : Type FieldName = FieldNumber •; «map»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «map»
	Field : Type FieldName = FieldNumber •; «message»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «message»
	Field : Type FieldName = FieldNumber •; «oneof»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «oneof»
	Field : Type FieldName = FieldNumber •; «option»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «option»
	Field : Type FieldName = FieldNumber •; «repeated»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «repeated»
	Field : Type FieldName = FieldNumber •; «reserved»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «reserved»
	Field : Type FieldName = FieldNumber •; «sfixed32»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	Field : Type FieldName = FieldNumber •; «sfixed64»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	Field : Type FieldName = FieldNumber •; «sint32»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	Field : Type FieldName = FieldNumber •; «sint64»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	Field : Type FieldName = FieldNumber •; «string»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «string»
	Field : Type FieldName = FieldNumber •; «uint32»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	Field : Type FieldName = FieldNumber •; «uint64»
	Field : Type FieldName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 228
	[ -> 229


S198{
	FieldNumber : intLit• «;»
	FieldNumber : intLit• «[»
}
Transitions:


S199{
	Field : repeated Type FieldName = •FieldNumber ; «}»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «}»
	Field : repeated Type FieldName = •FieldNumber ; «.»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «.»
	Field : repeated Type FieldName = •FieldNumber ; «bool»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «bool»
	Field : repeated Type FieldName = •FieldNumber ; «bytes»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	Field : repeated Type FieldName = •FieldNumber ; «double»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «double»
	Field : repeated Type FieldName = •FieldNumber ; «emptyStatement»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : repeated Type FieldName = •FieldNumber ; «enum»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «enum»
	Field : repeated Type FieldName = •FieldNumber ; «fixed32»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	Field : repeated Type FieldName = •FieldNumber ; «fixed64»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	Field : repeated Type FieldName = •FieldNumber ; «float»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «float»
	Field : repeated Type FieldName = •FieldNumber ; «ident»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «ident»
	Field : repeated Type FieldName = •FieldNumber ; «int32»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «int32»
	Field : repeated Type FieldName = •FieldNumber ; «int64»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «int64»
	Field : repeated Type FieldName = •FieldNumber ; «map»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «map»
	Field : repeated Type FieldName = •FieldNumber ; «message»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «message»
	Field : repeated Type FieldName = •FieldNumber ; «oneof»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «oneof»
	Field : repeated Type FieldName = •FieldNumber ; «option»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «option»
	Field : repeated Type FieldName = •FieldNumber ; «repeated»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «repeated»
	Field : repeated Type FieldName = •FieldNumber ; «reserved»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «reserved»
	Field : repeated Type FieldName = •FieldNumber ; «sfixed32»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : repeated Type FieldName = •FieldNumber ; «sfixed64»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : repeated Type FieldName = •FieldNumber ; «sint32»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	Field : repeated Type FieldName = •FieldNumber ; «sint64»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	Field : repeated Type FieldName = •FieldNumber ; «string»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «string»
	Field : repeated Type FieldName = •FieldNumber ; «uint32»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	Field : repeated Type FieldName = •FieldNumber ; «uint64»
	Field : repeated Type FieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 198
	FieldNumber -> 230


S200{
	RepeatedOneOfFieldOrEmpty : emptyStatement• «}»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «.»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «bool»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «bytes»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «double»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «fixed32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «fixed64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «float»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «ident»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «int32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «int64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sfixed32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sfixed64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sint32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «sint64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «string»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «uint32»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «uint64»
	RepeatedOneOfFieldOrEmpty : emptyStatement• «emptyStatement»
}
Transitions:


S201{
	OneofField : Type •FieldName = FieldNumber ; «}»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type •FieldName = FieldNumber ; «.»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «.»
	OneofField : Type •FieldName = FieldNumber ; «bool»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type •FieldName = FieldNumber ; «bytes»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type •FieldName = FieldNumber ; «double»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type •FieldName = FieldNumber ; «fixed32»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type •FieldName = FieldNumber ; «fixed64»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type •FieldName = FieldNumber ; «float»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type •FieldName = FieldNumber ; «ident»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «ident»
	OneofField : Type •FieldName = FieldNumber ; «int32»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type •FieldName = FieldNumber ; «int64»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type •FieldName = FieldNumber ; «sfixed32»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type •FieldName = FieldNumber ; «sfixed64»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type •FieldName = FieldNumber ; «sint32»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type •FieldName = FieldNumber ; «sint64»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type •FieldName = FieldNumber ; «string»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type •FieldName = FieldNumber ; «uint32»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type •FieldName = FieldNumber ; «uint64»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type •FieldName = FieldNumber ; «emptyStatement»
	OneofField : Type •FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	FieldName : •ident «=»
}
Transitions:
	ident -> 136
	FieldName -> 231


S202{
	Oneof : oneof OneofName { }• «}»
	Oneof : oneof OneofName { }• «.»
	Oneof : oneof OneofName { }• «bool»
	Oneof : oneof OneofName { }• «bytes»
	Oneof : oneof OneofName { }• «double»
	Oneof : oneof OneofName { }• «emptyStatement»
	Oneof : oneof OneofName { }• «enum»
	Oneof : oneof OneofName { }• «fixed32»
	Oneof : oneof OneofName { }• «fixed64»
	Oneof : oneof OneofName { }• «float»
	Oneof : oneof OneofName { }• «ident»
	Oneof : oneof OneofName { }• «int32»
	Oneof : oneof OneofName { }• «int64»
	Oneof : oneof OneofName { }• «map»
	Oneof : oneof OneofName { }• «message»
	Oneof : oneof OneofName { }• «oneof»
	Oneof : oneof OneofName { }• «option»
	Oneof : oneof OneofName { }• «repeated»
	Oneof : oneof OneofName { }• «reserved»
	Oneof : oneof OneofName { }• «sfixed32»
	Oneof : oneof OneofName { }• «sfixed64»
	Oneof : oneof OneofName { }• «sint32»
	Oneof : oneof OneofName { }• «sint64»
	Oneof : oneof OneofName { }• «string»
	Oneof : oneof OneofName { }• «uint32»
	Oneof : oneof OneofName { }• «uint64»
}
Transitions:


S203{
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «}»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «.»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «bool»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «bytes»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «double»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «emptyStatement»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «enum»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «fixed32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «fixed64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «float»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «ident»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «int32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «int64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «map»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «message»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «oneof»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «option»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «repeated»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «reserved»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «sfixed32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «sfixed64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «sint32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «sint64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «string»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «uint32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty •} «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «.»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «ident»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «.»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «ident»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •OneofField «emptyStatement»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty •emptyStatement «emptyStatement»
	OneofField : •Type FieldName = FieldNumber ; «}»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	OneofField : •Type FieldName = FieldNumber ; «.»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	OneofField : •Type FieldName = FieldNumber ; «bool»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	OneofField : •Type FieldName = FieldNumber ; «bytes»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : •Type FieldName = FieldNumber ; «double»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	OneofField : •Type FieldName = FieldNumber ; «fixed32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : •Type FieldName = FieldNumber ; «fixed64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : •Type FieldName = FieldNumber ; «float»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	OneofField : •Type FieldName = FieldNumber ; «ident»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	OneofField : •Type FieldName = FieldNumber ; «int32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	OneofField : •Type FieldName = FieldNumber ; «int64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	OneofField : •Type FieldName = FieldNumber ; «sfixed32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : •Type FieldName = FieldNumber ; «sfixed64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : •Type FieldName = FieldNumber ; «sint32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : •Type FieldName = FieldNumber ; «sint64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : •Type FieldName = FieldNumber ; «string»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	OneofField : •Type FieldName = FieldNumber ; «uint32»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : •Type FieldName = FieldNumber ; «uint64»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : •Type FieldName = FieldNumber ; «emptyStatement»
	OneofField : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	ident -> 71
	. -> 72
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	EnumName -> 103
	MessageName -> 105
	Idents -> 108
	Type -> 201
	emptyStatement -> 232
	} -> 233
	OneofField -> 234


S204{
	RepeatedOneOfFieldOrEmpty : OneofField• «}»
	RepeatedOneOfFieldOrEmpty : OneofField• «.»
	RepeatedOneOfFieldOrEmpty : OneofField• «bool»
	RepeatedOneOfFieldOrEmpty : OneofField• «bytes»
	RepeatedOneOfFieldOrEmpty : OneofField• «double»
	RepeatedOneOfFieldOrEmpty : OneofField• «fixed32»
	RepeatedOneOfFieldOrEmpty : OneofField• «fixed64»
	RepeatedOneOfFieldOrEmpty : OneofField• «float»
	RepeatedOneOfFieldOrEmpty : OneofField• «ident»
	RepeatedOneOfFieldOrEmpty : OneofField• «int32»
	RepeatedOneOfFieldOrEmpty : OneofField• «int64»
	RepeatedOneOfFieldOrEmpty : OneofField• «sfixed32»
	RepeatedOneOfFieldOrEmpty : OneofField• «sfixed64»
	RepeatedOneOfFieldOrEmpty : OneofField• «sint32»
	RepeatedOneOfFieldOrEmpty : OneofField• «sint64»
	RepeatedOneOfFieldOrEmpty : OneofField• «string»
	RepeatedOneOfFieldOrEmpty : OneofField• «uint32»
	RepeatedOneOfFieldOrEmpty : OneofField• «uint64»
	RepeatedOneOfFieldOrEmpty : OneofField• «emptyStatement»
}
Transitions:


S205{
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «}»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «.»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «bool»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «bytes»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «double»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «enum»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «float»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «ident»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «int32»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «int64»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «map»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «message»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «oneof»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «option»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «repeated»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «reserved»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «sint32»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «sint64»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «string»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «uint32»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , •Type > MapName = FieldNumber ; «uint64»
	MapField : map < KeyType , •Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	Type : •double «>»
	Type : •float «>»
	Type : •int32 «>»
	Type : •int64 «>»
	Type : •uint32 «>»
	Type : •uint64 «>»
	Type : •sint32 «>»
	Type : •sint64 «>»
	Type : •fixed32 «>»
	Type : •fixed64 «>»
	Type : •sfixed32 «>»
	Type : •sfixed64 «>»
	Type : •bool «>»
	Type : •string «>»
	Type : •bytes «>»
	Type : •MessageType «>»
	Type : •EnumType «>»
	MessageType : •MessageName «>»
	MessageType : •Idents MessageName «>»
	MessageType : •. MessageName «>»
	MessageType : •. Idents MessageName «>»
	EnumType : •EnumName «>»
	EnumType : •. EnumName «>»
	EnumType : •. Idents EnumName «>»
	MessageName : •ident «>»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «>»
}
Transitions:
	ident -> 235
	. -> 236
	Type -> 237
	double -> 238
	float -> 239
	int32 -> 240
	int64 -> 241
	uint32 -> 242
	uint64 -> 243
	sint32 -> 244
	sint64 -> 245
	fixed32 -> 246
	fixed64 -> 247
	sfixed32 -> 248
	sfixed64 -> 249
	bool -> 250
	string -> 251
	bytes -> 252
	MessageType -> 253
	EnumType -> 254
	EnumName -> 255
	MessageName -> 256
	Idents -> 257


S206{
	Range : intLit to intLit• «;»
	Range : intLit to intLit• «,»
}
Transitions:


S207{
	Range : intLit to max• «;»
	Range : intLit to max• «,»
}
Transitions:


S208{
	Ranges : Ranges , Range• «;»
	Ranges : Ranges , Range• «,»
}
Transitions:


S209{
	FieldNames : FieldNames , FieldName• «;»
	FieldNames : FieldNames , FieldName• «,»
}
Transitions:


S210{
	EnumBody : { Option •} «}»
	EnumBody : { Option •} «.»
	EnumBody : { Option •} «bool»
	EnumBody : { Option •} «bytes»
	EnumBody : { Option •} «double»
	EnumBody : { Option •} «emptyStatement»
	EnumBody : { Option •} «enum»
	EnumBody : { Option •} «fixed32»
	EnumBody : { Option •} «fixed64»
	EnumBody : { Option •} «float»
	EnumBody : { Option •} «ident»
	EnumBody : { Option •} «int32»
	EnumBody : { Option •} «int64»
	EnumBody : { Option •} «map»
	EnumBody : { Option •} «message»
	EnumBody : { Option •} «oneof»
	EnumBody : { Option •} «option»
	EnumBody : { Option •} «repeated»
	EnumBody : { Option •} «reserved»
	EnumBody : { Option •} «sfixed32»
	EnumBody : { Option •} «sfixed64»
	EnumBody : { Option •} «sint32»
	EnumBody : { Option •} «sint64»
	EnumBody : { Option •} «string»
	EnumBody : { Option •} «uint32»
	EnumBody : { Option •} «uint64»
}
Transitions:
	} -> 258


S211{
	EnumBody : { emptyStatement •} «}»
	EnumBody : { emptyStatement •} «.»
	EnumBody : { emptyStatement •} «bool»
	EnumBody : { emptyStatement •} «bytes»
	EnumBody : { emptyStatement •} «double»
	EnumBody : { emptyStatement •} «emptyStatement»
	EnumBody : { emptyStatement •} «enum»
	EnumBody : { emptyStatement •} «fixed32»
	EnumBody : { emptyStatement •} «fixed64»
	EnumBody : { emptyStatement •} «float»
	EnumBody : { emptyStatement •} «ident»
	EnumBody : { emptyStatement •} «int32»
	EnumBody : { emptyStatement •} «int64»
	EnumBody : { emptyStatement •} «map»
	EnumBody : { emptyStatement •} «message»
	EnumBody : { emptyStatement •} «oneof»
	EnumBody : { emptyStatement •} «option»
	EnumBody : { emptyStatement •} «repeated»
	EnumBody : { emptyStatement •} «reserved»
	EnumBody : { emptyStatement •} «sfixed32»
	EnumBody : { emptyStatement •} «sfixed64»
	EnumBody : { emptyStatement •} «sint32»
	EnumBody : { emptyStatement •} «sint64»
	EnumBody : { emptyStatement •} «string»
	EnumBody : { emptyStatement •} «uint32»
	EnumBody : { emptyStatement •} «uint64»
}
Transitions:
	} -> 259


S212{
	EnumBody : { }• «}»
	EnumBody : { }• «.»
	EnumBody : { }• «bool»
	EnumBody : { }• «bytes»
	EnumBody : { }• «double»
	EnumBody : { }• «emptyStatement»
	EnumBody : { }• «enum»
	EnumBody : { }• «fixed32»
	EnumBody : { }• «fixed64»
	EnumBody : { }• «float»
	EnumBody : { }• «ident»
	EnumBody : { }• «int32»
	EnumBody : { }• «int64»
	EnumBody : { }• «map»
	EnumBody : { }• «message»
	EnumBody : { }• «oneof»
	EnumBody : { }• «option»
	EnumBody : { }• «repeated»
	EnumBody : { }• «reserved»
	EnumBody : { }• «sfixed32»
	EnumBody : { }• «sfixed64»
	EnumBody : { }• «sint32»
	EnumBody : { }• «sint64»
	EnumBody : { }• «string»
	EnumBody : { }• «uint32»
	EnumBody : { }• «uint64»
}
Transitions:


S213{
	EnumBody : { EnumField •} «}»
	EnumBody : { EnumField •} «.»
	EnumBody : { EnumField •} «bool»
	EnumBody : { EnumField •} «bytes»
	EnumBody : { EnumField •} «double»
	EnumBody : { EnumField •} «emptyStatement»
	EnumBody : { EnumField •} «enum»
	EnumBody : { EnumField •} «fixed32»
	EnumBody : { EnumField •} «fixed64»
	EnumBody : { EnumField •} «float»
	EnumBody : { EnumField •} «ident»
	EnumBody : { EnumField •} «int32»
	EnumBody : { EnumField •} «int64»
	EnumBody : { EnumField •} «map»
	EnumBody : { EnumField •} «message»
	EnumBody : { EnumField •} «oneof»
	EnumBody : { EnumField •} «option»
	EnumBody : { EnumField •} «repeated»
	EnumBody : { EnumField •} «reserved»
	EnumBody : { EnumField •} «sfixed32»
	EnumBody : { EnumField •} «sfixed64»
	EnumBody : { EnumField •} «sint32»
	EnumBody : { EnumField •} «sint64»
	EnumBody : { EnumField •} «string»
	EnumBody : { EnumField •} «uint32»
	EnumBody : { EnumField •} «uint64»
}
Transitions:
	} -> 260


S214{
	Message : message MessageName { }• «}»
	Message : message MessageName { }• «.»
	Message : message MessageName { }• «bool»
	Message : message MessageName { }• «bytes»
	Message : message MessageName { }• «double»
	Message : message MessageName { }• «emptyStatement»
	Message : message MessageName { }• «enum»
	Message : message MessageName { }• «fixed32»
	Message : message MessageName { }• «fixed64»
	Message : message MessageName { }• «float»
	Message : message MessageName { }• «ident»
	Message : message MessageName { }• «int32»
	Message : message MessageName { }• «int64»
	Message : message MessageName { }• «map»
	Message : message MessageName { }• «message»
	Message : message MessageName { }• «oneof»
	Message : message MessageName { }• «option»
	Message : message MessageName { }• «repeated»
	Message : message MessageName { }• «reserved»
	Message : message MessageName { }• «sfixed32»
	Message : message MessageName { }• «sfixed64»
	Message : message MessageName { }• «sint32»
	Message : message MessageName { }• «sint64»
	Message : message MessageName { }• «string»
	Message : message MessageName { }• «uint32»
	Message : message MessageName { }• «uint64»
}
Transitions:


S215{
	Message : message MessageName { MessageBody •} «}»
	Message : message MessageName { MessageBody •} «.»
	Message : message MessageName { MessageBody •} «bool»
	Message : message MessageName { MessageBody •} «bytes»
	Message : message MessageName { MessageBody •} «double»
	Message : message MessageName { MessageBody •} «emptyStatement»
	Message : message MessageName { MessageBody •} «enum»
	Message : message MessageName { MessageBody •} «fixed32»
	Message : message MessageName { MessageBody •} «fixed64»
	Message : message MessageName { MessageBody •} «float»
	Message : message MessageName { MessageBody •} «ident»
	Message : message MessageName { MessageBody •} «int32»
	Message : message MessageName { MessageBody •} «int64»
	Message : message MessageName { MessageBody •} «map»
	Message : message MessageName { MessageBody •} «message»
	Message : message MessageName { MessageBody •} «oneof»
	Message : message MessageName { MessageBody •} «option»
	Message : message MessageName { MessageBody •} «repeated»
	Message : message MessageName { MessageBody •} «reserved»
	Message : message MessageName { MessageBody •} «sfixed32»
	Message : message MessageName { MessageBody •} «sfixed64»
	Message : message MessageName { MessageBody •} «sint32»
	Message : message MessageName { MessageBody •} «sint64»
	Message : message MessageName { MessageBody •} «string»
	Message : message MessageName { MessageBody •} «uint32»
	Message : message MessageName { MessageBody •} «uint64»
	MessageBody : MessageBody •MessageContent «}»
	MessageBody : MessageBody •MessageContent «.»
	MessageBody : MessageBody •MessageContent «bool»
	MessageBody : MessageBody •MessageContent «bytes»
	MessageBody : MessageBody •MessageContent «double»
	MessageBody : MessageBody •MessageContent «emptyStatement»
	MessageBody : MessageBody •MessageContent «enum»
	MessageBody : MessageBody •MessageContent «fixed32»
	MessageBody : MessageBody •MessageContent «fixed64»
	MessageBody : MessageBody •MessageContent «float»
	MessageBody : MessageBody •MessageContent «ident»
	MessageBody : MessageBody •MessageContent «int32»
	MessageBody : MessageBody •MessageContent «int64»
	MessageBody : MessageBody •MessageContent «map»
	MessageBody : MessageBody •MessageContent «message»
	MessageBody : MessageBody •MessageContent «oneof»
	MessageBody : MessageBody •MessageContent «option»
	MessageBody : MessageBody •MessageContent «repeated»
	MessageBody : MessageBody •MessageContent «reserved»
	MessageBody : MessageBody •MessageContent «sfixed32»
	MessageBody : MessageBody •MessageContent «sfixed64»
	MessageBody : MessageBody •MessageContent «sint32»
	MessageBody : MessageBody •MessageContent «sint64»
	MessageBody : MessageBody •MessageContent «string»
	MessageBody : MessageBody •MessageContent «uint32»
	MessageBody : MessageBody •MessageContent «uint64»
	MessageContent : •Field «}»
	MessageContent : •Enum «}»
	MessageContent : •Message «}»
	MessageContent : •Option «}»
	MessageContent : •Oneof «}»
	MessageContent : •MapField «}»
	MessageContent : •Reserved «}»
	MessageContent : •emptyStatement «}»
	MessageContent : •Field «.»
	MessageContent : •Enum «.»
	MessageContent : •Message «.»
	MessageContent : •Option «.»
	MessageContent : •Oneof «.»
	MessageContent : •MapField «.»
	MessageContent : •Reserved «.»
	MessageContent : •emptyStatement «.»
	MessageContent : •Field «bool»
	MessageContent : •Enum «bool»
	MessageContent : •Message «bool»
	MessageContent : •Option «bool»
	MessageContent : •Oneof «bool»
	MessageContent : •MapField «bool»
	MessageContent : •Reserved «bool»
	MessageContent : •emptyStatement «bool»
	MessageContent : •Field «bytes»
	MessageContent : •Enum «bytes»
	MessageContent : •Message «bytes»
	MessageContent : •Option «bytes»
	MessageContent : •Oneof «bytes»
	MessageContent : •MapField «bytes»
	MessageContent : •Reserved «bytes»
	MessageContent : •emptyStatement «bytes»
	MessageContent : •Field «double»
	MessageContent : •Enum «double»
	MessageContent : •Message «double»
	MessageContent : •Option «double»
	MessageContent : •Oneof «double»
	MessageContent : •MapField «double»
	MessageContent : •Reserved «double»
	MessageContent : •emptyStatement «double»
	MessageContent : •Field «emptyStatement»
	MessageContent : •Enum «emptyStatement»
	MessageContent : •Message «emptyStatement»
	MessageContent : •Option «emptyStatement»
	MessageContent : •Oneof «emptyStatement»
	MessageContent : •MapField «emptyStatement»
	MessageContent : •Reserved «emptyStatement»
	MessageContent : •emptyStatement «emptyStatement»
	MessageContent : •Field «enum»
	MessageContent : •Enum «enum»
	MessageContent : •Message «enum»
	MessageContent : •Option «enum»
	MessageContent : •Oneof «enum»
	MessageContent : •MapField «enum»
	MessageContent : •Reserved «enum»
	MessageContent : •emptyStatement «enum»
	MessageContent : •Field «fixed32»
	MessageContent : •Enum «fixed32»
	MessageContent : •Message «fixed32»
	MessageContent : •Option «fixed32»
	MessageContent : •Oneof «fixed32»
	MessageContent : •MapField «fixed32»
	MessageContent : •Reserved «fixed32»
	MessageContent : •emptyStatement «fixed32»
	MessageContent : •Field «fixed64»
	MessageContent : •Enum «fixed64»
	MessageContent : •Message «fixed64»
	MessageContent : •Option «fixed64»
	MessageContent : •Oneof «fixed64»
	MessageContent : •MapField «fixed64»
	MessageContent : •Reserved «fixed64»
	MessageContent : •emptyStatement «fixed64»
	MessageContent : •Field «float»
	MessageContent : •Enum «float»
	MessageContent : •Message «float»
	MessageContent : •Option «float»
	MessageContent : •Oneof «float»
	MessageContent : •MapField «float»
	MessageContent : •Reserved «float»
	MessageContent : •emptyStatement «float»
	MessageContent : •Field «ident»
	MessageContent : •Enum «ident»
	MessageContent : •Message «ident»
	MessageContent : •Option «ident»
	MessageContent : •Oneof «ident»
	MessageContent : •MapField «ident»
	MessageContent : •Reserved «ident»
	MessageContent : •emptyStatement «ident»
	MessageContent : •Field «int32»
	MessageContent : •Enum «int32»
	MessageContent : •Message «int32»
	MessageContent : •Option «int32»
	MessageContent : •Oneof «int32»
	MessageContent : •MapField «int32»
	MessageContent : •Reserved «int32»
	MessageContent : •emptyStatement «int32»
	MessageContent : •Field «int64»
	MessageContent : •Enum «int64»
	MessageContent : •Message «int64»
	MessageContent : •Option «int64»
	MessageContent : •Oneof «int64»
	MessageContent : •MapField «int64»
	MessageContent : •Reserved «int64»
	MessageContent : •emptyStatement «int64»
	MessageContent : •Field «map»
	MessageContent : •Enum «map»
	MessageContent : •Message «map»
	MessageContent : •Option «map»
	MessageContent : •Oneof «map»
	MessageContent : •MapField «map»
	MessageContent : •Reserved «map»
	MessageContent : •emptyStatement «map»
	MessageContent : •Field «message»
	MessageContent : •Enum «message»
	MessageContent : •Message «message»
	MessageContent : •Option «message»
	MessageContent : •Oneof «message»
	MessageContent : •MapField «message»
	MessageContent : •Reserved «message»
	MessageContent : •emptyStatement «message»
	MessageContent : •Field «oneof»
	MessageContent : •Enum «oneof»
	MessageContent : •Message «oneof»
	MessageContent : •Option «oneof»
	MessageContent : •Oneof «oneof»
	MessageContent : •MapField «oneof»
	MessageContent : •Reserved «oneof»
	MessageContent : •emptyStatement «oneof»
	MessageContent : •Field «option»
	MessageContent : •Enum «option»
	MessageContent : •Message «option»
	MessageContent : •Option «option»
	MessageContent : •Oneof «option»
	MessageContent : •MapField «option»
	MessageContent : •Reserved «option»
	MessageContent : •emptyStatement «option»
	MessageContent : •Field «repeated»
	MessageContent : •Enum «repeated»
	MessageContent : •Message «repeated»
	MessageContent : •Option «repeated»
	MessageContent : •Oneof «repeated»
	MessageContent : •MapField «repeated»
	MessageContent : •Reserved «repeated»
	MessageContent : •emptyStatement «repeated»
	MessageContent : •Field «reserved»
	MessageContent : •Enum «reserved»
	MessageContent : •Message «reserved»
	MessageContent : •Option «reserved»
	MessageContent : •Oneof «reserved»
	MessageContent : •MapField «reserved»
	MessageContent : •Reserved «reserved»
	MessageContent : •emptyStatement «reserved»
	MessageContent : •Field «sfixed32»
	MessageContent : •Enum «sfixed32»
	MessageContent : •Message «sfixed32»
	MessageContent : •Option «sfixed32»
	MessageContent : •Oneof «sfixed32»
	MessageContent : •MapField «sfixed32»
	MessageContent : •Reserved «sfixed32»
	MessageContent : •emptyStatement «sfixed32»
	MessageContent : •Field «sfixed64»
	MessageContent : •Enum «sfixed64»
	MessageContent : •Message «sfixed64»
	MessageContent : •Option «sfixed64»
	MessageContent : •Oneof «sfixed64»
	MessageContent : •MapField «sfixed64»
	MessageContent : •Reserved «sfixed64»
	MessageContent : •emptyStatement «sfixed64»
	MessageContent : •Field «sint32»
	MessageContent : •Enum «sint32»
	MessageContent : •Message «sint32»
	MessageContent : •Option «sint32»
	MessageContent : •Oneof «sint32»
	MessageContent : •MapField «sint32»
	MessageContent : •Reserved «sint32»
	MessageContent : •emptyStatement «sint32»
	MessageContent : •Field «sint64»
	MessageContent : •Enum «sint64»
	MessageContent : •Message «sint64»
	MessageContent : •Option «sint64»
	MessageContent : •Oneof «sint64»
	MessageContent : •MapField «sint64»
	MessageContent : •Reserved «sint64»
	MessageContent : •emptyStatement «sint64»
	MessageContent : •Field «string»
	MessageContent : •Enum «string»
	MessageContent : •Message «string»
	MessageContent : •Option «string»
	MessageContent : •Oneof «string»
	MessageContent : •MapField «string»
	MessageContent : •Reserved «string»
	MessageContent : •emptyStatement «string»
	MessageContent : •Field «uint32»
	MessageContent : •Enum «uint32»
	MessageContent : •Message «uint32»
	MessageContent : •Option «uint32»
	MessageContent : •Oneof «uint32»
	MessageContent : •MapField «uint32»
	MessageContent : •Reserved «uint32»
	MessageContent : •emptyStatement «uint32»
	MessageContent : •Field «uint64»
	MessageContent : •Enum «uint64»
	MessageContent : •Message «uint64»
	MessageContent : •Option «uint64»
	MessageContent : •Oneof «uint64»
	MessageContent : •MapField «uint64»
	MessageContent : •Reserved «uint64»
	MessageContent : •emptyStatement «uint64»
	Field : •Type FieldName = FieldNumber ; «}»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Field : •repeated Type FieldName = FieldNumber ; «}»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «}»
	Enum : •enum EnumName EnumBody «}»
	Message : •message MessageName { } «}»
	Message : •message MessageName { MessageBody } «}»
	Option : •option OptionName = Constant ; «}»
	Oneof : •oneof OneofName { } «}»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «}»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «}»
	Reserved : •reserved Ranges ; «}»
	Reserved : •reserved FieldNames ; «}»
	Field : •Type FieldName = FieldNumber ; «.»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Field : •repeated Type FieldName = FieldNumber ; «.»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «.»
	Enum : •enum EnumName EnumBody «.»
	Message : •message MessageName { } «.»
	Message : •message MessageName { MessageBody } «.»
	Option : •option OptionName = Constant ; «.»
	Oneof : •oneof OneofName { } «.»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «.»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «.»
	Reserved : •reserved Ranges ; «.»
	Reserved : •reserved FieldNames ; «.»
	Field : •Type FieldName = FieldNumber ; «bool»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Field : •repeated Type FieldName = FieldNumber ; «bool»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bool»
	Enum : •enum EnumName EnumBody «bool»
	Message : •message MessageName { } «bool»
	Message : •message MessageName { MessageBody } «bool»
	Option : •option OptionName = Constant ; «bool»
	Oneof : •oneof OneofName { } «bool»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bool»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bool»
	Reserved : •reserved Ranges ; «bool»
	Reserved : •reserved FieldNames ; «bool»
	Field : •Type FieldName = FieldNumber ; «bytes»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Field : •repeated Type FieldName = FieldNumber ; «bytes»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «bytes»
	Enum : •enum EnumName EnumBody «bytes»
	Message : •message MessageName { } «bytes»
	Message : •message MessageName { MessageBody } «bytes»
	Option : •option OptionName = Constant ; «bytes»
	Oneof : •oneof OneofName { } «bytes»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «bytes»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «bytes»
	Reserved : •reserved Ranges ; «bytes»
	Reserved : •reserved FieldNames ; «bytes»
	Field : •Type FieldName = FieldNumber ; «double»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Field : •repeated Type FieldName = FieldNumber ; «double»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «double»
	Enum : •enum EnumName EnumBody «double»
	Message : •message MessageName { } «double»
	Message : •message MessageName { MessageBody } «double»
	Option : •option OptionName = Constant ; «double»
	Oneof : •oneof OneofName { } «double»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «double»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «double»
	Reserved : •reserved Ranges ; «double»
	Reserved : •reserved FieldNames ; «double»
	Field : •Type FieldName = FieldNumber ; «emptyStatement»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber ; «emptyStatement»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Enum : •enum EnumName EnumBody «emptyStatement»
	Message : •message MessageName { } «emptyStatement»
	Message : •message MessageName { MessageBody } «emptyStatement»
	Option : •option OptionName = Constant ; «emptyStatement»
	Oneof : •oneof OneofName { } «emptyStatement»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «emptyStatement»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	Reserved : •reserved Ranges ; «emptyStatement»
	Reserved : •reserved FieldNames ; «emptyStatement»
	Field : •Type FieldName = FieldNumber ; «enum»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Field : •repeated Type FieldName = FieldNumber ; «enum»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «enum»
	Enum : •enum EnumName EnumBody «enum»
	Message : •message MessageName { } «enum»
	Message : •message MessageName { MessageBody } «enum»
	Option : •option OptionName = Constant ; «enum»
	Oneof : •oneof OneofName { } «enum»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «enum»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «enum»
	Reserved : •reserved Ranges ; «enum»
	Reserved : •reserved FieldNames ; «enum»
	Field : •Type FieldName = FieldNumber ; «fixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber ; «fixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed32»
	Enum : •enum EnumName EnumBody «fixed32»
	Message : •message MessageName { } «fixed32»
	Message : •message MessageName { MessageBody } «fixed32»
	Option : •option OptionName = Constant ; «fixed32»
	Oneof : •oneof OneofName { } «fixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	Reserved : •reserved Ranges ; «fixed32»
	Reserved : •reserved FieldNames ; «fixed32»
	Field : •Type FieldName = FieldNumber ; «fixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber ; «fixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «fixed64»
	Enum : •enum EnumName EnumBody «fixed64»
	Message : •message MessageName { } «fixed64»
	Message : •message MessageName { MessageBody } «fixed64»
	Option : •option OptionName = Constant ; «fixed64»
	Oneof : •oneof OneofName { } «fixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «fixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	Reserved : •reserved Ranges ; «fixed64»
	Reserved : •reserved FieldNames ; «fixed64»
	Field : •Type FieldName = FieldNumber ; «float»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Field : •repeated Type FieldName = FieldNumber ; «float»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «float»
	Enum : •enum EnumName EnumBody «float»
	Message : •message MessageName { } «float»
	Message : •message MessageName { MessageBody } «float»
	Option : •option OptionName = Constant ; «float»
	Oneof : •oneof OneofName { } «float»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «float»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «float»
	Reserved : •reserved Ranges ; «float»
	Reserved : •reserved FieldNames ; «float»
	Field : •Type FieldName = FieldNumber ; «ident»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Field : •repeated Type FieldName = FieldNumber ; «ident»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «ident»
	Enum : •enum EnumName EnumBody «ident»
	Message : •message MessageName { } «ident»
	Message : •message MessageName { MessageBody } «ident»
	Option : •option OptionName = Constant ; «ident»
	Oneof : •oneof OneofName { } «ident»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «ident»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «ident»
	Reserved : •reserved Ranges ; «ident»
	Reserved : •reserved FieldNames ; «ident»
	Field : •Type FieldName = FieldNumber ; «int32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Field : •repeated Type FieldName = FieldNumber ; «int32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int32»
	Enum : •enum EnumName EnumBody «int32»
	Message : •message MessageName { } «int32»
	Message : •message MessageName { MessageBody } «int32»
	Option : •option OptionName = Constant ; «int32»
	Oneof : •oneof OneofName { } «int32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int32»
	Reserved : •reserved Ranges ; «int32»
	Reserved : •reserved FieldNames ; «int32»
	Field : •Type FieldName = FieldNumber ; «int64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Field : •repeated Type FieldName = FieldNumber ; «int64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «int64»
	Enum : •enum EnumName EnumBody «int64»
	Message : •message MessageName { } «int64»
	Message : •message MessageName { MessageBody } «int64»
	Option : •option OptionName = Constant ; «int64»
	Oneof : •oneof OneofName { } «int64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «int64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «int64»
	Reserved : •reserved Ranges ; «int64»
	Reserved : •reserved FieldNames ; «int64»
	Field : •Type FieldName = FieldNumber ; «map»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Field : •repeated Type FieldName = FieldNumber ; «map»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «map»
	Enum : •enum EnumName EnumBody «map»
	Message : •message MessageName { } «map»
	Message : •message MessageName { MessageBody } «map»
	Option : •option OptionName = Constant ; «map»
	Oneof : •oneof OneofName { } «map»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «map»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «map»
	Reserved : •reserved Ranges ; «map»
	Reserved : •reserved FieldNames ; «map»
	Field : •Type FieldName = FieldNumber ; «message»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Field : •repeated Type FieldName = FieldNumber ; «message»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «message»
	Enum : •enum EnumName EnumBody «message»
	Message : •message MessageName { } «message»
	Message : •message MessageName { MessageBody } «message»
	Option : •option OptionName = Constant ; «message»
	Oneof : •oneof OneofName { } «message»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «message»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «message»
	Reserved : •reserved Ranges ; «message»
	Reserved : •reserved FieldNames ; «message»
	Field : •Type FieldName = FieldNumber ; «oneof»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Field : •repeated Type FieldName = FieldNumber ; «oneof»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «oneof»
	Enum : •enum EnumName EnumBody «oneof»
	Message : •message MessageName { } «oneof»
	Message : •message MessageName { MessageBody } «oneof»
	Option : •option OptionName = Constant ; «oneof»
	Oneof : •oneof OneofName { } «oneof»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «oneof»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «oneof»
	Reserved : •reserved Ranges ; «oneof»
	Reserved : •reserved FieldNames ; «oneof»
	Field : •Type FieldName = FieldNumber ; «option»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Field : •repeated Type FieldName = FieldNumber ; «option»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «option»
	Enum : •enum EnumName EnumBody «option»
	Message : •message MessageName { } «option»
	Message : •message MessageName { MessageBody } «option»
	Option : •option OptionName = Constant ; «option»
	Oneof : •oneof OneofName { } «option»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «option»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «option»
	Reserved : •reserved Ranges ; «option»
	Reserved : •reserved FieldNames ; «option»
	Field : •Type FieldName = FieldNumber ; «repeated»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Field : •repeated Type FieldName = FieldNumber ; «repeated»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «repeated»
	Enum : •enum EnumName EnumBody «repeated»
	Message : •message MessageName { } «repeated»
	Message : •message MessageName { MessageBody } «repeated»
	Option : •option OptionName = Constant ; «repeated»
	Oneof : •oneof OneofName { } «repeated»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «repeated»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «repeated»
	Reserved : •reserved Ranges ; «repeated»
	Reserved : •reserved FieldNames ; «repeated»
	Field : •Type FieldName = FieldNumber ; «reserved»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Field : •repeated Type FieldName = FieldNumber ; «reserved»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «reserved»
	Enum : •enum EnumName EnumBody «reserved»
	Message : •message MessageName { } «reserved»
	Message : •message MessageName { MessageBody } «reserved»
	Option : •option OptionName = Constant ; «reserved»
	Oneof : •oneof OneofName { } «reserved»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «reserved»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «reserved»
	Reserved : •reserved Ranges ; «reserved»
	Reserved : •reserved FieldNames ; «reserved»
	Field : •Type FieldName = FieldNumber ; «sfixed32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Enum : •enum EnumName EnumBody «sfixed32»
	Message : •message MessageName { } «sfixed32»
	Message : •message MessageName { MessageBody } «sfixed32»
	Option : •option OptionName = Constant ; «sfixed32»
	Oneof : •oneof OneofName { } «sfixed32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	Reserved : •reserved Ranges ; «sfixed32»
	Reserved : •reserved FieldNames ; «sfixed32»
	Field : •Type FieldName = FieldNumber ; «sfixed64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber ; «sfixed64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Enum : •enum EnumName EnumBody «sfixed64»
	Message : •message MessageName { } «sfixed64»
	Message : •message MessageName { MessageBody } «sfixed64»
	Option : •option OptionName = Constant ; «sfixed64»
	Oneof : •oneof OneofName { } «sfixed64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sfixed64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	Reserved : •reserved Ranges ; «sfixed64»
	Reserved : •reserved FieldNames ; «sfixed64»
	Field : •Type FieldName = FieldNumber ; «sint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Field : •repeated Type FieldName = FieldNumber ; «sint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint32»
	Enum : •enum EnumName EnumBody «sint32»
	Message : •message MessageName { } «sint32»
	Message : •message MessageName { MessageBody } «sint32»
	Option : •option OptionName = Constant ; «sint32»
	Oneof : •oneof OneofName { } «sint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint32»
	Reserved : •reserved Ranges ; «sint32»
	Reserved : •reserved FieldNames ; «sint32»
	Field : •Type FieldName = FieldNumber ; «sint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Field : •repeated Type FieldName = FieldNumber ; «sint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «sint64»
	Enum : •enum EnumName EnumBody «sint64»
	Message : •message MessageName { } «sint64»
	Message : •message MessageName { MessageBody } «sint64»
	Option : •option OptionName = Constant ; «sint64»
	Oneof : •oneof OneofName { } «sint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «sint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «sint64»
	Reserved : •reserved Ranges ; «sint64»
	Reserved : •reserved FieldNames ; «sint64»
	Field : •Type FieldName = FieldNumber ; «string»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Field : •repeated Type FieldName = FieldNumber ; «string»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «string»
	Enum : •enum EnumName EnumBody «string»
	Message : •message MessageName { } «string»
	Message : •message MessageName { MessageBody } «string»
	Option : •option OptionName = Constant ; «string»
	Oneof : •oneof OneofName { } «string»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «string»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «string»
	Reserved : •reserved Ranges ; «string»
	Reserved : •reserved FieldNames ; «string»
	Field : •Type FieldName = FieldNumber ; «uint32»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Field : •repeated Type FieldName = FieldNumber ; «uint32»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint32»
	Enum : •enum EnumName EnumBody «uint32»
	Message : •message MessageName { } «uint32»
	Message : •message MessageName { MessageBody } «uint32»
	Option : •option OptionName = Constant ; «uint32»
	Oneof : •oneof OneofName { } «uint32»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint32»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint32»
	Reserved : •reserved Ranges ; «uint32»
	Reserved : •reserved FieldNames ; «uint32»
	Field : •Type FieldName = FieldNumber ; «uint64»
	Field : •Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Field : •repeated Type FieldName = FieldNumber ; «uint64»
	Field : •repeated Type FieldName = FieldNumber [ FieldOptions ] ; «uint64»
	Enum : •enum EnumName EnumBody «uint64»
	Message : •message MessageName { } «uint64»
	Message : •message MessageName { MessageBody } «uint64»
	Option : •option OptionName = Constant ; «uint64»
	Oneof : •oneof OneofName { } «uint64»
	Oneof : •oneof OneofName { RepeatedOneOfFieldOrEmpty } «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber ; «uint64»
	MapField : •map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ; «uint64»
	Reserved : •reserved Ranges ; «uint64»
	Reserved : •reserved FieldNames ; «uint64»
	Type : •double «ident»
	Type : •float «ident»
	Type : •int32 «ident»
	Type : •int64 «ident»
	Type : •uint32 «ident»
	Type : •uint64 «ident»
	Type : •sint32 «ident»
	Type : •sint64 «ident»
	Type : •fixed32 «ident»
	Type : •fixed64 «ident»
	Type : •sfixed32 «ident»
	Type : •sfixed64 «ident»
	Type : •bool «ident»
	Type : •string «ident»
	Type : •bytes «ident»
	Type : •MessageType «ident»
	Type : •EnumType «ident»
	MessageType : •MessageName «ident»
	MessageType : •Idents MessageName «ident»
	MessageType : •. MessageName «ident»
	MessageType : •. Idents MessageName «ident»
	EnumType : •EnumName «ident»
	EnumType : •. EnumName «ident»
	EnumType : •. Idents EnumName «ident»
	MessageName : •ident «ident»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «ident»
}
Transitions:
	Option -> 68
	emptyStatement -> 69
	option -> 70
	ident -> 71
	. -> 72
	Message -> 73
	Enum -> 74
	Type -> 75
	double -> 76
	float -> 77
	int32 -> 78
	int64 -> 79
	uint32 -> 80
	uint64 -> 81
	sint32 -> 82
	sint64 -> 83
	fixed32 -> 84
	fixed64 -> 85
	sfixed32 -> 86
	sfixed64 -> 87
	bool -> 88
	string -> 89
	bytes -> 90
	MessageType -> 91
	EnumType -> 92
	Field -> 93
	repeated -> 94
	Oneof -> 95
	oneof -> 96
	MapField -> 98
	map -> 99
	Reserved -> 100
	reserved -> 101
	enum -> 102
	EnumName -> 103
	message -> 104
	MessageName -> 105
	Idents -> 108
	MessageContent -> 151
	} -> 261


S216{
	Option : option OptionName = Constant •; «}»
	Option : option OptionName = Constant •; «emptyStatement»
	Option : option OptionName = Constant •; «option»
	Option : option OptionName = Constant •; «rpc»
}
Transitions:
	; -> 262


S217{
	MessageName : ident• «)»
	Idents : ident •. «ident»
}
Transitions:
	. -> 132


S218{
	MessageType : . •MessageName «)»
	MessageType : . •Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	MessageName -> 263
	Idents -> 264


S219{
	Rpc : rpc RpcName ( MessageType •) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType •) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType •) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType •) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType •) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType •) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType •) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( MessageType •) returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	) -> 265


S220{
	MessageType : MessageName• «)»
}
Transitions:


S221{
	Rpc : rpc RpcName ( stream •MessageType ) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( stream •MessageType ) returns ( stream MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageName -> 220
	Idents -> 222
	MessageType -> 266


S222{
	MessageType : Idents •MessageName «)»
	Idents : Idents •ident . «ident»
	MessageName : •ident «)»
}
Transitions:
	ident -> 267
	MessageName -> 268


S223{
	Option : option OptionName = Constant ;• «}»
}
Transitions:


S224{
	EnumValueOption : OptionName •= Constant «]»
	EnumValueOption : OptionName •= Constant «,»
}
Transitions:
	= -> 269


S225{
	EnumField : ident = intLit [ EnumValueOptions •] ; «}»
	EnumValueOptions : EnumValueOptions •, EnumValueOption «]»
	EnumValueOptions : EnumValueOptions •, EnumValueOption «,»
}
Transitions:
	] -> 270
	, -> 271


S226{
	EnumValueOptions : EnumValueOption• «]»
	EnumValueOptions : EnumValueOption• «,»
}
Transitions:


S227{
	Option : option OptionName = Constant ;• «}»
	Option : option OptionName = Constant ;• «.»
	Option : option OptionName = Constant ;• «bool»
	Option : option OptionName = Constant ;• «bytes»
	Option : option OptionName = Constant ;• «double»
	Option : option OptionName = Constant ;• «emptyStatement»
	Option : option OptionName = Constant ;• «enum»
	Option : option OptionName = Constant ;• «fixed32»
	Option : option OptionName = Constant ;• «fixed64»
	Option : option OptionName = Constant ;• «float»
	Option : option OptionName = Constant ;• «ident»
	Option : option OptionName = Constant ;• «int32»
	Option : option OptionName = Constant ;• «int64»
	Option : option OptionName = Constant ;• «map»
	Option : option OptionName = Constant ;• «message»
	Option : option OptionName = Constant ;• «oneof»
	Option : option OptionName = Constant ;• «option»
	Option : option OptionName = Constant ;• «repeated»
	Option : option OptionName = Constant ;• «reserved»
	Option : option OptionName = Constant ;• «sfixed32»
	Option : option OptionName = Constant ;• «sfixed64»
	Option : option OptionName = Constant ;• «sint32»
	Option : option OptionName = Constant ;• «sint64»
	Option : option OptionName = Constant ;• «string»
	Option : option OptionName = Constant ;• «uint32»
	Option : option OptionName = Constant ;• «uint64»
}
Transitions:


S228{
	Field : Type FieldName = FieldNumber ;• «}»
	Field : Type FieldName = FieldNumber ;• «.»
	Field : Type FieldName = FieldNumber ;• «bool»
	Field : Type FieldName = FieldNumber ;• «bytes»
	Field : Type FieldName = FieldNumber ;• «double»
	Field : Type FieldName = FieldNumber ;• «emptyStatement»
	Field : Type FieldName = FieldNumber ;• «enum»
	Field : Type FieldName = FieldNumber ;• «fixed32»
	Field : Type FieldName = FieldNumber ;• «fixed64»
	Field : Type FieldName = FieldNumber ;• «float»
	Field : Type FieldName = FieldNumber ;• «ident»
	Field : Type FieldName = FieldNumber ;• «int32»
	Field : Type FieldName = FieldNumber ;• «int64»
	Field : Type FieldName = FieldNumber ;• «map»
	Field : Type FieldName = FieldNumber ;• «message»
	Field : Type FieldName = FieldNumber ;• «oneof»
	Field : Type FieldName = FieldNumber ;• «option»
	Field : Type FieldName = FieldNumber ;• «repeated»
	Field : Type FieldName = FieldNumber ;• «reserved»
	Field : Type FieldName = FieldNumber ;• «sfixed32»
	Field : Type FieldName = FieldNumber ;• «sfixed64»
	Field : Type FieldName = FieldNumber ;• «sint32»
	Field : Type FieldName = FieldNumber ;• «sint64»
	Field : Type FieldName = FieldNumber ;• «string»
	Field : Type FieldName = FieldNumber ;• «uint32»
	Field : Type FieldName = FieldNumber ;• «uint64»
}
Transitions:


S229{
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «}»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «.»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «bool»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «double»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «enum»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «float»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «ident»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «int32»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «int64»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «map»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «message»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «oneof»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «option»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «repeated»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «reserved»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «string»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	Field : Type FieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = Constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = Constant «,»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 272
	FieldOptions -> 273
	FieldOption -> 274


S230{
	Field : repeated Type FieldName = FieldNumber •; «}»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «}»
	Field : repeated Type FieldName = FieldNumber •; «.»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «.»
	Field : repeated Type FieldName = FieldNumber •; «bool»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «bool»
	Field : repeated Type FieldName = FieldNumber •; «bytes»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	Field : repeated Type FieldName = FieldNumber •; «double»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «double»
	Field : repeated Type FieldName = FieldNumber •; «emptyStatement»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	Field : repeated Type FieldName = FieldNumber •; «enum»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «enum»
	Field : repeated Type FieldName = FieldNumber •; «fixed32»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	Field : repeated Type FieldName = FieldNumber •; «fixed64»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	Field : repeated Type FieldName = FieldNumber •; «float»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «float»
	Field : repeated Type FieldName = FieldNumber •; «ident»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «ident»
	Field : repeated Type FieldName = FieldNumber •; «int32»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «int32»
	Field : repeated Type FieldName = FieldNumber •; «int64»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «int64»
	Field : repeated Type FieldName = FieldNumber •; «map»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «map»
	Field : repeated Type FieldName = FieldNumber •; «message»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «message»
	Field : repeated Type FieldName = FieldNumber •; «oneof»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «oneof»
	Field : repeated Type FieldName = FieldNumber •; «option»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «option»
	Field : repeated Type FieldName = FieldNumber •; «repeated»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «repeated»
	Field : repeated Type FieldName = FieldNumber •; «reserved»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «reserved»
	Field : repeated Type FieldName = FieldNumber •; «sfixed32»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	Field : repeated Type FieldName = FieldNumber •; «sfixed64»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	Field : repeated Type FieldName = FieldNumber •; «sint32»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	Field : repeated Type FieldName = FieldNumber •; «sint64»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	Field : repeated Type FieldName = FieldNumber •; «string»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «string»
	Field : repeated Type FieldName = FieldNumber •; «uint32»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	Field : repeated Type FieldName = FieldNumber •; «uint64»
	Field : repeated Type FieldName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 275
	[ -> 276


S231{
	OneofField : Type FieldName •= FieldNumber ; «}»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type FieldName •= FieldNumber ; «.»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «.»
	OneofField : Type FieldName •= FieldNumber ; «bool»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type FieldName •= FieldNumber ; «bytes»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type FieldName •= FieldNumber ; «double»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type FieldName •= FieldNumber ; «fixed32»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type FieldName •= FieldNumber ; «fixed64»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type FieldName •= FieldNumber ; «float»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type FieldName •= FieldNumber ; «ident»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «ident»
	OneofField : Type FieldName •= FieldNumber ; «int32»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type FieldName •= FieldNumber ; «int64»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type FieldName •= FieldNumber ; «sfixed32»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type FieldName •= FieldNumber ; «sfixed64»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type FieldName •= FieldNumber ; «sint32»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type FieldName •= FieldNumber ; «sint64»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type FieldName •= FieldNumber ; «string»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type FieldName •= FieldNumber ; «uint32»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type FieldName •= FieldNumber ; «uint64»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type FieldName •= FieldNumber ; «emptyStatement»
	OneofField : Type FieldName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
}
Transitions:
	= -> 277


S232{
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «.»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «ident»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty emptyStatement• «emptyStatement»
}
Transitions:


S233{
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «}»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «.»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «bool»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «bytes»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «double»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «emptyStatement»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «enum»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «fixed32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «fixed64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «float»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «ident»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «int32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «int64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «map»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «message»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «oneof»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «option»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «repeated»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «reserved»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «sfixed32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «sfixed64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «sint32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «sint64»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «string»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «uint32»
	Oneof : oneof OneofName { RepeatedOneOfFieldOrEmpty }• «uint64»
}
Transitions:


S234{
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «}»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «.»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «bool»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «bytes»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «double»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «fixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «fixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «float»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «ident»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «int32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «int64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sfixed32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sfixed64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «sint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «string»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «uint32»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «uint64»
	RepeatedOneOfFieldOrEmpty : RepeatedOneOfFieldOrEmpty OneofField• «emptyStatement»
}
Transitions:


S235{
	MessageName : ident• «>»
	Idents : ident •. «ident»
	EnumName : ident• «>»
}
Transitions:
	. -> 132


S236{
	MessageType : . •MessageName «>»
	MessageType : . •Idents MessageName «>»
	EnumType : . •EnumName «>»
	EnumType : . •Idents EnumName «>»
	MessageName : •ident «>»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
	EnumName : •ident «>»
}
Transitions:
	ident -> 235
	EnumName -> 278
	MessageName -> 279
	Idents -> 280


S237{
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «}»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «.»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «bool»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «bytes»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «double»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «enum»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «float»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «ident»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «int32»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «int64»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «map»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «message»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «oneof»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «option»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «repeated»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «reserved»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «sint32»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «sint64»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «string»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «uint32»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type •> MapName = FieldNumber ; «uint64»
	MapField : map < KeyType , Type •> MapName = FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	> -> 281


S238{
	Type : double• «>»
}
Transitions:


S239{
	Type : float• «>»
}
Transitions:


S240{
	Type : int32• «>»
}
Transitions:


S241{
	Type : int64• «>»
}
Transitions:


S242{
	Type : uint32• «>»
}
Transitions:


S243{
	Type : uint64• «>»
}
Transitions:


S244{
	Type : sint32• «>»
}
Transitions:


S245{
	Type : sint64• «>»
}
Transitions:


S246{
	Type : fixed32• «>»
}
Transitions:


S247{
	Type : fixed64• «>»
}
Transitions:


S248{
	Type : sfixed32• «>»
}
Transitions:


S249{
	Type : sfixed64• «>»
}
Transitions:


S250{
	Type : bool• «>»
}
Transitions:


S251{
	Type : string• «>»
}
Transitions:


S252{
	Type : bytes• «>»
}
Transitions:


S253{
	Type : MessageType• «>»
}
Transitions:


S254{
	Type : EnumType• «>»
}
Transitions:


S255{
	EnumType : EnumName• «>»
}
Transitions:


S256{
	MessageType : MessageName• «>»
}
Transitions:


S257{
	MessageType : Idents •MessageName «>»
	Idents : Idents •ident . «ident»
	MessageName : •ident «>»
}
Transitions:
	ident -> 282
	MessageName -> 283


S258{
	EnumBody : { Option }• «}»
	EnumBody : { Option }• «.»
	EnumBody : { Option }• «bool»
	EnumBody : { Option }• «bytes»
	EnumBody : { Option }• «double»
	EnumBody : { Option }• «emptyStatement»
	EnumBody : { Option }• «enum»
	EnumBody : { Option }• «fixed32»
	EnumBody : { Option }• «fixed64»
	EnumBody : { Option }• «float»
	EnumBody : { Option }• «ident»
	EnumBody : { Option }• «int32»
	EnumBody : { Option }• «int64»
	EnumBody : { Option }• «map»
	EnumBody : { Option }• «message»
	EnumBody : { Option }• «oneof»
	EnumBody : { Option }• «option»
	EnumBody : { Option }• «repeated»
	EnumBody : { Option }• «reserved»
	EnumBody : { Option }• «sfixed32»
	EnumBody : { Option }• «sfixed64»
	EnumBody : { Option }• «sint32»
	EnumBody : { Option }• «sint64»
	EnumBody : { Option }• «string»
	EnumBody : { Option }• «uint32»
	EnumBody : { Option }• «uint64»
}
Transitions:


S259{
	EnumBody : { emptyStatement }• «}»
	EnumBody : { emptyStatement }• «.»
	EnumBody : { emptyStatement }• «bool»
	EnumBody : { emptyStatement }• «bytes»
	EnumBody : { emptyStatement }• «double»
	EnumBody : { emptyStatement }• «emptyStatement»
	EnumBody : { emptyStatement }• «enum»
	EnumBody : { emptyStatement }• «fixed32»
	EnumBody : { emptyStatement }• «fixed64»
	EnumBody : { emptyStatement }• «float»
	EnumBody : { emptyStatement }• «ident»
	EnumBody : { emptyStatement }• «int32»
	EnumBody : { emptyStatement }• «int64»
	EnumBody : { emptyStatement }• «map»
	EnumBody : { emptyStatement }• «message»
	EnumBody : { emptyStatement }• «oneof»
	EnumBody : { emptyStatement }• «option»
	EnumBody : { emptyStatement }• «repeated»
	EnumBody : { emptyStatement }• «reserved»
	EnumBody : { emptyStatement }• «sfixed32»
	EnumBody : { emptyStatement }• «sfixed64»
	EnumBody : { emptyStatement }• «sint32»
	EnumBody : { emptyStatement }• «sint64»
	EnumBody : { emptyStatement }• «string»
	EnumBody : { emptyStatement }• «uint32»
	EnumBody : { emptyStatement }• «uint64»
}
Transitions:


S260{
	EnumBody : { EnumField }• «}»
	EnumBody : { EnumField }• «.»
	EnumBody : { EnumField }• «bool»
	EnumBody : { EnumField }• «bytes»
	EnumBody : { EnumField }• «double»
	EnumBody : { EnumField }• «emptyStatement»
	EnumBody : { EnumField }• «enum»
	EnumBody : { EnumField }• «fixed32»
	EnumBody : { EnumField }• «fixed64»
	EnumBody : { EnumField }• «float»
	EnumBody : { EnumField }• «ident»
	EnumBody : { EnumField }• «int32»
	EnumBody : { EnumField }• «int64»
	EnumBody : { EnumField }• «map»
	EnumBody : { EnumField }• «message»
	EnumBody : { EnumField }• «oneof»
	EnumBody : { EnumField }• «option»
	EnumBody : { EnumField }• «repeated»
	EnumBody : { EnumField }• «reserved»
	EnumBody : { EnumField }• «sfixed32»
	EnumBody : { EnumField }• «sfixed64»
	EnumBody : { EnumField }• «sint32»
	EnumBody : { EnumField }• «sint64»
	EnumBody : { EnumField }• «string»
	EnumBody : { EnumField }• «uint32»
	EnumBody : { EnumField }• «uint64»
}
Transitions:


S261{
	Message : message MessageName { MessageBody }• «}»
	Message : message MessageName { MessageBody }• «.»
	Message : message MessageName { MessageBody }• «bool»
	Message : message MessageName { MessageBody }• «bytes»
	Message : message MessageName { MessageBody }• «double»
	Message : message MessageName { MessageBody }• «emptyStatement»
	Message : message MessageName { MessageBody }• «enum»
	Message : message MessageName { MessageBody }• «fixed32»
	Message : message MessageName { MessageBody }• «fixed64»
	Message : message MessageName { MessageBody }• «float»
	Message : message MessageName { MessageBody }• «ident»
	Message : message MessageName { MessageBody }• «int32»
	Message : message MessageName { MessageBody }• «int64»
	Message : message MessageName { MessageBody }• «map»
	Message : message MessageName { MessageBody }• «message»
	Message : message MessageName { MessageBody }• «oneof»
	Message : message MessageName { MessageBody }• «option»
	Message : message MessageName { MessageBody }• «repeated»
	Message : message MessageName { MessageBody }• «reserved»
	Message : message MessageName { MessageBody }• «sfixed32»
	Message : message MessageName { MessageBody }• «sfixed64»
	Message : message MessageName { MessageBody }• «sint32»
	Message : message MessageName { MessageBody }• «sint64»
	Message : message MessageName { MessageBody }• «string»
	Message : message MessageName { MessageBody }• «uint32»
	Message : message MessageName { MessageBody }• «uint64»
}
Transitions:


S262{
	Option : option OptionName = Constant ;• «}»
	Option : option OptionName = Constant ;• «emptyStatement»
	Option : option OptionName = Constant ;• «option»
	Option : option OptionName = Constant ;• «rpc»
}
Transitions:


S263{
	MessageType : . MessageName• «)»
}
Transitions:


S264{
	MessageType : . Idents •MessageName «)»
	Idents : Idents •ident . «ident»
	MessageName : •ident «)»
}
Transitions:
	ident -> 267
	MessageName -> 284


S265{
	Rpc : rpc RpcName ( MessageType ) •returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) •returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) •returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) •returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) •returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) •returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) •returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( MessageType ) •returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	returns -> 285


S266{
	Rpc : rpc RpcName ( stream MessageType •) returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType •) returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType •) returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType •) returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType •) returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType •) returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType •) returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( stream MessageType •) returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	) -> 286


S267{
	Idents : Idents ident •. «ident»
	MessageName : ident• «)»
}
Transitions:
	. -> 190


S268{
	MessageType : Idents MessageName• «)»
}
Transitions:


S269{
	EnumValueOption : OptionName = •Constant «]»
	EnumValueOption : OptionName = •Constant «,»
	Constant : •FullIdent «]»
	Constant : •- intLit «]»
	Constant : •+ intLit «]»
	Constant : •- floatLit «]»
	Constant : •+ floatLit «]»
	Constant : •strLit «]»
	Constant : •boolLit «]»
	Constant : •FullIdent «,»
	Constant : •- intLit «,»
	Constant : •+ intLit «,»
	Constant : •- floatLit «,»
	Constant : •+ floatLit «,»
	Constant : •strLit «,»
	Constant : •boolLit «,»
	FullIdent : •ident «]»
	FullIdent : •FullIdent . ident «]»
	FullIdent : •ident «,»
	FullIdent : •FullIdent . ident «,»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	strLit -> 287
	FullIdent -> 288
	Constant -> 289
	ident -> 290
	- -> 291
	+ -> 292
	boolLit -> 293


S270{
	EnumField : ident = intLit [ EnumValueOptions ] •; «}»
}
Transitions:
	; -> 294


S271{
	EnumValueOptions : EnumValueOptions , •EnumValueOption «]»
	EnumValueOptions : EnumValueOptions , •EnumValueOption «,»
	EnumValueOption : •OptionName = Constant «]»
	EnumValueOption : •OptionName = Constant «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 224
	EnumValueOption -> 295


S272{
	FieldOption : OptionName •= Constant «]»
	FieldOption : OptionName •= Constant «,»
}
Transitions:
	= -> 296


S273{
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «}»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «.»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «bool»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «bytes»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «double»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «enum»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «float»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «ident»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «int32»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «int64»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «map»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «message»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «oneof»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «option»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «repeated»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «reserved»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «sint32»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «sint64»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «string»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «uint32»
	Field : Type FieldName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	] -> 297
	, -> 298


S274{
	FieldOptions : FieldOption• «]»
	FieldOptions : FieldOption• «,»
}
Transitions:


S275{
	Field : repeated Type FieldName = FieldNumber ;• «}»
	Field : repeated Type FieldName = FieldNumber ;• «.»
	Field : repeated Type FieldName = FieldNumber ;• «bool»
	Field : repeated Type FieldName = FieldNumber ;• «bytes»
	Field : repeated Type FieldName = FieldNumber ;• «double»
	Field : repeated Type FieldName = FieldNumber ;• «emptyStatement»
	Field : repeated Type FieldName = FieldNumber ;• «enum»
	Field : repeated Type FieldName = FieldNumber ;• «fixed32»
	Field : repeated Type FieldName = FieldNumber ;• «fixed64»
	Field : repeated Type FieldName = FieldNumber ;• «float»
	Field : repeated Type FieldName = FieldNumber ;• «ident»
	Field : repeated Type FieldName = FieldNumber ;• «int32»
	Field : repeated Type FieldName = FieldNumber ;• «int64»
	Field : repeated Type FieldName = FieldNumber ;• «map»
	Field : repeated Type FieldName = FieldNumber ;• «message»
	Field : repeated Type FieldName = FieldNumber ;• «oneof»
	Field : repeated Type FieldName = FieldNumber ;• «option»
	Field : repeated Type FieldName = FieldNumber ;• «repeated»
	Field : repeated Type FieldName = FieldNumber ;• «reserved»
	Field : repeated Type FieldName = FieldNumber ;• «sfixed32»
	Field : repeated Type FieldName = FieldNumber ;• «sfixed64»
	Field : repeated Type FieldName = FieldNumber ;• «sint32»
	Field : repeated Type FieldName = FieldNumber ;• «sint64»
	Field : repeated Type FieldName = FieldNumber ;• «string»
	Field : repeated Type FieldName = FieldNumber ;• «uint32»
	Field : repeated Type FieldName = FieldNumber ;• «uint64»
}
Transitions:


S276{
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «}»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «.»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «bool»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «double»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «enum»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «float»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «ident»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «int32»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «int64»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «map»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «message»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «oneof»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «option»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «repeated»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «reserved»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «string»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	Field : repeated Type FieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = Constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = Constant «,»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 272
	FieldOption -> 274
	FieldOptions -> 299


S277{
	OneofField : Type FieldName = •FieldNumber ; «}»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «}»
	OneofField : Type FieldName = •FieldNumber ; «.»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «.»
	OneofField : Type FieldName = •FieldNumber ; «bool»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «bool»
	OneofField : Type FieldName = •FieldNumber ; «bytes»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «bytes»
	OneofField : Type FieldName = •FieldNumber ; «double»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «double»
	OneofField : Type FieldName = •FieldNumber ; «fixed32»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed32»
	OneofField : Type FieldName = •FieldNumber ; «fixed64»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «fixed64»
	OneofField : Type FieldName = •FieldNumber ; «float»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «float»
	OneofField : Type FieldName = •FieldNumber ; «ident»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «ident»
	OneofField : Type FieldName = •FieldNumber ; «int32»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «int32»
	OneofField : Type FieldName = •FieldNumber ; «int64»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «int64»
	OneofField : Type FieldName = •FieldNumber ; «sfixed32»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	OneofField : Type FieldName = •FieldNumber ; «sfixed64»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	OneofField : Type FieldName = •FieldNumber ; «sint32»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «sint32»
	OneofField : Type FieldName = •FieldNumber ; «sint64»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «sint64»
	OneofField : Type FieldName = •FieldNumber ; «string»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «string»
	OneofField : Type FieldName = •FieldNumber ; «uint32»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «uint32»
	OneofField : Type FieldName = •FieldNumber ; «uint64»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «uint64»
	OneofField : Type FieldName = •FieldNumber ; «emptyStatement»
	OneofField : Type FieldName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 198
	FieldNumber -> 300


S278{
	EnumType : . EnumName• «>»
}
Transitions:


S279{
	MessageType : . MessageName• «>»
}
Transitions:


S280{
	MessageType : . Idents •MessageName «>»
	EnumType : . Idents •EnumName «>»
	Idents : Idents •ident . «ident»
	MessageName : •ident «>»
	EnumName : •ident «>»
}
Transitions:
	ident -> 301
	EnumName -> 302
	MessageName -> 303


S281{
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «}»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «.»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «bool»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «bytes»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «double»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «enum»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «float»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «ident»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «int32»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «int64»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «map»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «message»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «oneof»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «option»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «repeated»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «reserved»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «sint32»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «sint64»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «string»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «uint32»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > •MapName = FieldNumber ; «uint64»
	MapField : map < KeyType , Type > •MapName = FieldNumber [ FieldOptions ] ; «uint64»
	MapName : •ident «=»
}
Transitions:
	ident -> 304
	MapName -> 305


S282{
	Idents : Idents ident •. «ident»
	MessageName : ident• «>»
}
Transitions:
	. -> 190


S283{
	MessageType : Idents MessageName• «>»
}
Transitions:


S284{
	MessageType : . Idents MessageName• «)»
}
Transitions:


S285{
	Rpc : rpc RpcName ( MessageType ) returns •( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns •( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns •( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns •( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns •( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns •( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns •( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( MessageType ) returns •( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	( -> 306


S286{
	Rpc : rpc RpcName ( stream MessageType ) •returns ( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( stream MessageType ) •returns ( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	returns -> 307


S287{
	Constant : strLit• «]»
	Constant : strLit• «,»
}
Transitions:


S288{
	Constant : FullIdent• «]»
	Constant : FullIdent• «,»
	FullIdent : FullIdent •. ident «]»
	FullIdent : FullIdent •. ident «,»
	FullIdent : FullIdent •. ident «.»
}
Transitions:
	. -> 308


S289{
	EnumValueOption : OptionName = Constant• «]»
	EnumValueOption : OptionName = Constant• «,»
}
Transitions:


S290{
	FullIdent : ident• «]»
	FullIdent : ident• «,»
	FullIdent : ident• «.»
}
Transitions:


S291{
	Constant : - •intLit «]»
	Constant : - •floatLit «]»
	Constant : - •intLit «,»
	Constant : - •floatLit «,»
}
Transitions:
	intLit -> 309
	floatLit -> 310


S292{
	Constant : + •intLit «]»
	Constant : + •floatLit «]»
	Constant : + •intLit «,»
	Constant : + •floatLit «,»
}
Transitions:
	intLit -> 311
	floatLit -> 312


S293{
	Constant : boolLit• «]»
	Constant : boolLit• «,»
}
Transitions:


S294{
	EnumField : ident = intLit [ EnumValueOptions ] ;• «}»
}
Transitions:


S295{
	EnumValueOptions : EnumValueOptions , EnumValueOption• «]»
	EnumValueOptions : EnumValueOptions , EnumValueOption• «,»
}
Transitions:


S296{
	FieldOption : OptionName = •Constant «]»
	FieldOption : OptionName = •Constant «,»
	Constant : •FullIdent «]»
	Constant : •- intLit «]»
	Constant : •+ intLit «]»
	Constant : •- floatLit «]»
	Constant : •+ floatLit «]»
	Constant : •strLit «]»
	Constant : •boolLit «]»
	Constant : •FullIdent «,»
	Constant : •- intLit «,»
	Constant : •+ intLit «,»
	Constant : •- floatLit «,»
	Constant : •+ floatLit «,»
	Constant : •strLit «,»
	Constant : •boolLit «,»
	FullIdent : •ident «]»
	FullIdent : •FullIdent . ident «]»
	FullIdent : •ident «,»
	FullIdent : •FullIdent . ident «,»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	strLit -> 287
	FullIdent -> 288
	ident -> 290
	- -> 291
	+ -> 292
	boolLit -> 293
	Constant -> 313


S297{
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «}»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «.»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «bool»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «bytes»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «double»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «enum»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «float»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «ident»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «int32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «int64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «map»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «message»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «oneof»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «option»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «repeated»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «reserved»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «sint32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «sint64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «string»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «uint32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 314


S298{
	FieldOptions : FieldOptions , •FieldOption «]»
	FieldOptions : FieldOptions , •FieldOption «,»
	FieldOption : •OptionName = Constant «]»
	FieldOption : •OptionName = Constant «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 272
	FieldOption -> 315


S299{
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «}»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «.»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «bool»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «bytes»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «double»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «enum»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «float»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «ident»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «int32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «int64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «map»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «message»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «oneof»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «option»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «repeated»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «reserved»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «sint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «sint64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «string»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «uint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 298
	] -> 316


S300{
	OneofField : Type FieldName = FieldNumber •; «}»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «}»
	OneofField : Type FieldName = FieldNumber •; «.»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «.»
	OneofField : Type FieldName = FieldNumber •; «bool»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «bool»
	OneofField : Type FieldName = FieldNumber •; «bytes»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «bytes»
	OneofField : Type FieldName = FieldNumber •; «double»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «double»
	OneofField : Type FieldName = FieldNumber •; «fixed32»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed32»
	OneofField : Type FieldName = FieldNumber •; «fixed64»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «fixed64»
	OneofField : Type FieldName = FieldNumber •; «float»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «float»
	OneofField : Type FieldName = FieldNumber •; «ident»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «ident»
	OneofField : Type FieldName = FieldNumber •; «int32»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «int32»
	OneofField : Type FieldName = FieldNumber •; «int64»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «int64»
	OneofField : Type FieldName = FieldNumber •; «sfixed32»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	OneofField : Type FieldName = FieldNumber •; «sfixed64»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	OneofField : Type FieldName = FieldNumber •; «sint32»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «sint32»
	OneofField : Type FieldName = FieldNumber •; «sint64»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «sint64»
	OneofField : Type FieldName = FieldNumber •; «string»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «string»
	OneofField : Type FieldName = FieldNumber •; «uint32»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «uint32»
	OneofField : Type FieldName = FieldNumber •; «uint64»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «uint64»
	OneofField : Type FieldName = FieldNumber •; «emptyStatement»
	OneofField : Type FieldName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
}
Transitions:
	; -> 317
	[ -> 318


S301{
	Idents : Idents ident •. «ident»
	MessageName : ident• «>»
	EnumName : ident• «>»
}
Transitions:
	. -> 190


S302{
	EnumType : . Idents EnumName• «>»
}
Transitions:


S303{
	MessageType : . Idents MessageName• «>»
}
Transitions:


S304{
	MapName : ident• «=»
}
Transitions:


S305{
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «}»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «.»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «bool»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «bytes»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «double»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «enum»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «float»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «ident»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «int32»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «int64»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «map»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «message»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «oneof»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «option»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «repeated»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «reserved»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «sint32»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «sint64»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «string»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «uint32»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > MapName •= FieldNumber ; «uint64»
	MapField : map < KeyType , Type > MapName •= FieldNumber [ FieldOptions ] ; «uint64»
}
Transitions:
	= -> 319


S306{
	Rpc : rpc RpcName ( MessageType ) returns ( •MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( •stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( •MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( •stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( •MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( •stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( •MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( MessageType ) returns ( •stream MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageName -> 220
	Idents -> 222
	MessageType -> 320
	stream -> 321


S307{
	Rpc : rpc RpcName ( stream MessageType ) returns •( MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns •( stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns •( MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns •( stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns •( MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns •( stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns •( MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( stream MessageType ) returns •( stream MessageType ) RpcBodies «rpc»
}
Transitions:
	( -> 322


S308{
	FullIdent : FullIdent . •ident «]»
	FullIdent : FullIdent . •ident «,»
	FullIdent : FullIdent . •ident «.»
}
Transitions:
	ident -> 323


S309{
	Constant : - intLit• «]»
	Constant : - intLit• «,»
}
Transitions:


S310{
	Constant : - floatLit• «]»
	Constant : - floatLit• «,»
}
Transitions:


S311{
	Constant : + intLit• «]»
	Constant : + intLit• «,»
}
Transitions:


S312{
	Constant : + floatLit• «]»
	Constant : + floatLit• «,»
}
Transitions:


S313{
	FieldOption : OptionName = Constant• «]»
	FieldOption : OptionName = Constant• «,»
}
Transitions:


S314{
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «}»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «.»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «bool»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «double»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «enum»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «float»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «ident»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «int32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «int64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «map»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «message»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «oneof»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «option»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «repeated»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «reserved»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «string»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	Field : Type FieldName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S315{
	FieldOptions : FieldOptions , FieldOption• «]»
	FieldOptions : FieldOptions , FieldOption• «,»
}
Transitions:


S316{
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «}»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «.»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «bool»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «bytes»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «double»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «enum»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «float»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «ident»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «int32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «int64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «map»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «message»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «oneof»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «option»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «repeated»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «reserved»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «sint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «sint64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «string»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «uint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 324


S317{
	OneofField : Type FieldName = FieldNumber ;• «}»
	OneofField : Type FieldName = FieldNumber ;• «.»
	OneofField : Type FieldName = FieldNumber ;• «bool»
	OneofField : Type FieldName = FieldNumber ;• «bytes»
	OneofField : Type FieldName = FieldNumber ;• «double»
	OneofField : Type FieldName = FieldNumber ;• «fixed32»
	OneofField : Type FieldName = FieldNumber ;• «fixed64»
	OneofField : Type FieldName = FieldNumber ;• «float»
	OneofField : Type FieldName = FieldNumber ;• «ident»
	OneofField : Type FieldName = FieldNumber ;• «int32»
	OneofField : Type FieldName = FieldNumber ;• «int64»
	OneofField : Type FieldName = FieldNumber ;• «sfixed32»
	OneofField : Type FieldName = FieldNumber ;• «sfixed64»
	OneofField : Type FieldName = FieldNumber ;• «sint32»
	OneofField : Type FieldName = FieldNumber ;• «sint64»
	OneofField : Type FieldName = FieldNumber ;• «string»
	OneofField : Type FieldName = FieldNumber ;• «uint32»
	OneofField : Type FieldName = FieldNumber ;• «uint64»
	OneofField : Type FieldName = FieldNumber ;• «emptyStatement»
}
Transitions:


S318{
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «}»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «.»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «bool»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «bytes»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «double»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed32»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «fixed64»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «float»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «ident»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «int32»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «int64»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «sint32»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «sint64»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «string»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «uint32»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «uint64»
	OneofField : Type FieldName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = Constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = Constant «,»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 272
	FieldOption -> 274
	FieldOptions -> 325


S319{
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «}»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «.»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «.»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «bool»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «bytes»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «double»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «emptyStatement»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «enum»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «fixed32»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «fixed64»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «float»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «ident»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «ident»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «int32»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «int64»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «map»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «message»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «oneof»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «option»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «repeated»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «reserved»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «sfixed32»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «sfixed64»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «sint32»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «sint64»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «string»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «uint32»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > MapName = •FieldNumber ; «uint64»
	MapField : map < KeyType , Type > MapName = •FieldNumber [ FieldOptions ] ; «uint64»
	FieldNumber : •intLit «;»
	FieldNumber : •intLit «[»
}
Transitions:
	intLit -> 198
	FieldNumber -> 326


S320{
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType •) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType •) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType •) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType •) RpcBodies «rpc»
}
Transitions:
	) -> 327


S321{
	Rpc : rpc RpcName ( MessageType ) returns ( stream •MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( stream •MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( stream •MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( stream •MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageName -> 220
	Idents -> 222
	MessageType -> 328


S322{
	Rpc : rpc RpcName ( stream MessageType ) returns ( •MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •stream MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •stream MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •stream MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •MessageType ) RpcBodies «rpc»
	Rpc : rpc RpcName ( stream MessageType ) returns ( •stream MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageName -> 220
	Idents -> 222
	MessageType -> 329
	stream -> 330


S323{
	FullIdent : FullIdent . ident• «]»
	FullIdent : FullIdent . ident• «,»
	FullIdent : FullIdent . ident• «.»
}
Transitions:


S324{
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «}»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «.»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «bool»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «double»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «enum»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «float»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «ident»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «int32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «int64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «map»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «message»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «oneof»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «option»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «repeated»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «reserved»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «string»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	Field : repeated Type FieldName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S325{
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «}»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «.»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «bool»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «bytes»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «double»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «fixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «fixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «float»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «ident»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «int32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «int64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «sfixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «sint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «sint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «string»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «uint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «uint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 298
	] -> 331


S326{
	MapField : map < KeyType , Type > MapName = FieldNumber •; «}»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «}»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «.»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «.»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «double»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «double»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «float»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «float»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «map»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «map»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «message»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «message»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «option»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «option»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «string»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «string»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber •; «uint64»
	MapField : map < KeyType , Type > MapName = FieldNumber •[ FieldOptions ] ; «uint64»
}
Transitions:
	; -> 332
	[ -> 333


S327{
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) •RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) •RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) •RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 334
	{ -> 335
	RpcBodies -> 336


S328{
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType •) RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType •) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType •) RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType •) RpcBodies «rpc»
}
Transitions:
	) -> 337


S329{
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType •) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType •) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType •) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType •) RpcBodies «rpc»
}
Transitions:
	) -> 338


S330{
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream •MessageType ) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream •MessageType ) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream •MessageType ) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream •MessageType ) RpcBodies «rpc»
	MessageType : •MessageName «)»
	MessageType : •Idents MessageName «)»
	MessageType : •. MessageName «)»
	MessageType : •. Idents MessageName «)»
	MessageName : •ident «)»
	Idents : •ident . «ident»
	Idents : •Idents ident . «ident»
}
Transitions:
	ident -> 217
	. -> 218
	MessageName -> 220
	Idents -> 222
	MessageType -> 339


S331{
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «}»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «.»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «bool»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «bytes»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «double»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «fixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «fixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «float»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «ident»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «int32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «int64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «sfixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «sint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «sint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «string»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «uint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «uint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] •; «emptyStatement»
}
Transitions:
	; -> 340


S332{
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «}»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «.»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «double»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «float»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «map»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «message»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «option»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «string»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber ;• «uint64»
}
Transitions:


S333{
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «}»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «.»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «double»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «float»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «map»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «message»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «option»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «string»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ •FieldOptions ] ; «uint64»
	FieldOptions : •FieldOption «]»
	FieldOptions : •FieldOptions , FieldOption «]»
	FieldOption : •OptionName = Constant «]»
	FieldOptions : •FieldOption «,»
	FieldOptions : •FieldOptions , FieldOption «,»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
	FieldOption : •OptionName = Constant «,»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 272
	FieldOption -> 274
	FieldOptions -> 341


S334{
	RpcBodies : ;• «}»
	RpcBodies : ;• «emptyStatement»
	RpcBodies : ;• «option»
	RpcBodies : ;• «rpc»
}
Transitions:


S335{
	RpcBodies : { •} «}»
	RpcBodies : { •RpcBody } «}»
	RpcBodies : { •} «emptyStatement»
	RpcBodies : { •RpcBody } «emptyStatement»
	RpcBodies : { •} «option»
	RpcBodies : { •RpcBody } «option»
	RpcBodies : { •} «rpc»
	RpcBodies : { •RpcBody } «rpc»
	RpcBody : •Option «}»
	RpcBody : •emptyStatement «}»
	RpcBody : •RpcBody Option «}»
	RpcBody : •RpcBody emptyStatement «}»
	Option : •option OptionName = Constant ; «}»
	RpcBody : •Option «option»
	RpcBody : •emptyStatement «option»
	RpcBody : •RpcBody Option «option»
	RpcBody : •RpcBody emptyStatement «option»
	RpcBody : •Option «emptyStatement»
	RpcBody : •emptyStatement «emptyStatement»
	RpcBody : •RpcBody Option «emptyStatement»
	RpcBody : •RpcBody emptyStatement «emptyStatement»
	Option : •option OptionName = Constant ; «option»
	Option : •option OptionName = Constant ; «emptyStatement»
}
Transitions:
	Option -> 342
	emptyStatement -> 343
	option -> 344
	} -> 345
	RpcBody -> 346


S336{
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies• «}»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies• «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies• «option»
	Rpc : rpc RpcName ( MessageType ) returns ( MessageType ) RpcBodies• «rpc»
}
Transitions:


S337{
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) •RpcBodies «}»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) •RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) •RpcBodies «option»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 334
	{ -> 335
	RpcBodies -> 347


S338{
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) •RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) •RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) •RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 334
	{ -> 335
	RpcBodies -> 348


S339{
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType •) RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType •) RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType •) RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType •) RpcBodies «rpc»
}
Transitions:
	) -> 349


S340{
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «}»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «.»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «bool»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «bytes»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «double»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «fixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «float»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «ident»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «int32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «int64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «sint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «sint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «string»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «uint32»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «uint64»
	OneofField : Type FieldName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
}
Transitions:


S341{
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «}»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «.»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «double»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «float»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «map»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «message»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «option»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «string»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions •] ; «uint64»
	FieldOptions : FieldOptions •, FieldOption «]»
	FieldOptions : FieldOptions •, FieldOption «,»
}
Transitions:
	, -> 298
	] -> 350


S342{
	RpcBody : Option• «}»
	RpcBody : Option• «option»
	RpcBody : Option• «emptyStatement»
}
Transitions:


S343{
	RpcBody : emptyStatement• «}»
	RpcBody : emptyStatement• «option»
	RpcBody : emptyStatement• «emptyStatement»
}
Transitions:


S344{
	Option : option •OptionName = Constant ; «}»
	Option : option •OptionName = Constant ; «option»
	Option : option •OptionName = Constant ; «emptyStatement»
	OptionName : •ident «=»
	OptionName : •ident DotRepeatedIdents «=»
	OptionName : •( FullIdent ) «=»
	OptionName : •( FullIdent ) DotRepeatedIdents «=»
}
Transitions:
	ident -> 28
	( -> 29
	OptionName -> 351


S345{
	RpcBodies : { }• «}»
	RpcBodies : { }• «emptyStatement»
	RpcBodies : { }• «option»
	RpcBodies : { }• «rpc»
}
Transitions:


S346{
	RpcBodies : { RpcBody •} «}»
	RpcBodies : { RpcBody •} «emptyStatement»
	RpcBodies : { RpcBody •} «option»
	RpcBodies : { RpcBody •} «rpc»
	RpcBody : RpcBody •Option «}»
	RpcBody : RpcBody •emptyStatement «}»
	RpcBody : RpcBody •Option «option»
	RpcBody : RpcBody •emptyStatement «option»
	RpcBody : RpcBody •Option «emptyStatement»
	RpcBody : RpcBody •emptyStatement «emptyStatement»
	Option : •option OptionName = Constant ; «}»
	Option : •option OptionName = Constant ; «option»
	Option : •option OptionName = Constant ; «emptyStatement»
}
Transitions:
	option -> 344
	Option -> 352
	emptyStatement -> 353
	} -> 354


S347{
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies• «}»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies• «emptyStatement»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies• «option»
	Rpc : rpc RpcName ( MessageType ) returns ( stream MessageType ) RpcBodies• «rpc»
}
Transitions:


S348{
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies• «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies• «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies• «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( MessageType ) RpcBodies• «rpc»
}
Transitions:


S349{
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) •RpcBodies «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) •RpcBodies «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) •RpcBodies «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) •RpcBodies «rpc»
	RpcBodies : •{ } «}»
	RpcBodies : •{ RpcBody } «}»
	RpcBodies : •; «}»
	RpcBodies : •{ } «emptyStatement»
	RpcBodies : •{ RpcBody } «emptyStatement»
	RpcBodies : •; «emptyStatement»
	RpcBodies : •{ } «option»
	RpcBodies : •{ RpcBody } «option»
	RpcBodies : •; «option»
	RpcBodies : •{ } «rpc»
	RpcBodies : •{ RpcBody } «rpc»
	RpcBodies : •; «rpc»
}
Transitions:
	; -> 334
	{ -> 335
	RpcBodies -> 355


S350{
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «}»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «.»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «double»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «float»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «map»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «message»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «option»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «string»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] •; «uint64»
}
Transitions:
	; -> 356


S351{
	Option : option OptionName •= Constant ; «}»
	Option : option OptionName •= Constant ; «option»
	Option : option OptionName •= Constant ; «emptyStatement»
}
Transitions:
	= -> 357


S352{
	RpcBody : RpcBody Option• «}»
	RpcBody : RpcBody Option• «option»
	RpcBody : RpcBody Option• «emptyStatement»
}
Transitions:


S353{
	RpcBody : RpcBody emptyStatement• «}»
	RpcBody : RpcBody emptyStatement• «option»
	RpcBody : RpcBody emptyStatement• «emptyStatement»
}
Transitions:


S354{
	RpcBodies : { RpcBody }• «}»
	RpcBodies : { RpcBody }• «emptyStatement»
	RpcBodies : { RpcBody }• «option»
	RpcBodies : { RpcBody }• «rpc»
}
Transitions:


S355{
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies• «}»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies• «emptyStatement»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies• «option»
	Rpc : rpc RpcName ( stream MessageType ) returns ( stream MessageType ) RpcBodies• «rpc»
}
Transitions:


S356{
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «}»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «.»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «bool»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «bytes»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «double»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «emptyStatement»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «enum»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «fixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «fixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «float»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «ident»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «int32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «int64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «map»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «message»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «oneof»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «option»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «repeated»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «reserved»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «sfixed32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «sfixed64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «sint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «sint64»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «string»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «uint32»
	MapField : map < KeyType , Type > MapName = FieldNumber [ FieldOptions ] ;• «uint64»
}
Transitions:


S357{
	Option : option OptionName = •Constant ; «}»
	Option : option OptionName = •Constant ; «option»
	Option : option OptionName = •Constant ; «emptyStatement»
	Constant : •FullIdent «;»
	Constant : •- intLit «;»
	Constant : •+ intLit «;»
	Constant : •- floatLit «;»
	Constant : •+ floatLit «;»
	Constant : •strLit «;»
	Constant : •boolLit «;»
	FullIdent : •ident «;»
	FullIdent : •FullIdent . ident «;»
	FullIdent : •ident «.»
	FullIdent : •FullIdent . ident «.»
}
Transitions:
	ident -> 26
	strLit -> 52
	FullIdent -> 53
	- -> 55
	+ -> 56
	boolLit -> 57
	Constant -> 358


S358{
	Option : option OptionName = Constant •; «}»
	Option : option OptionName = Constant •; «option»
	Option : option OptionName = Constant •; «emptyStatement»
}
Transitions:
	; -> 359


S359{
	Option : option OptionName = Constant ;• «}»
	Option : option OptionName = Constant ;• «option»
	Option : option OptionName = Constant ;• «emptyStatement»
}
Transitions:


