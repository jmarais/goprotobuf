// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/jmarais/goprotobuf/internal/protobuf3/token"
)

const (
	NoState    = -1
	NumStates  = 222
	NumSymbols = 279
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '_'
1: '.'
2: '.'
3: 'i'
4: 'n'
5: 'f'
6: 'n'
7: 'a'
8: 'n'
9: 't'
10: 'r'
11: 'u'
12: 'e'
13: 'f'
14: 'a'
15: 'l'
16: 's'
17: 'e'
18: '''
19: '''
20: '"'
21: '"'
22: '''
23: '"'
24: ';'
25: 's'
26: 'y'
27: 'n'
28: 't'
29: 'a'
30: 'x'
31: '='
32: 'p'
33: 'r'
34: 'o'
35: 't'
36: 'o'
37: '3'
38: ';'
39: 'i'
40: 'm'
41: 'p'
42: 'o'
43: 'r'
44: 't'
45: 'w'
46: 'e'
47: 'a'
48: 'k'
49: 'p'
50: 'u'
51: 'b'
52: 'l'
53: 'i'
54: 'c'
55: 'p'
56: 'a'
57: 'c'
58: 'k'
59: 'a'
60: 'g'
61: 'e'
62: 'o'
63: 'p'
64: 't'
65: 'i'
66: 'o'
67: 'n'
68: '('
69: ')'
70: '.'
71: 'd'
72: 'o'
73: 'u'
74: 'b'
75: 'l'
76: 'e'
77: 'f'
78: 'l'
79: 'o'
80: 'a'
81: 't'
82: 'i'
83: 'n'
84: 't'
85: '3'
86: '2'
87: 'i'
88: 'n'
89: 't'
90: '6'
91: '4'
92: 'u'
93: 'i'
94: 'n'
95: 't'
96: '3'
97: '2'
98: 'u'
99: 'i'
100: 'n'
101: 't'
102: '6'
103: '4'
104: 's'
105: 'i'
106: 'n'
107: 't'
108: '3'
109: '2'
110: 's'
111: 'i'
112: 'n'
113: 't'
114: '6'
115: '4'
116: 'f'
117: 'i'
118: 'x'
119: 'e'
120: 'd'
121: '3'
122: '2'
123: 'f'
124: 'i'
125: 'x'
126: 'e'
127: 'd'
128: '6'
129: '4'
130: 's'
131: 'f'
132: 'i'
133: 'x'
134: 'e'
135: 'd'
136: '3'
137: '2'
138: 's'
139: 'f'
140: 'i'
141: 'x'
142: 'e'
143: 'd'
144: '6'
145: '4'
146: 'b'
147: 'o'
148: 'o'
149: 'l'
150: 's'
151: 't'
152: 'r'
153: 'i'
154: 'n'
155: 'g'
156: 'b'
157: 'y'
158: 't'
159: 'e'
160: 's'
161: '['
162: ']'
163: 'r'
164: 'e'
165: 'p'
166: 'e'
167: 'a'
168: 't'
169: 'e'
170: 'd'
171: ','
172: 'o'
173: 'n'
174: 'e'
175: 'o'
176: 'f'
177: '{'
178: '}'
179: 'm'
180: 'a'
181: 'p'
182: '<'
183: '>'
184: 'r'
185: 'e'
186: 's'
187: 'e'
188: 'r'
189: 'v'
190: 'e'
191: 'd'
192: 't'
193: 'o'
194: 'm'
195: 'a'
196: 'x'
197: 'e'
198: 'n'
199: 'u'
200: 'm'
201: 'm'
202: 'e'
203: 's'
204: 's'
205: 'a'
206: 'g'
207: 'e'
208: 's'
209: 'e'
210: 'r'
211: 'v'
212: 'i'
213: 'c'
214: 'e'
215: 'r'
216: 'p'
217: 'c'
218: 'r'
219: 'e'
220: 't'
221: 'u'
222: 'r'
223: 'n'
224: 's'
225: 's'
226: 't'
227: 'r'
228: 'e'
229: 'a'
230: 'm'
231: '-'
232: '+'
233: '0'
234: '0'
235: 'x'
236: 'X'
237: 'e'
238: 'E'
239: '+'
240: '-'
241: '\'
242: 'x'
243: 'X'
244: '\'
245: '\'
246: 'a'
247: 'b'
248: 'f'
249: 'n'
250: 'r'
251: 't'
252: 'v'
253: '\'
254: '''
255: '"'
256: '/'
257: '/'
258: '\n'
259: '#'
260: '\n'
261: '/'
262: '*'
263: '*'
264: '*'
265: '/'
266: ' '
267: '\t'
268: '\r'
269: '\n'
270: 'A'-'Z'
271: 'a'-'z'
272: '0'-'9'
273: '0'-'7'
274: '0'-'9'
275: 'A'-'F'
276: 'a'-'f'
277: '0'-'9'
278: .
*/
