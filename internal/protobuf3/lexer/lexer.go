// Code generated by gocc; DO NOT EDIT.

package lexer

import (
	"io/ioutil"
	"unicode/utf8"

	"github.com/jmarais/goprotobuf/internal/protobuf3/token"
)

const (
	NoState    = -1
	NumStates  = 244
	NumSymbols = 286
)

type Lexer struct {
	src    []byte
	pos    int
	line   int
	column int
}

func NewLexer(src []byte) *Lexer {
	lexer := &Lexer{
		src:    src,
		pos:    0,
		line:   1,
		column: 1,
	}
	return lexer
}

func NewLexerFile(fpath string) (*Lexer, error) {
	src, err := ioutil.ReadFile(fpath)
	if err != nil {
		return nil, err
	}
	return NewLexer(src), nil
}

func (l *Lexer) Scan() (tok *token.Token) {
	tok = new(token.Token)
	if l.pos >= len(l.src) {
		tok.Type = token.EOF
		tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = l.pos, l.line, l.column
		return
	}
	start, startLine, startColumn, end := l.pos, l.line, l.column, 0
	tok.Type = token.INVALID
	state, rune1, size := 0, rune(-1), 0
	for state != -1 {
		if l.pos >= len(l.src) {
			rune1 = -1
		} else {
			rune1, size = utf8.DecodeRune(l.src[l.pos:])
			l.pos += size
		}

		nextState := -1
		if rune1 != -1 {
			nextState = TransTab[state](rune1)
		}
		state = nextState

		if state != -1 {

			switch rune1 {
			case '\n':
				l.line++
				l.column = 1
			case '\r':
				l.column = 1
			case '\t':
				l.column += 4
			default:
				l.column++
			}

			switch {
			case ActTab[state].Accept != -1:
				tok.Type = ActTab[state].Accept
				end = l.pos
			case ActTab[state].Ignore != "":
				start, startLine, startColumn = l.pos, l.line, l.column
				state = 0
				if start >= len(l.src) {
					tok.Type = token.EOF
				}

			}
		} else {
			if tok.Type == token.INVALID {
				end = l.pos
			}
		}
	}
	if end > start {
		l.pos = end
		tok.Lit = l.src[start:end]
	} else {
		tok.Lit = []byte{}
	}
	tok.Pos.Offset, tok.Pos.Line, tok.Pos.Column = start, startLine, startColumn

	return
}

func (l *Lexer) Reset() {
	l.pos = 0
}

/*
Lexer symbols:
0: '.'
1: '.'
2: '.'
3: '.'
4: 'p'
5: 'r'
6: 'o'
7: 't'
8: 'o'
9: '3'
10: ';'
11: '-'
12: '+'
13: '-'
14: '+'
15: 's'
16: 'y'
17: 'n'
18: 't'
19: 'a'
20: 'x'
21: '='
22: ';'
23: 'i'
24: 'm'
25: 'p'
26: 'o'
27: 'r'
28: 't'
29: 'w'
30: 'e'
31: 'a'
32: 'k'
33: 'p'
34: 'u'
35: 'b'
36: 'l'
37: 'i'
38: 'c'
39: 'p'
40: 'a'
41: 'c'
42: 'k'
43: 'a'
44: 'g'
45: 'e'
46: 'o'
47: 'p'
48: 't'
49: 'i'
50: 'o'
51: 'n'
52: '('
53: ')'
54: '.'
55: 'd'
56: 'o'
57: 'u'
58: 'b'
59: 'l'
60: 'e'
61: 'f'
62: 'l'
63: 'o'
64: 'a'
65: 't'
66: 'i'
67: 'n'
68: 't'
69: '3'
70: '2'
71: 'i'
72: 'n'
73: 't'
74: '6'
75: '4'
76: 'u'
77: 'i'
78: 'n'
79: 't'
80: '3'
81: '2'
82: 'u'
83: 'i'
84: 'n'
85: 't'
86: '6'
87: '4'
88: 's'
89: 'i'
90: 'n'
91: 't'
92: '3'
93: '2'
94: 's'
95: 'i'
96: 'n'
97: 't'
98: '6'
99: '4'
100: 'f'
101: 'i'
102: 'x'
103: 'e'
104: 'd'
105: '3'
106: '2'
107: 'f'
108: 'i'
109: 'x'
110: 'e'
111: 'd'
112: '6'
113: '4'
114: 's'
115: 'f'
116: 'i'
117: 'x'
118: 'e'
119: 'd'
120: '3'
121: '2'
122: 's'
123: 'f'
124: 'i'
125: 'x'
126: 'e'
127: 'd'
128: '6'
129: '4'
130: 'b'
131: 'o'
132: 'o'
133: 'l'
134: 's'
135: 't'
136: 'r'
137: 'i'
138: 'n'
139: 'g'
140: 'b'
141: 'y'
142: 't'
143: 'e'
144: 's'
145: '['
146: ']'
147: 'r'
148: 'e'
149: 'p'
150: 'e'
151: 'a'
152: 't'
153: 'e'
154: 'd'
155: ','
156: 'o'
157: 'n'
158: 'e'
159: 'o'
160: 'f'
161: '{'
162: '}'
163: 'm'
164: 'a'
165: 'p'
166: '<'
167: '>'
168: 'r'
169: 'e'
170: 's'
171: 'e'
172: 'r'
173: 'v'
174: 'e'
175: 'd'
176: 't'
177: 'o'
178: 'm'
179: 'a'
180: 'x'
181: 'e'
182: 'n'
183: 'u'
184: 'm'
185: 'm'
186: 'e'
187: 's'
188: 's'
189: 'a'
190: 'g'
191: 'e'
192: 's'
193: 'e'
194: 'r'
195: 'v'
196: 'i'
197: 'c'
198: 'e'
199: 'r'
200: 'p'
201: 'c'
202: 'r'
203: 'e'
204: 't'
205: 'u'
206: 'r'
207: 'n'
208: 's'
209: 's'
210: 't'
211: 'r'
212: 'e'
213: 'a'
214: 'm'
215: '_'
216: '.'
217: '0'
218: '0'
219: 'x'
220: 'X'
221: 'e'
222: 'E'
223: '+'
224: '-'
225: '.'
226: '.'
227: 'i'
228: 'n'
229: 'f'
230: 'n'
231: 'a'
232: 'n'
233: 't'
234: 'r'
235: 'u'
236: 'e'
237: 'f'
238: 'a'
239: 'l'
240: 's'
241: 'e'
242: '''
243: '''
244: '"'
245: '"'
246: '\'
247: 'x'
248: 'X'
249: '\'
250: '\'
251: 'a'
252: 'b'
253: 'f'
254: 'n'
255: 'r'
256: 't'
257: 'v'
258: '\'
259: '''
260: '"'
261: '''
262: '"'
263: '/'
264: '/'
265: '\n'
266: '#'
267: '\n'
268: '/'
269: '*'
270: '*'
271: '*'
272: '/'
273: ' '
274: '\t'
275: '\r'
276: '\n'
277: 'A'-'Z'
278: 'a'-'z'
279: '0'-'9'
280: '0'-'7'
281: '0'-'9'
282: 'A'-'F'
283: 'a'-'f'
284: '0'-'9'
285: .
*/
